{"version":3,"sources":["../src/types.ts"],"sourcesContent":["import type {\n  ColumnBaseConfig,\n  ColumnDataType,\n  DrizzleConfig,\n  ExtractTablesWithRelations,\n  Relation,\n  Relations,\n} from 'drizzle-orm'\nimport type { NodePgDatabase, NodePgQueryResultHKT } from 'drizzle-orm/node-postgres'\nimport type {\n  PgColumn,\n  PgEnum,\n  PgSchema,\n  PgTableWithColumns,\n  PgTransaction,\n} from 'drizzle-orm/pg-core'\nimport type { PgTableFn } from 'drizzle-orm/pg-core/table'\nimport type { BaseDatabaseAdapter, Payload, PayloadRequestWithData } from 'payload'\nimport type { Pool, PoolConfig } from 'pg'\n\nexport type DrizzleDB = NodePgDatabase<Record<string, unknown>>\n\nexport type Args = {\n  idType?: 'serial' | 'uuid'\n  localesSuffix?: string\n  logger?: DrizzleConfig['logger']\n  migrationDir?: string\n  pool: PoolConfig\n  push?: boolean\n  relationshipsSuffix?: string\n  schemaName?: string\n  versionsSuffix?: string\n}\n\nexport type GenericColumn = PgColumn<\n  ColumnBaseConfig<ColumnDataType, string>,\n  Record<string, unknown>\n>\n\nexport type GenericColumns = {\n  [x: string]: GenericColumn\n}\n\nexport type GenericTable = PgTableWithColumns<{\n  columns: GenericColumns\n  dialect: string\n  name: string\n  schema: undefined\n}>\n\nexport type GenericEnum = PgEnum<[string, ...string[]]>\n\nexport type GenericRelation = Relations<string, Record<string, Relation<string>>>\n\nexport type DrizzleTransaction = PgTransaction<\n  NodePgQueryResultHKT,\n  Record<string, unknown>,\n  ExtractTablesWithRelations<Record<string, unknown>>\n>\n\nexport type PostgresAdapter = BaseDatabaseAdapter & {\n  drizzle: DrizzleDB\n  enums: Record<string, GenericEnum>\n  /**\n   * An object keyed on each table, with a key value pair where the constraint name is the key, followed by the dot-notation field name\n   * Used for returning properly formed errors from unique fields\n   */\n  fieldConstraints: Record<string, Record<string, string>>\n  idType: Args['idType']\n  initializing: Promise<void>\n  localesSuffix?: string\n  logger: DrizzleConfig['logger']\n  pgSchema?: { table: PgTableFn } | PgSchema\n  pool: Pool\n  poolOptions: Args['pool']\n  push: boolean\n  rejectInitializing: () => void\n  relations: Record<string, GenericRelation>\n  relationshipsSuffix?: string\n  resolveInitializing: () => void\n  schema: Record<string, GenericEnum | GenericRelation | GenericTable>\n  schemaName?: Args['schemaName']\n  sessions: {\n    [id: string]: {\n      db: DrizzleTransaction\n      reject: () => Promise<void>\n      resolve: () => Promise<void>\n    }\n  }\n  tableNameMap: Map<string, string>\n  tables: Record<string, GenericTable | PgTableWithColumns<any>>\n  versionsSuffix?: string\n}\n\nexport type IDType = 'integer' | 'numeric' | 'uuid' | 'varchar'\n\nexport type PostgresAdapterResult = (args: { payload: Payload }) => PostgresAdapter\n\nexport type MigrateUpArgs = { payload: Payload; req?: Partial<PayloadRequestWithData> }\nexport type MigrateDownArgs = { payload: Payload; req?: Partial<PayloadRequestWithData> }\n\ndeclare module 'payload' {\n  export interface DatabaseAdapter\n    extends Omit<Args, 'migrationDir' | 'pool'>,\n      BaseDatabaseAdapter {\n    drizzle: DrizzleDB\n    enums: Record<string, GenericEnum>\n    fieldConstraints: Record<string, Record<string, string>>\n    localeSuffix?: string\n    pool: Pool\n    push: boolean\n    relations: Record<string, GenericRelation>\n    relationshipsSuffix?: string\n    schema: Record<string, GenericEnum | GenericRelation | GenericTable>\n    sessions: {\n      [id: string]: {\n        db: DrizzleTransaction\n        reject: () => Promise<void>\n        resolve: () => Promise<void>\n      }\n    }\n    tables: Record<string, GenericTable>\n    versionsSuffix?: string\n  }\n}\n"],"names":[],"mappings":"AAmGA,WAAyF"}