{"version":3,"sources":["../../../src/bin/loader/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/unbound-method */\nimport { getTsconfig } from 'get-tsconfig'\nimport ts from 'typescript'\nimport { fileURLToPath, pathToFileURL } from 'url'\n\nimport { CLIENT_EXTENSIONS } from './clientExtensions.js'\nimport { compile } from './compile.js'\nimport { specifiersToIgnore } from './ignores.js'\nimport { resolveOriginalPath } from './resolveOriginalPath.js'\n\ninterface ResolveContext {\n  conditions: string[]\n  parentURL: string | undefined\n}\ninterface ResolveResult {\n  format?: string\n  shortCircuit?: boolean\n  url: string\n}\ntype ResolveArgs = [\n  specifier: string,\n  context?: ResolveContext,\n  nextResolve?: (...args: ResolveArgs) => Promise<ResolveResult>,\n]\ntype ResolveFn = (...args: Required<ResolveArgs>) => Promise<ResolveResult>\n\nconst locatedConfig = getTsconfig()\nconst tsconfig = locatedConfig.config.compilerOptions as unknown as ts.CompilerOptions\n\n// Ensure baseUrl is set in order to support paths\nif (!tsconfig.baseUrl) {\n  tsconfig.baseUrl = '.'\n}\n\n// Don't resolve d.ts files, because we aren't type-checking\ntsconfig.noDtsResolution = true\ntsconfig.module = ts.ModuleKind.ESNext\ntsconfig.moduleResolution = ts.ModuleResolutionKind.NodeNext\n\nconst moduleResolutionCache = ts.createModuleResolutionCache(\n  ts.sys.getCurrentDirectory(),\n  (x) => x,\n  tsconfig,\n)\nconst host: ts.ModuleResolutionHost = {\n  fileExists: ts.sys.fileExists,\n  readFile: ts.sys.readFile,\n}\nconst TS_EXTENSIONS: string[] = [\n  ts.Extension.Ts,\n  ts.Extension.Tsx,\n  ts.Extension.Dts,\n  ts.Extension.Mts,\n]\n\nexport const resolve: ResolveFn = async (specifier, context, nextResolve) => {\n  const isTS = TS_EXTENSIONS.some((ext) => specifier.endsWith(ext))\n  const isClient = CLIENT_EXTENSIONS.some((ext) => specifier.endsWith(ext))\n  const shouldIgnore = specifiersToIgnore.includes(specifier)\n\n  // If it's a client file, or a file to be ignored is resolved,\n  // we'll set `format: 'ignore'`\n  // and short circuit, so the load step\n  // will return source code of empty object\n  if (isClient || shouldIgnore) {\n    return {\n      format: 'ignore',\n      shortCircuit: true,\n      // No need to resolve the URL using nextResolve. We ignore client files anyway.\n      // Additionally, nextResolve throws an error if the URL is a TS path, so we'd have to use TypeScript's resolveModuleName to resolve the URL, which is unnecessary\n      url: 'file:///',\n    }\n  }\n\n  // entrypoint\n  if (!context.parentURL) {\n    return {\n      format: isTS ? 'ts' : undefined,\n      shortCircuit: true,\n      url: specifier,\n    }\n  }\n\n  // Try and resolve normally\n  // This could fail, so we need to swallow that error\n  // and keep going\n  let nextResult: ResolveResult\n\n  if (!isTS) {\n    try {\n      nextResult = await nextResolve(specifier, context, nextResolve)\n    } catch (_) {\n      // swallow error\n    }\n  }\n\n  if (nextResult) {\n    const nextResultIsTS = TS_EXTENSIONS.some((ext) => nextResult.url.endsWith(ext))\n\n    return {\n      ...nextResult,\n      format: nextResultIsTS ? 'ts' : nextResult.format,\n      shortCircuit: true,\n    }\n  }\n\n  const { resolvedModule } = ts.resolveModuleName(\n    specifier,\n    fileURLToPath(context.parentURL),\n    tsconfig,\n    host,\n    moduleResolutionCache,\n  )\n\n  if (resolvedModule) {\n    const resolvedIsTS = TS_EXTENSIONS.includes(resolvedModule.extension)\n    const resolvedPath = await resolveOriginalPath(resolvedModule.resolvedFileName)\n\n    return {\n      format: resolvedIsTS ? 'ts' : undefined,\n      shortCircuit: true,\n      url: pathToFileURL(resolvedPath ?? resolvedModule.resolvedFileName).href, // The typescript module resolver does not resolve to the original path, but to the symlinked path, if present. This can cause issues\n    }\n  }\n\n  // import from local project to either:\n  // - something TS couldn't resolve\n  // - local project non-TS file\n  return nextResolve(specifier, context, nextResolve)\n}\n\ninterface LoadContext {\n  conditions: string[]\n  format: null | string | undefined\n}\ninterface LoadResult {\n  format: string\n  shortCircuit?: boolean\n  source: ArrayBuffer | SharedArrayBuffer | Uint8Array | string\n}\ntype LoadArgs = [\n  url: string,\n  context: LoadContext,\n  nextLoad?: (...args: LoadArgs) => Promise<LoadResult>,\n]\ntype LoadFn = (...args: Required<LoadArgs>) => Promise<LoadResult>\n\nconst swcOptions = {\n  ...tsconfig,\n  baseUrl: undefined,\n  paths: undefined,\n}\nexport const load: LoadFn = async (url, context, nextLoad) => {\n  if (context.format === 'ignore') {\n    const rawSource = 'export default {}'\n\n    return {\n      format: 'module',\n      shortCircuit: true,\n      source: rawSource,\n    }\n  }\n\n  if (context.format === 'ts') {\n    const { source } = await nextLoad(url, context)\n    const code = typeof source === 'string' ? source : Buffer.from(source).toString()\n    const compiled = await compile(code, fileURLToPath(url), swcOptions)\n    return {\n      format: 'module',\n      shortCircuit: true,\n      source: compiled,\n    }\n  } else {\n    return nextLoad(url, context)\n  }\n}\n"],"names":["getTsconfig","ts","fileURLToPath","pathToFileURL","CLIENT_EXTENSIONS","compile","specifiersToIgnore","resolveOriginalPath","locatedConfig","tsconfig","config","compilerOptions","baseUrl","noDtsResolution","module","ModuleKind","ESNext","moduleResolution","ModuleResolutionKind","NodeNext","moduleResolutionCache","createModuleResolutionCache","sys","getCurrentDirectory","x","host","fileExists","readFile","TS_EXTENSIONS","Extension","Ts","Tsx","Dts","Mts","resolve","specifier","context","nextResolve","isTS","some","ext","endsWith","isClient","shouldIgnore","includes","format","shortCircuit","url","parentURL","undefined","nextResult","_","nextResultIsTS","resolvedModule","resolveModuleName","resolvedIsTS","extension","resolvedPath","resolvedFileName","href","swcOptions","paths","load","nextLoad","rawSource","source","code","Buffer","from","toString","compiled"],"mappings":"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"}