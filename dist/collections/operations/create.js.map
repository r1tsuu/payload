{"version":3,"sources":["../../../src/collections/operations/create.ts"],"sourcesContent":["import crypto from 'crypto'\n\nimport type { CollectionSlug, GeneratedTypes } from '../../index.js'\nimport type { Document, PayloadRequestWithData } from '../../types/index.js'\nimport type {\n  AfterChangeHook,\n  BeforeOperationHook,\n  BeforeValidateHook,\n  Collection,\n  DataFromCollectionSlug,\n  RequiredDataFromCollectionSlug,\n} from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { sendVerificationEmail } from '../../auth/sendVerificationEmail.js'\nimport { registerLocalStrategy } from '../../auth/strategies/local/register.js'\nimport { afterChange } from '../../fields/hooks/afterChange/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { beforeChange } from '../../fields/hooks/beforeChange/index.js'\nimport { beforeValidate } from '../../fields/hooks/beforeValidate/index.js'\nimport { generateFileData } from '../../uploads/generateFileData.js'\nimport { unlinkTempFiles } from '../../uploads/unlinkTempFiles.js'\nimport { uploadFiles } from '../../uploads/uploadFiles.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport sanitizeInternalFields from '../../utilities/sanitizeInternalFields.js'\nimport { saveVersion } from '../../versions/saveVersion.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments<TSlug extends CollectionSlug> = {\n  autosave?: boolean\n  collection: Collection\n  data: RequiredDataFromCollectionSlug<TSlug>\n  depth?: number\n  disableVerificationEmail?: boolean\n  draft?: boolean\n  overrideAccess?: boolean\n  overwriteExistingFiles?: boolean\n  req: PayloadRequestWithData\n  showHiddenFields?: boolean\n}\n\nexport const createOperation = async <TSlug extends CollectionSlug>(\n  incomingArgs: Arguments<TSlug>,\n): Promise<DataFromCollectionSlug<TSlug>> => {\n  let args = incomingArgs\n\n  try {\n    const shouldCommit = await initTransaction(args.req)\n\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    await args.collection.config.hooks.beforeOperation.reduce(\n      async (priorHook: BeforeOperationHook | Promise<void>, hook: BeforeOperationHook) => {\n        await priorHook\n\n        args =\n          (await hook({\n            args,\n            collection: args.collection.config,\n            context: args.req.context,\n            operation: 'create',\n            req: args.req,\n          })) || args\n      },\n      Promise.resolve(),\n    )\n\n    const {\n      autosave = false,\n      collection: { config: collectionConfig },\n      collection,\n      depth,\n      disableVerificationEmail,\n      draft = false,\n      overrideAccess,\n      overwriteExistingFiles = false,\n      req: {\n        fallbackLocale,\n        locale,\n        payload,\n        payload: { config, email },\n      },\n      req,\n      showHiddenFields,\n    } = args\n\n    let { data } = args\n\n    const shouldSaveDraft = Boolean(draft && collectionConfig.versions.drafts)\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    if (!overrideAccess) {\n      await executeAccess({ data, req }, collectionConfig.access.create)\n    }\n\n    // /////////////////////////////////////\n    // Custom id\n    // /////////////////////////////////////\n\n    if (payload.collections[collectionConfig.slug].customIDType) {\n      data = {\n        _id: data.id,\n        ...data,\n      }\n    }\n\n    // /////////////////////////////////////\n    // Generate data for all files and sizes\n    // /////////////////////////////////////\n\n    const { data: newFileData, files: filesToUpload } = await generateFileData({\n      collection,\n      config,\n      data,\n      operation: 'create',\n      overwriteExistingFiles,\n      req,\n      throwOnMissingFile:\n        !shouldSaveDraft && collection.config.upload.filesRequiredOnCreate !== false,\n    })\n\n    data = newFileData\n\n    // /////////////////////////////////////\n    // beforeValidate - Fields\n    // /////////////////////////////////////\n\n    data = await beforeValidate({\n      collection: collectionConfig,\n      context: req.context,\n      data,\n      doc: {},\n      global: null,\n      operation: 'create',\n      overrideAccess,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // beforeValidate - Collections\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.beforeValidate.reduce(\n      async (priorHook: BeforeValidateHook | Promise<void>, hook: BeforeValidateHook) => {\n        await priorHook\n\n        data =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            data,\n            operation: 'create',\n            req,\n          })) || data\n      },\n      Promise.resolve(),\n    )\n\n    // /////////////////////////////////////\n    // beforeChange - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.beforeChange.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      data =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          data,\n          operation: 'create',\n          req,\n        })) || data\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // beforeChange - Fields\n    // /////////////////////////////////////\n\n    const resultWithLocales = await beforeChange<Record<string, unknown>>({\n      collection: collectionConfig,\n      context: req.context,\n      data,\n      doc: {},\n      docWithLocales: {},\n      global: null,\n      operation: 'create',\n      req,\n      skipValidation:\n        shouldSaveDraft &&\n        collectionConfig.versions.drafts &&\n        !collectionConfig.versions.drafts.validate,\n    })\n\n    // /////////////////////////////////////\n    // Write files to local storage\n    // /////////////////////////////////////\n\n    if (!collectionConfig.upload.disableLocalStorage) {\n      await uploadFiles(payload, filesToUpload, req)\n    }\n\n    // /////////////////////////////////////\n    // Create\n    // /////////////////////////////////////\n\n    let doc\n\n    if (collectionConfig.auth && !collectionConfig.auth.disableLocalStrategy) {\n      if (data.email) {\n        resultWithLocales.email = (data.email as string).toLowerCase()\n      }\n\n      if (collectionConfig.auth.verify) {\n        resultWithLocales._verified = Boolean(resultWithLocales._verified) || false\n        resultWithLocales._verificationToken = crypto.randomBytes(20).toString('hex')\n      }\n\n      doc = await registerLocalStrategy({\n        collection: collectionConfig,\n        doc: resultWithLocales,\n        password: data.password as string,\n        payload: req.payload,\n        req,\n      })\n    } else {\n      doc = await payload.db.create({\n        collection: collectionConfig.slug,\n        data: resultWithLocales,\n        req,\n      })\n    }\n\n    const verificationToken = doc._verificationToken\n    let result: Document = sanitizeInternalFields(doc)\n\n    // /////////////////////////////////////\n    // Create version\n    // /////////////////////////////////////\n\n    if (collectionConfig.versions) {\n      await saveVersion({\n        id: result.id,\n        autosave,\n        collection: collectionConfig,\n        docWithLocales: result,\n        payload,\n        req,\n      })\n    }\n\n    // /////////////////////////////////////\n    // Send verification email if applicable\n    // /////////////////////////////////////\n\n    if (collectionConfig.auth && collectionConfig.auth.verify) {\n      await sendVerificationEmail({\n        collection: { config: collectionConfig },\n        config: payload.config,\n        disableEmail: disableVerificationEmail,\n        email: payload.email,\n        req,\n        token: verificationToken,\n        user: result,\n      })\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      depth,\n      doc: result,\n      draft,\n      fallbackLocale,\n      global: null,\n      locale,\n      overrideAccess,\n      req,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterChange - Fields\n    // /////////////////////////////////////\n\n    result = await afterChange({\n      collection: collectionConfig,\n      context: req.context,\n      data,\n      doc: result,\n      global: null,\n      operation: 'create',\n      previousDoc: {},\n      req,\n    })\n\n    // /////////////////////////////////////\n    // afterChange - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterChange.reduce(\n      async (priorHook: AfterChangeHook | Promise<void>, hook: AfterChangeHook) => {\n        await priorHook\n\n        result =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            doc: result,\n            operation: 'create',\n            previousDoc: {},\n            req: args.req,\n          })) || result\n      },\n      Promise.resolve(),\n    )\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation<TSlug>({\n      args,\n      collection: collectionConfig,\n      operation: 'create',\n      result,\n    })\n\n    await unlinkTempFiles({ collectionConfig, config, req })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    if (shouldCommit) await commitTransaction(req)\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["crypto","executeAccess","sendVerificationEmail","registerLocalStrategy","afterChange","afterRead","beforeChange","beforeValidate","generateFileData","unlinkTempFiles","uploadFiles","commitTransaction","initTransaction","killTransaction","sanitizeInternalFields","saveVersion","buildAfterOperation","createOperation","incomingArgs","args","shouldCommit","req","collection","config","hooks","beforeOperation","reduce","priorHook","hook","context","operation","Promise","resolve","autosave","collectionConfig","depth","disableVerificationEmail","draft","overrideAccess","overwriteExistingFiles","fallbackLocale","locale","payload","email","showHiddenFields","data","shouldSaveDraft","Boolean","versions","drafts","access","create","collections","slug","customIDType","_id","id","newFileData","files","filesToUpload","throwOnMissingFile","upload","filesRequiredOnCreate","doc","global","resultWithLocales","docWithLocales","skipValidation","validate","disableLocalStorage","auth","disableLocalStrategy","toLowerCase","verify","_verified","_verificationToken","randomBytes","toString","password","db","verificationToken","result","disableEmail","token","user","previousDoc","error"],"mappings":"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"}