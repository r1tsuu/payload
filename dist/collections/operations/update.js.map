{"version":3,"sources":["../../../src/collections/operations/update.ts"],"sourcesContent":["import type { DeepPartial } from 'ts-essentials'\n\nimport httpStatus from 'http-status'\n\nimport type { AccessResult } from '../../config/types.js'\nimport type { CollectionSlug } from '../../index.js'\nimport type { PayloadRequestWithData, Where } from '../../types/index.js'\nimport type {\n  BulkOperationResult,\n  Collection,\n  DataFromCollectionSlug,\n  RequiredDataFromCollectionSlug,\n} from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { APIError } from '../../errors/index.js'\nimport { afterChange } from '../../fields/hooks/afterChange/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { beforeChange } from '../../fields/hooks/beforeChange/index.js'\nimport { beforeValidate } from '../../fields/hooks/beforeValidate/index.js'\nimport { deleteAssociatedFiles } from '../../uploads/deleteAssociatedFiles.js'\nimport { generateFileData } from '../../uploads/generateFileData.js'\nimport { unlinkTempFiles } from '../../uploads/unlinkTempFiles.js'\nimport { uploadFiles } from '../../uploads/uploadFiles.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { buildVersionCollectionFields } from '../../versions/buildCollectionFields.js'\nimport { appendVersionToQueryKey } from '../../versions/drafts/appendVersionToQueryKey.js'\nimport { saveVersion } from '../../versions/saveVersion.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments<TSlug extends CollectionSlug> = {\n  collection: Collection\n  data: DeepPartial<RequiredDataFromCollectionSlug<TSlug>>\n  depth?: number\n  disableVerificationEmail?: boolean\n  draft?: boolean\n  overrideAccess?: boolean\n  overwriteExistingFiles?: boolean\n  req: PayloadRequestWithData\n  showHiddenFields?: boolean\n  where: Where\n}\n\nexport const updateOperation = async <TSlug extends CollectionSlug>(\n  incomingArgs: Arguments<TSlug>,\n): Promise<BulkOperationResult<TSlug>> => {\n  let args = incomingArgs\n\n  try {\n    const shouldCommit = await initTransaction(args.req)\n\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      args =\n        (await hook({\n          args,\n          collection: args.collection.config,\n          context: args.req.context,\n          operation: 'update',\n          req: args.req,\n        })) || args\n    }, Promise.resolve())\n\n    const {\n      collection: { config: collectionConfig },\n      collection,\n      depth,\n      draft: draftArg = false,\n      overrideAccess,\n      overwriteExistingFiles = false,\n      req: {\n        fallbackLocale,\n        locale,\n        payload: { config },\n        payload,\n      },\n      req,\n      showHiddenFields,\n      where,\n    } = args\n\n    if (!where) {\n      throw new APIError(\"Missing 'where' query of documents to update.\", httpStatus.BAD_REQUEST)\n    }\n\n    const { data: bulkUpdateData } = args\n    const shouldSaveDraft = Boolean(draftArg && collectionConfig.versions.drafts)\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    let accessResult: AccessResult\n    if (!overrideAccess) {\n      accessResult = await executeAccess({ req }, collectionConfig.access.update)\n    }\n\n    await validateQueryPaths({\n      collectionConfig,\n      overrideAccess,\n      req,\n      where,\n    })\n\n    // /////////////////////////////////////\n    // Retrieve documents\n    // /////////////////////////////////////\n\n    const fullWhere = combineQueries(where, accessResult)\n\n    let docs\n\n    if (collectionConfig.versions?.drafts && shouldSaveDraft) {\n      const versionsWhere = appendVersionToQueryKey(fullWhere)\n\n      await validateQueryPaths({\n        collectionConfig: collection.config,\n        overrideAccess,\n        req,\n        versionFields: buildVersionCollectionFields(collection.config),\n        where: versionsWhere,\n      })\n\n      const query = await payload.db.queryDrafts<DataFromCollectionSlug<TSlug>>({\n        collection: collectionConfig.slug,\n        locale,\n        pagination: false,\n        req,\n        where: versionsWhere,\n      })\n\n      docs = query.docs\n    } else {\n      const query = await payload.db.find({\n        collection: collectionConfig.slug,\n        limit: 0,\n        locale,\n        pagination: false,\n        req,\n        where: fullWhere,\n      })\n\n      docs = query.docs\n    }\n\n    // /////////////////////////////////////\n    // Generate data for all files and sizes\n    // /////////////////////////////////////\n\n    const { data: newFileData, files: filesToUpload } = await generateFileData({\n      collection,\n      config,\n      data: bulkUpdateData,\n      operation: 'update',\n      overwriteExistingFiles,\n      req,\n      throwOnMissingFile: false,\n    })\n\n    const errors = []\n\n    const promises = docs.map(async (doc) => {\n      const { id } = doc\n      let data = {\n        ...newFileData,\n        ...bulkUpdateData,\n      }\n\n      try {\n        const originalDoc = await afterRead({\n          collection: collectionConfig,\n          context: req.context,\n          depth: 0,\n          doc,\n          draft: draftArg,\n          fallbackLocale,\n          global: null,\n          locale,\n          overrideAccess: true,\n          req,\n          showHiddenFields: true,\n        })\n\n        await deleteAssociatedFiles({\n          collectionConfig,\n          config,\n          doc,\n          files: filesToUpload,\n          overrideDelete: false,\n          req,\n        })\n\n        // /////////////////////////////////////\n        // beforeValidate - Fields\n        // /////////////////////////////////////\n\n        data = await beforeValidate<DeepPartial<DataFromCollectionSlug<TSlug>>>({\n          id,\n          collection: collectionConfig,\n          context: req.context,\n          data,\n          doc: originalDoc,\n          global: null,\n          operation: 'update',\n          overrideAccess,\n          req,\n        })\n\n        // /////////////////////////////////////\n        // beforeValidate - Collection\n        // /////////////////////////////////////\n\n        await collectionConfig.hooks.beforeValidate.reduce(async (priorHook, hook) => {\n          await priorHook\n\n          data =\n            (await hook({\n              collection: collectionConfig,\n              context: req.context,\n              data,\n              operation: 'update',\n              originalDoc,\n              req,\n            })) || data\n        }, Promise.resolve())\n\n        // /////////////////////////////////////\n        // Write files to local storage\n        // /////////////////////////////////////\n\n        if (!collectionConfig.upload.disableLocalStorage) {\n          await uploadFiles(payload, filesToUpload, req)\n        }\n\n        // /////////////////////////////////////\n        // beforeChange - Collection\n        // /////////////////////////////////////\n\n        await collectionConfig.hooks.beforeChange.reduce(async (priorHook, hook) => {\n          await priorHook\n\n          data =\n            (await hook({\n              collection: collectionConfig,\n              context: req.context,\n              data,\n              operation: 'update',\n              originalDoc,\n              req,\n            })) || data\n        }, Promise.resolve())\n\n        // /////////////////////////////////////\n        // beforeChange - Fields\n        // /////////////////////////////////////\n\n        let result = await beforeChange<DataFromCollectionSlug<TSlug>>({\n          id,\n          collection: collectionConfig,\n          context: req.context,\n          data,\n          doc: originalDoc,\n          docWithLocales: doc,\n          global: null,\n          operation: 'update',\n          req,\n          skipValidation:\n            shouldSaveDraft &&\n            collectionConfig.versions.drafts &&\n            !collectionConfig.versions.drafts.validate &&\n            data._status !== 'published',\n        })\n\n        // /////////////////////////////////////\n        // Update\n        // /////////////////////////////////////\n\n        if (!shouldSaveDraft || data._status === 'published') {\n          result = await req.payload.db.updateOne({\n            id,\n            collection: collectionConfig.slug,\n            data: result,\n            locale,\n            req,\n          })\n        }\n\n        // /////////////////////////////////////\n        // Create version\n        // /////////////////////////////////////\n\n        if (collectionConfig.versions) {\n          result = await saveVersion({\n            id,\n            collection: collectionConfig,\n            docWithLocales: {\n              ...result,\n              createdAt: doc.createdAt,\n            },\n            payload,\n            req,\n          })\n        }\n\n        // /////////////////////////////////////\n        // afterRead - Fields\n        // /////////////////////////////////////\n\n        result = await afterRead({\n          collection: collectionConfig,\n          context: req.context,\n          depth,\n          doc: result,\n          draft: draftArg,\n          fallbackLocale: null,\n          global: null,\n          locale,\n          overrideAccess,\n          req,\n          showHiddenFields,\n        })\n\n        // /////////////////////////////////////\n        // afterRead - Collection\n        // /////////////////////////////////////\n\n        await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n          await priorHook\n\n          result =\n            (await hook({\n              collection: collectionConfig,\n              context: req.context,\n              doc: result,\n              req,\n            })) || result\n        }, Promise.resolve())\n\n        // /////////////////////////////////////\n        // afterChange - Fields\n        // /////////////////////////////////////\n\n        result = await afterChange<DataFromCollectionSlug<TSlug>>({\n          collection: collectionConfig,\n          context: req.context,\n          data,\n          doc: result,\n          global: null,\n          operation: 'update',\n          previousDoc: originalDoc,\n          req,\n        })\n\n        // /////////////////////////////////////\n        // afterChange - Collection\n        // /////////////////////////////////////\n\n        await collectionConfig.hooks.afterChange.reduce(async (priorHook, hook) => {\n          await priorHook\n\n          result =\n            (await hook({\n              collection: collectionConfig,\n              context: req.context,\n              doc: result,\n              operation: 'update',\n              previousDoc: originalDoc,\n              req,\n            })) || result\n        }, Promise.resolve())\n\n        await unlinkTempFiles({\n          collectionConfig,\n          config,\n          req,\n        })\n\n        // /////////////////////////////////////\n        // Return results\n        // /////////////////////////////////////\n\n        return result\n      } catch (error) {\n        errors.push({\n          id,\n          message: error.message,\n        })\n      }\n      return null\n    })\n\n    const awaitedDocs = await Promise.all(promises)\n\n    let result = {\n      docs: awaitedDocs.filter(Boolean),\n      errors,\n    }\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'update',\n      result,\n    })\n\n    if (shouldCommit) await commitTransaction(req)\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["httpStatus","executeAccess","combineQueries","validateQueryPaths","APIError","afterChange","afterRead","beforeChange","beforeValidate","deleteAssociatedFiles","generateFileData","unlinkTempFiles","uploadFiles","commitTransaction","initTransaction","killTransaction","buildVersionCollectionFields","appendVersionToQueryKey","saveVersion","buildAfterOperation","updateOperation","incomingArgs","args","shouldCommit","req","collection","config","hooks","beforeOperation","reduce","priorHook","hook","context","operation","Promise","resolve","collectionConfig","depth","draft","draftArg","overrideAccess","overwriteExistingFiles","fallbackLocale","locale","payload","showHiddenFields","where","BAD_REQUEST","data","bulkUpdateData","shouldSaveDraft","Boolean","versions","drafts","accessResult","access","update","fullWhere","docs","versionsWhere","versionFields","query","db","queryDrafts","slug","pagination","find","limit","newFileData","files","filesToUpload","throwOnMissingFile","errors","promises","map","doc","id","originalDoc","global","overrideDelete","upload","disableLocalStorage","result","docWithLocales","skipValidation","validate","_status","updateOne","createdAt","previousDoc","error","push","message","awaitedDocs","all","filter"],"mappings":"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"}