{"version":3,"sources":["../../../../src/collections/operations/local/duplicate.ts"],"sourcesContent":["import type { CollectionSlug, TypedLocale } from '../../..//index.js'\nimport type { Payload } from '../../../index.js'\nimport type { Document, PayloadRequestWithData, RequestContext } from '../../../types/index.js'\nimport type { DataFromCollectionSlug } from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { duplicateOperation } from '../duplicate.js'\n\nexport type Options<TSlug extends CollectionSlug> = {\n  collection: TSlug\n  /**\n   * context, which will then be passed to req.context, which can be read by hooks\n   */\n  context?: RequestContext\n  depth?: number\n  draft?: boolean\n  fallbackLocale?: TypedLocale\n  id: number | string\n  locale?: TypedLocale\n  overrideAccess?: boolean\n  req?: PayloadRequestWithData\n  showHiddenFields?: boolean\n  user?: Document\n}\n\nexport async function duplicate<TSlug extends CollectionSlug>(\n  payload: Payload,\n  options: Options<TSlug>,\n): Promise<DataFromCollectionSlug<TSlug>> {\n  const {\n    id,\n    collection: collectionSlug,\n    depth,\n    draft,\n    overrideAccess = true,\n    showHiddenFields,\n  } = options\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(collectionSlug)} can't be found. Duplicate Operation.`,\n    )\n  }\n\n  if (collection.config.disableDuplicate === false) {\n    throw new APIError(\n      `The collection with slug ${String(collectionSlug)} cannot be duplicated.`,\n      400,\n    )\n  }\n\n  const req = await createLocalReq(options, payload)\n\n  return duplicateOperation<TSlug>({\n    id,\n    collection,\n    depth,\n    draft,\n    overrideAccess,\n    req,\n    showHiddenFields,\n  })\n}\n"],"names":["APIError","createLocalReq","duplicateOperation","duplicate","payload","options","id","collection","collectionSlug","depth","draft","overrideAccess","showHiddenFields","collections","String","config","disableDuplicate","req"],"mappings":"AAKA,SAASA,QAAQ,QAAQ,2BAA0B;AACnD,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,kBAAkB,QAAQ,kBAAiB;AAmBpD,OAAO,eAAeC,UACpBC,OAAgB,EAChBC,OAAuB;IAEvB,MAAM,EACJC,EAAE,EACFC,YAAYC,cAAc,EAC1BC,KAAK,EACLC,KAAK,EACLC,iBAAiB,IAAI,EACrBC,gBAAgB,EACjB,GAAGP;IACJ,MAAME,aAAaH,QAAQS,WAAW,CAACL,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,IAAIP,SACR,CAAC,yBAAyB,EAAEc,OAAON,gBAAgB,qCAAqC,CAAC;IAE7F;IAEA,IAAID,WAAWQ,MAAM,CAACC,gBAAgB,KAAK,OAAO;QAChD,MAAM,IAAIhB,SACR,CAAC,yBAAyB,EAAEc,OAAON,gBAAgB,sBAAsB,CAAC,EAC1E;IAEJ;IAEA,MAAMS,MAAM,MAAMhB,eAAeI,SAASD;IAE1C,OAAOF,mBAA0B;QAC/BI;QACAC;QACAE;QACAC;QACAC;QACAM;QACAL;IACF;AACF"}