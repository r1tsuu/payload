{"version":3,"sources":["../../../../src/collections/operations/local/delete.ts"],"sourcesContent":["import type { CollectionSlug, Payload, TypedLocale } from '../../../index.js'\nimport type {\n  Document,\n  PayloadRequestWithData,\n  RequestContext,\n  Where,\n} from '../../../types/index.js'\nimport type { BulkOperationResult, DataFromCollectionSlug } from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { deleteOperation } from '../delete.js'\nimport { deleteByIDOperation } from '../deleteByID.js'\n\nexport type BaseOptions<TSlug extends CollectionSlug> = {\n  collection: TSlug\n  /**\n   * context, which will then be passed to req.context, which can be read by hooks\n   */\n  context?: RequestContext\n  depth?: number\n  fallbackLocale?: TypedLocale\n  locale?: TypedLocale\n  overrideAccess?: boolean\n  req?: PayloadRequestWithData\n  showHiddenFields?: boolean\n  user?: Document\n}\n\nexport type ByIDOptions<TSlug extends CollectionSlug> = BaseOptions<TSlug> & {\n  id: number | string\n  where?: never\n}\n\nexport type ManyOptions<TSlug extends CollectionSlug> = BaseOptions<TSlug> & {\n  id?: never\n  where: Where\n}\n\nexport type Options<TSlug extends CollectionSlug> = ByIDOptions<TSlug> | ManyOptions<TSlug>\n\nasync function deleteLocal<TSlug extends CollectionSlug>(\n  payload: Payload,\n  options: ByIDOptions<TSlug>,\n): Promise<DataFromCollectionSlug<TSlug>>\nasync function deleteLocal<TSlug extends CollectionSlug>(\n  payload: Payload,\n  options: ManyOptions<TSlug>,\n): Promise<BulkOperationResult<TSlug>>\nasync function deleteLocal<TSlug extends CollectionSlug>(\n  payload: Payload,\n  options: Options<TSlug>,\n): Promise<BulkOperationResult<TSlug> | DataFromCollectionSlug<TSlug>>\nasync function deleteLocal<TSlug extends CollectionSlug>(\n  payload: Payload,\n  options: Options<TSlug>,\n): Promise<BulkOperationResult<TSlug> | DataFromCollectionSlug<TSlug>> {\n  const {\n    id,\n    collection: collectionSlug,\n    depth,\n    overrideAccess = true,\n    showHiddenFields,\n    where,\n  } = options\n\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(collectionSlug)} can't be found. Delete Operation.`,\n    )\n  }\n\n  const args = {\n    id,\n    collection,\n    depth,\n    overrideAccess,\n    req: await createLocalReq(options, payload),\n    showHiddenFields,\n    where,\n  }\n\n  if (options.id) {\n    return deleteByIDOperation<TSlug>(args)\n  }\n  return deleteOperation<TSlug>(args)\n}\n\nexport default deleteLocal\n"],"names":["APIError","createLocalReq","deleteOperation","deleteByIDOperation","deleteLocal","payload","options","id","collection","collectionSlug","depth","overrideAccess","showHiddenFields","where","collections","String","args","req"],"mappings":"AASA,SAASA,QAAQ,QAAQ,2BAA0B;AACnD,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,eAAe,QAAQ,eAAc;AAC9C,SAASC,mBAAmB,QAAQ,mBAAkB;AAyCtD,eAAeC,YACbC,OAAgB,EAChBC,OAAuB;IAEvB,MAAM,EACJC,EAAE,EACFC,YAAYC,cAAc,EAC1BC,KAAK,EACLC,iBAAiB,IAAI,EACrBC,gBAAgB,EAChBC,KAAK,EACN,GAAGP;IAEJ,MAAME,aAAaH,QAAQS,WAAW,CAACL,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,IAAIR,SACR,CAAC,yBAAyB,EAAEe,OAAON,gBAAgB,kCAAkC,CAAC;IAE1F;IAEA,MAAMO,OAAO;QACXT;QACAC;QACAE;QACAC;QACAM,KAAK,MAAMhB,eAAeK,SAASD;QACnCO;QACAC;IACF;IAEA,IAAIP,QAAQC,EAAE,EAAE;QACd,OAAOJ,oBAA2Ba;IACpC;IACA,OAAOd,gBAAuBc;AAChC;AAEA,eAAeZ,YAAW"}