{"version":3,"sources":["../../../src/collections/operations/findVersions.ts"],"sourcesContent":["import type { PaginatedDocs } from '../../database/types.js'\nimport type { PayloadRequestWithData, Where } from '../../types/index.js'\nimport type { TypeWithVersion } from '../../versions/types.js'\nimport type { Collection } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport sanitizeInternalFields from '../../utilities/sanitizeInternalFields.js'\nimport { buildVersionCollectionFields } from '../../versions/buildCollectionFields.js'\n\nexport type Arguments = {\n  collection: Collection\n  depth?: number\n  limit?: number\n  overrideAccess?: boolean\n  page?: number\n  pagination?: boolean\n  req?: PayloadRequestWithData\n  showHiddenFields?: boolean\n  sort?: string\n  where?: Where\n}\n\nexport const findVersionsOperation = async <TData extends TypeWithVersion<TData>>(\n  args: Arguments,\n): Promise<PaginatedDocs<TData>> => {\n  const {\n    collection: { config: collectionConfig },\n    depth,\n    limit,\n    overrideAccess,\n    page,\n    pagination = true,\n    req: { fallbackLocale, locale, payload },\n    req,\n    showHiddenFields,\n    sort,\n    where,\n  } = args\n\n  try {\n    const shouldCommit = await initTransaction(req)\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    let accessResults\n\n    if (!overrideAccess) {\n      accessResults = await executeAccess({ req }, collectionConfig.access.readVersions)\n    }\n\n    const versionFields = buildVersionCollectionFields(collectionConfig)\n\n    await validateQueryPaths({\n      collectionConfig,\n      overrideAccess,\n      req,\n      versionFields,\n      where,\n    })\n\n    const fullWhere = combineQueries(where, accessResults)\n\n    // /////////////////////////////////////\n    // Find\n    // /////////////////////////////////////\n\n    const paginatedDocs = await payload.db.findVersions<TData>({\n      collection: collectionConfig.slug,\n      limit: limit ?? 10,\n      locale,\n      page: page || 1,\n      pagination,\n      req,\n      sort,\n      where: fullWhere,\n    })\n\n    // /////////////////////////////////////\n    // beforeRead - Collection\n    // /////////////////////////////////////\n\n    let result = {\n      ...paginatedDocs,\n      docs: await Promise.all(\n        paginatedDocs.docs.map(async (doc) => {\n          const docRef = doc\n          await collectionConfig.hooks.beforeRead.reduce(async (priorHook, hook) => {\n            await priorHook\n\n            docRef.version =\n              (await hook({\n                collection: collectionConfig,\n                context: req.context,\n                doc: docRef.version,\n                query: fullWhere,\n                req,\n              })) || docRef.version\n          }, Promise.resolve())\n\n          return docRef\n        }),\n      ),\n    } as PaginatedDocs<TData>\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = {\n      ...result,\n      docs: await Promise.all(\n        result.docs.map(async (data) => ({\n          ...data,\n          version: await afterRead({\n            collection: collectionConfig,\n            context: req.context,\n            depth,\n            doc: data.version,\n            draft: undefined,\n            fallbackLocale,\n            findMany: true,\n            global: null,\n            locale,\n            overrideAccess,\n            req,\n            showHiddenFields,\n          }),\n        })),\n      ),\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    result = {\n      ...result,\n      docs: await Promise.all(\n        result.docs.map(async (doc) => {\n          const docRef = doc\n\n          await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n            await priorHook\n\n            docRef.version =\n              (await hook({\n                collection: collectionConfig,\n                context: req.context,\n                doc: doc.version,\n                findMany: true,\n                query: fullWhere,\n                req,\n              })) || doc.version\n          }, Promise.resolve())\n\n          return docRef\n        }),\n      ),\n    }\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    result = {\n      ...result,\n      docs: result.docs.map((doc) => sanitizeInternalFields<TData>(doc)),\n    }\n\n    if (shouldCommit) await commitTransaction(req)\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","validateQueryPaths","afterRead","commitTransaction","initTransaction","killTransaction","sanitizeInternalFields","buildVersionCollectionFields","findVersionsOperation","args","collection","config","collectionConfig","depth","limit","overrideAccess","page","pagination","req","fallbackLocale","locale","payload","showHiddenFields","sort","where","shouldCommit","accessResults","access","readVersions","versionFields","fullWhere","paginatedDocs","db","findVersions","slug","result","docs","Promise","all","map","doc","docRef","hooks","beforeRead","reduce","priorHook","hook","version","context","query","resolve","data","draft","undefined","findMany","global","error"],"mappings":"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"}