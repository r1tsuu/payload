{"version":3,"sources":["../../../src/collections/operations/restoreVersion.ts"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport httpStatus from 'http-status'\n\nimport type { FindOneArgs } from '../../database/types.js'\nimport type { PayloadRequestWithData } from '../../types/index.js'\nimport type { Collection, TypeWithID } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { hasWhereAccessResult } from '../../auth/types.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { APIError, Forbidden, NotFound } from '../../errors/index.js'\nimport { afterChange } from '../../fields/hooks/afterChange/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { getLatestCollectionVersion } from '../../versions/getLatestCollectionVersion.js'\n\nexport type Arguments = {\n  collection: Collection\n  currentDepth?: number\n  depth?: number\n  disableErrors?: boolean\n  id: number | string\n  overrideAccess?: boolean\n  req: PayloadRequestWithData\n  showHiddenFields?: boolean\n}\n\nexport const restoreVersionOperation = async <TData extends TypeWithID = any>(\n  args: Arguments,\n): Promise<TData> => {\n  const {\n    id,\n    collection: { config: collectionConfig },\n    depth,\n    overrideAccess = false,\n    req,\n    req: { fallbackLocale, locale, payload },\n    showHiddenFields,\n  } = args\n\n  try {\n    const shouldCommit = await initTransaction(req)\n\n    if (!id) {\n      throw new APIError('Missing ID of version to restore.', httpStatus.BAD_REQUEST)\n    }\n\n    // /////////////////////////////////////\n    // Retrieve original raw version\n    // /////////////////////////////////////\n\n    const { docs: versionDocs } = await req.payload.db.findVersions({\n      collection: collectionConfig.slug,\n      limit: 1,\n      locale,\n      pagination: false,\n      req,\n      where: { id: { equals: id } },\n    })\n\n    const [rawVersion] = versionDocs\n\n    if (!rawVersion) {\n      throw new NotFound(req.t)\n    }\n\n    const parentDocID = rawVersion.parent\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess({ id: parentDocID, req }, collectionConfig.access.update)\n      : true\n    const hasWherePolicy = hasWhereAccessResult(accessResults)\n\n    // /////////////////////////////////////\n    // Retrieve document\n    // /////////////////////////////////////\n\n    const findOneArgs: FindOneArgs = {\n      collection: collectionConfig.slug,\n      locale,\n      req,\n      where: combineQueries({ id: { equals: parentDocID } }, accessResults),\n    }\n\n    const doc = await req.payload.db.findOne(findOneArgs)\n\n    if (!doc && !hasWherePolicy) throw new NotFound(req.t)\n    if (!doc && hasWherePolicy) throw new Forbidden(req.t)\n\n    // /////////////////////////////////////\n    // fetch previousDoc\n    // /////////////////////////////////////\n\n    const prevDocWithLocales = await getLatestCollectionVersion({\n      id: parentDocID,\n      config: collectionConfig,\n      payload,\n      query: findOneArgs,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // Update\n    // /////////////////////////////////////\n\n    let result = await req.payload.db.updateOne({\n      id: parentDocID,\n      collection: collectionConfig.slug,\n      data: rawVersion.version,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // Save `previousDoc` as a version after restoring\n    // /////////////////////////////////////\n\n    const prevVersion = { ...prevDocWithLocales }\n\n    delete prevVersion.id\n\n    await payload.db.createVersion({\n      autosave: false,\n      collectionSlug: collectionConfig.slug,\n      createdAt: prevVersion.createdAt,\n      parent: parentDocID,\n      req,\n      updatedAt: new Date().toISOString(),\n      versionData: rawVersion.version,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      depth,\n      doc: result,\n      draft: undefined,\n      fallbackLocale,\n      global: null,\n      locale,\n      overrideAccess,\n      req,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterChange - Fields\n    // /////////////////////////////////////\n\n    result = await afterChange({\n      collection: collectionConfig,\n      context: req.context,\n      data: result,\n      doc: result,\n      global: null,\n      operation: 'update',\n      previousDoc: prevDocWithLocales,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // afterChange - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterChange.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result,\n          operation: 'update',\n          previousDoc: prevDocWithLocales,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    if (shouldCommit) await commitTransaction(req)\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["httpStatus","executeAccess","hasWhereAccessResult","combineQueries","APIError","Forbidden","NotFound","afterChange","afterRead","commitTransaction","initTransaction","killTransaction","getLatestCollectionVersion","restoreVersionOperation","args","id","collection","config","collectionConfig","depth","overrideAccess","req","fallbackLocale","locale","payload","showHiddenFields","shouldCommit","BAD_REQUEST","docs","versionDocs","db","findVersions","slug","limit","pagination","where","equals","rawVersion","t","parentDocID","parent","accessResults","access","update","hasWherePolicy","findOneArgs","doc","findOne","prevDocWithLocales","query","result","updateOne","data","version","prevVersion","createVersion","autosave","collectionSlug","createdAt","updatedAt","Date","toISOString","versionData","context","draft","undefined","global","hooks","reduce","priorHook","hook","Promise","resolve","operation","previousDoc","error"],"mappings":"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"}