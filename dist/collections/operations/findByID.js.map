{"version":3,"sources":["../../../src/collections/operations/findByID.ts"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport type { FindOneArgs } from '../../database/types.js'\nimport type { CollectionSlug } from '../../index.js'\nimport type { PayloadRequestWithData } from '../../types/index.js'\nimport type { Collection, DataFromCollectionSlug } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { NotFound } from '../../errors/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport replaceWithDraftIfAvailable from '../../versions/drafts/replaceWithDraftIfAvailable.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments = {\n  collection: Collection\n  currentDepth?: number\n  depth?: number\n  disableErrors?: boolean\n  draft?: boolean\n  id: number | string\n  overrideAccess?: boolean\n  req: PayloadRequestWithData\n  showHiddenFields?: boolean\n}\n\nexport const findByIDOperation = async <TSlug extends CollectionSlug>(\n  incomingArgs: Arguments,\n): Promise<DataFromCollectionSlug<TSlug>> => {\n  let args = incomingArgs\n\n  try {\n    const shouldCommit = await initTransaction(args.req)\n\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      args =\n        (await hook({\n          args,\n          collection: args.collection.config,\n          context: args.req.context,\n          operation: 'read',\n          req: args.req,\n        })) || args\n    }, Promise.resolve())\n\n    const {\n      id,\n      collection: { config: collectionConfig },\n      currentDepth,\n      depth,\n      disableErrors,\n      draft: draftEnabled = false,\n      overrideAccess = false,\n      req: { fallbackLocale, locale, t },\n      req,\n      showHiddenFields,\n    } = args\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResult = !overrideAccess\n      ? await executeAccess({ id, disableErrors, req }, collectionConfig.access.read)\n      : true\n\n    // If errors are disabled, and access returns false, return null\n    if (accessResult === false) return null\n\n    const findOneArgs: FindOneArgs = {\n      collection: collectionConfig.slug,\n      locale,\n      req: {\n        transactionID: req.transactionID,\n      } as PayloadRequestWithData,\n      where: combineQueries({ id: { equals: id } }, accessResult),\n    }\n\n    // /////////////////////////////////////\n    // Find by ID\n    // /////////////////////////////////////\n\n    if (!findOneArgs.where.and[0].id) throw new NotFound(t)\n\n    let result: DataFromCollectionSlug<TSlug> = await req.payload.db.findOne(findOneArgs)\n\n    if (!result) {\n      if (!disableErrors) {\n        throw new NotFound(req.t)\n      }\n\n      return null\n    }\n\n    // /////////////////////////////////////\n    // Replace document with draft if available\n    // /////////////////////////////////////\n\n    if (collectionConfig.versions?.drafts && draftEnabled) {\n      result = await replaceWithDraftIfAvailable({\n        accessResult,\n        doc: result,\n        entity: collectionConfig,\n        entityType: 'collection',\n        overrideAccess,\n        req,\n      })\n    }\n\n    // /////////////////////////////////////\n    // beforeRead - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.beforeRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result,\n          query: findOneArgs.where,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      currentDepth,\n      depth,\n      doc: result,\n      draft: draftEnabled,\n      fallbackLocale,\n      global: null,\n      locale,\n      overrideAccess,\n      req,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result,\n          query: findOneArgs.where,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'findByID',\n      result,\n    })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    if (shouldCommit) await commitTransaction(req)\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","NotFound","afterRead","commitTransaction","initTransaction","killTransaction","replaceWithDraftIfAvailable","buildAfterOperation","findByIDOperation","incomingArgs","args","shouldCommit","req","collection","config","hooks","beforeOperation","reduce","priorHook","hook","context","operation","Promise","resolve","id","collectionConfig","currentDepth","depth","disableErrors","draft","draftEnabled","overrideAccess","fallbackLocale","locale","t","showHiddenFields","accessResult","access","read","findOneArgs","slug","transactionID","where","equals","and","result","payload","db","findOne","versions","drafts","doc","entity","entityType","beforeRead","query","global","error"],"mappings":"AAAA,uCAAuC,GAMvC,OAAOA,mBAAmB,8BAA6B;AACvD,SAASC,cAAc,QAAQ,mCAAkC;AACjE,SAASC,QAAQ,QAAQ,wBAAuB;AAChD,SAASC,SAAS,QAAQ,wCAAuC;AACjE,SAASC,iBAAiB,QAAQ,uCAAsC;AACxE,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,eAAe,QAAQ,qCAAoC;AACpE,OAAOC,iCAAiC,uDAAsD;AAC9F,SAASC,mBAAmB,QAAQ,aAAY;AAchD,OAAO,MAAMC,oBAAoB,OAC/BC;IAEA,IAAIC,OAAOD;IAEX,IAAI;QACF,MAAME,eAAe,MAAMP,gBAAgBM,KAAKE,GAAG;QAEnD,wCAAwC;QACxC,+BAA+B;QAC/B,wCAAwC;QAExC,MAAMF,KAAKG,UAAU,CAACC,MAAM,CAACC,KAAK,CAACC,eAAe,CAACC,MAAM,CAAC,OAAOC,WAAWC;YAC1E,MAAMD;YAENR,OACE,AAAC,MAAMS,KAAK;gBACVT;gBACAG,YAAYH,KAAKG,UAAU,CAACC,MAAM;gBAClCM,SAASV,KAAKE,GAAG,CAACQ,OAAO;gBACzBC,WAAW;gBACXT,KAAKF,KAAKE,GAAG;YACf,MAAOF;QACX,GAAGY,QAAQC,OAAO;QAElB,MAAM,EACJC,EAAE,EACFX,YAAY,EAAEC,QAAQW,gBAAgB,EAAE,EACxCC,YAAY,EACZC,KAAK,EACLC,aAAa,EACbC,OAAOC,eAAe,KAAK,EAC3BC,iBAAiB,KAAK,EACtBnB,KAAK,EAAEoB,cAAc,EAAEC,MAAM,EAAEC,CAAC,EAAE,EAClCtB,GAAG,EACHuB,gBAAgB,EACjB,GAAGzB;QAEJ,wCAAwC;QACxC,SAAS;QACT,wCAAwC;QAExC,MAAM0B,eAAe,CAACL,iBAClB,MAAMhC,cAAc;YAAEyB;YAAII;YAAehB;QAAI,GAAGa,iBAAiBY,MAAM,CAACC,IAAI,IAC5E;QAEJ,gEAAgE;QAChE,IAAIF,iBAAiB,OAAO,OAAO;QAEnC,MAAMG,cAA2B;YAC/B1B,YAAYY,iBAAiBe,IAAI;YACjCP;YACArB,KAAK;gBACH6B,eAAe7B,IAAI6B,aAAa;YAClC;YACAC,OAAO1C,eAAe;gBAAEwB,IAAI;oBAAEmB,QAAQnB;gBAAG;YAAE,GAAGY;QAChD;QAEA,wCAAwC;QACxC,aAAa;QACb,wCAAwC;QAExC,IAAI,CAACG,YAAYG,KAAK,CAACE,GAAG,CAAC,EAAE,CAACpB,EAAE,EAAE,MAAM,IAAIvB,SAASiC;QAErD,IAAIW,SAAwC,MAAMjC,IAAIkC,OAAO,CAACC,EAAE,CAACC,OAAO,CAACT;QAEzE,IAAI,CAACM,QAAQ;YACX,IAAI,CAACjB,eAAe;gBAClB,MAAM,IAAI3B,SAASW,IAAIsB,CAAC;YAC1B;YAEA,OAAO;QACT;QAEA,wCAAwC;QACxC,2CAA2C;QAC3C,wCAAwC;QAExC,IAAIT,iBAAiBwB,QAAQ,EAAEC,UAAUpB,cAAc;YACrDe,SAAS,MAAMvC,4BAA4B;gBACzC8B;gBACAe,KAAKN;gBACLO,QAAQ3B;gBACR4B,YAAY;gBACZtB;gBACAnB;YACF;QACF;QAEA,wCAAwC;QACxC,0BAA0B;QAC1B,wCAAwC;QAExC,MAAMa,iBAAiBV,KAAK,CAACuC,UAAU,CAACrC,MAAM,CAAC,OAAOC,WAAWC;YAC/D,MAAMD;YAEN2B,SACE,AAAC,MAAM1B,KAAK;gBACVN,YAAYY;gBACZL,SAASR,IAAIQ,OAAO;gBACpB+B,KAAKN;gBACLU,OAAOhB,YAAYG,KAAK;gBACxB9B;YACF,MAAOiC;QACX,GAAGvB,QAAQC,OAAO;QAElB,wCAAwC;QACxC,qBAAqB;QACrB,wCAAwC;QAExCsB,SAAS,MAAM3C,UAAU;YACvBW,YAAYY;YACZL,SAASR,IAAIQ,OAAO;YACpBM;YACAC;YACAwB,KAAKN;YACLhB,OAAOC;YACPE;YACAwB,QAAQ;YACRvB;YACAF;YACAnB;YACAuB;QACF;QAEA,wCAAwC;QACxC,yBAAyB;QACzB,wCAAwC;QAExC,MAAMV,iBAAiBV,KAAK,CAACb,SAAS,CAACe,MAAM,CAAC,OAAOC,WAAWC;YAC9D,MAAMD;YAEN2B,SACE,AAAC,MAAM1B,KAAK;gBACVN,YAAYY;gBACZL,SAASR,IAAIQ,OAAO;gBACpB+B,KAAKN;gBACLU,OAAOhB,YAAYG,KAAK;gBACxB9B;YACF,MAAOiC;QACX,GAAGvB,QAAQC,OAAO;QAElB,wCAAwC;QACxC,8BAA8B;QAC9B,wCAAwC;QAExCsB,SAAS,MAAMtC,oBAAoB;YACjCG;YACAG,YAAYY;YACZJ,WAAW;YACXwB;QACF;QAEA,wCAAwC;QACxC,iBAAiB;QACjB,wCAAwC;QAExC,IAAIlC,cAAc,MAAMR,kBAAkBS;QAE1C,OAAOiC;IACT,EAAE,OAAOY,OAAgB;QACvB,MAAMpD,gBAAgBK,KAAKE,GAAG;QAC9B,MAAM6C;IACR;AACF,EAAC"}