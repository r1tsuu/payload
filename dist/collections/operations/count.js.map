{"version":3,"sources":["../../../src/collections/operations/count.ts"],"sourcesContent":["import type { AccessResult } from '../../config/types.js'\nimport type { CollectionSlug } from '../../index.js'\nimport type { PayloadRequestWithData, Where } from '../../types/index.js'\nimport type { Collection, TypeWithID } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments = {\n  collection: Collection\n  disableErrors?: boolean\n  overrideAccess?: boolean\n  req?: PayloadRequestWithData\n  where?: Where\n}\n\nexport const countOperation = async <TSlug extends CollectionSlug>(\n  incomingArgs: Arguments,\n): Promise<{ totalDocs: number }> => {\n  let args = incomingArgs\n\n  try {\n    const shouldCommit = await initTransaction(args.req)\n\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      args =\n        (await hook({\n          args,\n          collection: args.collection.config,\n          context: args.req.context,\n          operation: 'count',\n          req: args.req,\n        })) || args\n    }, Promise.resolve())\n\n    const {\n      collection: { config: collectionConfig },\n      disableErrors,\n      overrideAccess,\n      req: { payload },\n      req,\n      where,\n    } = args\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    let accessResult: AccessResult\n\n    if (!overrideAccess) {\n      accessResult = await executeAccess({ disableErrors, req }, collectionConfig.access.read)\n\n      // If errors are disabled, and access returns false, return empty results\n      if (accessResult === false) {\n        return {\n          totalDocs: 0,\n        }\n      }\n    }\n\n    let result: { totalDocs: number }\n\n    const fullWhere = combineQueries(where, accessResult)\n\n    await validateQueryPaths({\n      collectionConfig,\n      overrideAccess,\n      req,\n      where,\n    })\n\n    result = await payload.db.count({\n      collection: collectionConfig.slug,\n      req,\n      where: fullWhere,\n    })\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'count',\n      result,\n    })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    if (shouldCommit) await commitTransaction(req)\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","validateQueryPaths","commitTransaction","initTransaction","killTransaction","buildAfterOperation","countOperation","incomingArgs","args","shouldCommit","req","collection","config","hooks","beforeOperation","reduce","priorHook","hook","context","operation","Promise","resolve","collectionConfig","disableErrors","overrideAccess","payload","where","accessResult","access","read","totalDocs","result","fullWhere","db","count","slug","error"],"mappings":"AAKA,OAAOA,mBAAmB,8BAA6B;AACvD,SAASC,cAAc,QAAQ,mCAAkC;AACjE,SAASC,kBAAkB,QAAQ,uDAAsD;AACzF,SAASC,iBAAiB,QAAQ,uCAAsC;AACxE,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,mBAAmB,QAAQ,aAAY;AAUhD,OAAO,MAAMC,iBAAiB,OAC5BC;IAEA,IAAIC,OAAOD;IAEX,IAAI;QACF,MAAME,eAAe,MAAMN,gBAAgBK,KAAKE,GAAG;QAEnD,wCAAwC;QACxC,+BAA+B;QAC/B,wCAAwC;QAExC,MAAMF,KAAKG,UAAU,CAACC,MAAM,CAACC,KAAK,CAACC,eAAe,CAACC,MAAM,CAAC,OAAOC,WAAWC;YAC1E,MAAMD;YAENR,OACE,AAAC,MAAMS,KAAK;gBACVT;gBACAG,YAAYH,KAAKG,UAAU,CAACC,MAAM;gBAClCM,SAASV,KAAKE,GAAG,CAACQ,OAAO;gBACzBC,WAAW;gBACXT,KAAKF,KAAKE,GAAG;YACf,MAAOF;QACX,GAAGY,QAAQC,OAAO;QAElB,MAAM,EACJV,YAAY,EAAEC,QAAQU,gBAAgB,EAAE,EACxCC,aAAa,EACbC,cAAc,EACdd,KAAK,EAAEe,OAAO,EAAE,EAChBf,GAAG,EACHgB,KAAK,EACN,GAAGlB;QAEJ,wCAAwC;QACxC,SAAS;QACT,wCAAwC;QAExC,IAAImB;QAEJ,IAAI,CAACH,gBAAgB;YACnBG,eAAe,MAAM5B,cAAc;gBAAEwB;gBAAeb;YAAI,GAAGY,iBAAiBM,MAAM,CAACC,IAAI;YAEvF,yEAAyE;YACzE,IAAIF,iBAAiB,OAAO;gBAC1B,OAAO;oBACLG,WAAW;gBACb;YACF;QACF;QAEA,IAAIC;QAEJ,MAAMC,YAAYhC,eAAe0B,OAAOC;QAExC,MAAM1B,mBAAmB;YACvBqB;YACAE;YACAd;YACAgB;QACF;QAEAK,SAAS,MAAMN,QAAQQ,EAAE,CAACC,KAAK,CAAC;YAC9BvB,YAAYW,iBAAiBa,IAAI;YACjCzB;YACAgB,OAAOM;QACT;QAEA,wCAAwC;QACxC,8BAA8B;QAC9B,wCAAwC;QAExCD,SAAS,MAAM1B,oBAAoB;YACjCG;YACAG,YAAYW;YACZH,WAAW;YACXY;QACF;QAEA,wCAAwC;QACxC,iBAAiB;QACjB,wCAAwC;QAExC,IAAItB,cAAc,MAAMP,kBAAkBQ;QAE1C,OAAOqB;IACT,EAAE,OAAOK,OAAgB;QACvB,MAAMhC,gBAAgBI,KAAKE,GAAG;QAC9B,MAAM0B;IACR;AACF,EAAC"}