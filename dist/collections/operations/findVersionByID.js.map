{"version":3,"sources":["../../../src/collections/operations/findVersionByID.ts"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport httpStatus from 'http-status'\n\nimport type { PayloadRequestWithData } from '../../types/index.js'\nimport type { TypeWithVersion } from '../../versions/types.js'\nimport type { Collection, TypeWithID } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { APIError, Forbidden, NotFound } from '../../errors/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\n\nexport type Arguments = {\n  collection: Collection\n  currentDepth?: number\n  depth?: number\n  disableErrors?: boolean\n  id: number | string\n  overrideAccess?: boolean\n  req: PayloadRequestWithData\n  showHiddenFields?: boolean\n}\n\nexport const findVersionByIDOperation = async <TData extends TypeWithID = any>(\n  args: Arguments,\n): Promise<TypeWithVersion<TData>> => {\n  const {\n    id,\n    collection: { config: collectionConfig },\n    currentDepth,\n    depth,\n    disableErrors,\n    overrideAccess,\n    req: { fallbackLocale, locale, payload },\n    req,\n    showHiddenFields,\n  } = args\n\n  if (!id) {\n    throw new APIError('Missing ID of version.', httpStatus.BAD_REQUEST)\n  }\n\n  try {\n    const shouldCommit = await initTransaction(req)\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess({ id, disableErrors, req }, collectionConfig.access.readVersions)\n      : true\n\n    // If errors are disabled, and access returns false, return null\n    if (accessResults === false) return null\n\n    const hasWhereAccess = typeof accessResults === 'object'\n\n    const fullWhere = combineQueries({ id: { equals: id } }, accessResults)\n\n    // /////////////////////////////////////\n    // Find by ID\n    // /////////////////////////////////////\n\n    const versionsQuery = await payload.db.findVersions<TData>({\n      collection: collectionConfig.slug,\n      limit: 1,\n      locale,\n      pagination: false,\n      req,\n      where: fullWhere,\n    })\n\n    const result = versionsQuery.docs[0]\n\n    if (!result) {\n      if (!disableErrors) {\n        if (!hasWhereAccess) throw new NotFound(req.t)\n        if (hasWhereAccess) throw new Forbidden(req.t)\n      }\n\n      return null\n    }\n\n    // /////////////////////////////////////\n    // beforeRead - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.beforeRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result.version =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result.version,\n          query: fullWhere,\n          req,\n        })) || result.version\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result.version = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      currentDepth,\n      depth,\n      doc: result.version,\n      draft: undefined,\n      fallbackLocale,\n      global: null,\n      locale,\n      overrideAccess,\n      req,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result.version =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result.version,\n          query: fullWhere,\n          req,\n        })) || result.version\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    if (shouldCommit) await commitTransaction(req)\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["httpStatus","executeAccess","combineQueries","APIError","Forbidden","NotFound","afterRead","commitTransaction","initTransaction","killTransaction","findVersionByIDOperation","args","id","collection","config","collectionConfig","currentDepth","depth","disableErrors","overrideAccess","req","fallbackLocale","locale","payload","showHiddenFields","BAD_REQUEST","shouldCommit","accessResults","access","readVersions","hasWhereAccess","fullWhere","equals","versionsQuery","db","findVersions","slug","limit","pagination","where","result","docs","t","hooks","beforeRead","reduce","priorHook","hook","version","context","doc","query","Promise","resolve","draft","undefined","global","error"],"mappings":"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"}