{"version":3,"sources":["../../../src/globals/operations/findVersions.ts"],"sourcesContent":["import type { PaginatedDocs } from '../../database/types.js'\nimport type { PayloadRequestWithData, Where } from '../../types/index.js'\nimport type { TypeWithVersion } from '../../versions/types.js'\nimport type { SanitizedGlobalConfig } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { validateQueryPaths } from '../../database/queryValidation/validateQueryPaths.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport sanitizeInternalFields from '../../utilities/sanitizeInternalFields.js'\nimport { buildVersionGlobalFields } from '../../versions/buildGlobalFields.js'\n\nexport type Arguments = {\n  depth?: number\n  globalConfig: SanitizedGlobalConfig\n  limit?: number\n  overrideAccess?: boolean\n  page?: number\n  req?: PayloadRequestWithData\n  showHiddenFields?: boolean\n  sort?: string\n  where?: Where\n}\n\nexport const findVersionsOperation = async <T extends TypeWithVersion<T>>(\n  args: Arguments,\n): Promise<PaginatedDocs<T>> => {\n  const {\n    depth,\n    globalConfig,\n    limit,\n    overrideAccess,\n    page,\n    req: { fallbackLocale, locale, payload },\n    req,\n    showHiddenFields,\n    sort,\n    where,\n  } = args\n\n  const versionFields = buildVersionGlobalFields(globalConfig)\n\n  try {\n    const shouldCommit = await initTransaction(req)\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess({ req }, globalConfig.access.readVersions)\n      : true\n\n    await validateQueryPaths({\n      globalConfig,\n      overrideAccess,\n      req,\n      versionFields,\n      where,\n    })\n\n    const fullWhere = combineQueries(where, accessResults)\n\n    // /////////////////////////////////////\n    // Find\n    // /////////////////////////////////////\n\n    const paginatedDocs = await payload.db.findGlobalVersions<T>({\n      global: globalConfig.slug,\n      limit: limit ?? 10,\n      locale,\n      page: page || 1,\n      req,\n      sort,\n      where: fullWhere,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    let result = {\n      ...paginatedDocs,\n      docs: await Promise.all(\n        paginatedDocs.docs.map(async (data) => ({\n          ...data,\n          version: await afterRead({\n            collection: null,\n            context: req.context,\n            depth,\n            doc: {\n              ...data.version,\n              // Patch globalType onto version doc\n              globalType: globalConfig.slug,\n            },\n            draft: undefined,\n            fallbackLocale,\n            findMany: true,\n            global: globalConfig,\n            locale,\n            overrideAccess,\n            req,\n            showHiddenFields,\n          }),\n        })),\n      ),\n    } as PaginatedDocs<T>\n\n    // /////////////////////////////////////\n    // afterRead - Global\n    // /////////////////////////////////////\n\n    result = {\n      ...result,\n      docs: await Promise.all(\n        result.docs.map(async (doc) => {\n          const docRef = doc\n\n          await globalConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n            await priorHook\n\n            docRef.version =\n              (await hook({\n                context: req.context,\n                doc: doc.version,\n                findMany: true,\n                global: globalConfig,\n                query: fullWhere,\n                req,\n              })) || doc.version\n          }, Promise.resolve())\n\n          return docRef\n        }),\n      ),\n    }\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    result = {\n      ...result,\n      docs: result.docs.map((doc) => sanitizeInternalFields<T>(doc)),\n    }\n\n    if (shouldCommit) await commitTransaction(req)\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","validateQueryPaths","afterRead","commitTransaction","initTransaction","killTransaction","sanitizeInternalFields","buildVersionGlobalFields","findVersionsOperation","args","depth","globalConfig","limit","overrideAccess","page","req","fallbackLocale","locale","payload","showHiddenFields","sort","where","versionFields","shouldCommit","accessResults","access","readVersions","fullWhere","paginatedDocs","db","findGlobalVersions","global","slug","result","docs","Promise","all","map","data","version","collection","context","doc","globalType","draft","undefined","findMany","docRef","hooks","reduce","priorHook","hook","query","resolve","error"],"mappings":"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"}