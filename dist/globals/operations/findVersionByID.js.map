{"version":3,"sources":["../../../src/globals/operations/findVersionByID.ts"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport type { FindGlobalVersionsArgs } from '../../database/types.js'\nimport type { PayloadRequestWithData } from '../../types/index.js'\nimport type { TypeWithVersion } from '../../versions/types.js'\nimport type { SanitizedGlobalConfig } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { Forbidden, NotFound } from '../../errors/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\n\nexport type Arguments = {\n  currentDepth?: number\n  depth?: number\n  disableErrors?: boolean\n  globalConfig: SanitizedGlobalConfig\n  id: number | string\n  overrideAccess?: boolean\n  req: PayloadRequestWithData\n  showHiddenFields?: boolean\n}\n\nexport const findVersionByIDOperation = async <T extends TypeWithVersion<T> = any>(\n  args: Arguments,\n): Promise<T> => {\n  const {\n    id,\n    currentDepth,\n    depth,\n    disableErrors,\n    globalConfig,\n    overrideAccess,\n    req: { fallbackLocale, locale, payload },\n    req,\n    showHiddenFields,\n  } = args\n\n  try {\n    const shouldCommit = await initTransaction(req)\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess({ id, disableErrors, req }, globalConfig.access.readVersions)\n      : true\n\n    // If errors are disabled, and access returns false, return null\n    if (accessResults === false) return null\n\n    const hasWhereAccess = typeof accessResults === 'object'\n\n    const findGlobalVersionsArgs: FindGlobalVersionsArgs = {\n      global: globalConfig.slug,\n      limit: 1,\n      locale,\n      req,\n      where: combineQueries({ id: { equals: id } }, accessResults),\n    }\n\n    // /////////////////////////////////////\n    // Find by ID\n    // /////////////////////////////////////\n\n    if (!findGlobalVersionsArgs.where.and[0].id) throw new NotFound(req.t)\n\n    const { docs: results } = await payload.db.findGlobalVersions(findGlobalVersionsArgs)\n    if (!results || results?.length === 0) {\n      if (!disableErrors) {\n        if (!hasWhereAccess) throw new NotFound(req.t)\n        if (hasWhereAccess) throw new Forbidden(req.t)\n      }\n\n      return null\n    }\n\n    // Clone the result - it may have come back memoized\n    let result = JSON.parse(JSON.stringify(results[0]))\n\n    // Patch globalType onto version doc\n    result.version.globalType = globalConfig.slug\n\n    // /////////////////////////////////////\n    // beforeRead - Collection\n    // /////////////////////////////////////\n\n    await globalConfig.hooks.beforeRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          context: req.context,\n          doc: result.version,\n          global: globalConfig,\n          req,\n        })) || result.version\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result.version = await afterRead({\n      collection: null,\n      context: req.context,\n      currentDepth,\n      depth,\n      doc: result.version,\n      draft: undefined,\n      fallbackLocale,\n      global: globalConfig,\n      locale,\n      overrideAccess,\n      req,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Global\n    // /////////////////////////////////////\n\n    await globalConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result.version =\n        (await hook({\n          context: req.context,\n          doc: result.version,\n          global: globalConfig,\n          query: findGlobalVersionsArgs.where,\n          req,\n        })) || result.version\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    if (shouldCommit) await commitTransaction(req)\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","combineQueries","Forbidden","NotFound","afterRead","commitTransaction","initTransaction","killTransaction","findVersionByIDOperation","args","id","currentDepth","depth","disableErrors","globalConfig","overrideAccess","req","fallbackLocale","locale","payload","showHiddenFields","shouldCommit","accessResults","access","readVersions","hasWhereAccess","findGlobalVersionsArgs","global","slug","limit","where","equals","and","t","docs","results","db","findGlobalVersions","length","result","JSON","parse","stringify","version","globalType","hooks","beforeRead","reduce","priorHook","hook","context","doc","Promise","resolve","collection","draft","undefined","query","error"],"mappings":"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"}