{"version":3,"sources":["../../../src/globals/operations/update.ts"],"sourcesContent":["import type { DeepPartial } from 'ts-essentials'\n\nimport type { GlobalSlug } from '../../index.js'\nimport type { PayloadRequestWithData, Where } from '../../types/index.js'\nimport type { DataFromGlobalSlug, SanitizedGlobalConfig } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { afterChange } from '../../fields/hooks/afterChange/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { beforeChange } from '../../fields/hooks/beforeChange/index.js'\nimport { beforeValidate } from '../../fields/hooks/beforeValidate/index.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { getLatestGlobalVersion } from '../../versions/getLatestGlobalVersion.js'\nimport { saveVersion } from '../../versions/saveVersion.js'\n\ntype Args<TSlug extends GlobalSlug> = {\n  autosave?: boolean\n  data: DeepPartial<Omit<DataFromGlobalSlug<TSlug>, 'id'>>\n  depth?: number\n  draft?: boolean\n  globalConfig: SanitizedGlobalConfig\n  overrideAccess?: boolean\n  req: PayloadRequestWithData\n  showHiddenFields?: boolean\n  slug: string\n}\n\nexport const updateOperation = async <TSlug extends GlobalSlug>(\n  args: Args<TSlug>,\n): Promise<DataFromGlobalSlug<TSlug>> => {\n  const {\n    slug,\n    autosave,\n    depth,\n    draft: draftArg,\n    globalConfig,\n    overrideAccess,\n    req: { fallbackLocale, locale, payload },\n    req,\n    showHiddenFields,\n  } = args\n\n  try {\n    const shouldCommit = await initTransaction(req)\n\n    let { data } = args\n\n    const shouldSaveDraft = Boolean(draftArg && globalConfig.versions?.drafts)\n\n    // /////////////////////////////////////\n    // 1. Retrieve and execute access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess(\n          {\n            data,\n            req,\n          },\n          globalConfig.access.update,\n        )\n      : true\n\n    // /////////////////////////////////////\n    // Retrieve document\n    // /////////////////////////////////////\n\n    const query: Where = overrideAccess ? undefined : (accessResults as Where)\n\n    // /////////////////////////////////////\n    // 2. Retrieve document\n    // /////////////////////////////////////\n    const { global, globalExists } = await getLatestGlobalVersion({\n      slug,\n      config: globalConfig,\n      locale,\n      payload,\n      req,\n      where: query,\n    })\n\n    let globalJSON: Record<string, unknown> = {}\n\n    if (global) {\n      globalJSON = JSON.parse(JSON.stringify(global))\n\n      if (globalJSON._id) {\n        delete globalJSON._id\n      }\n    }\n\n    const originalDoc = await afterRead({\n      collection: null,\n      context: req.context,\n      depth: 0,\n      doc: globalJSON,\n      draft: draftArg,\n      fallbackLocale,\n      global: globalConfig,\n      locale,\n      overrideAccess: true,\n      req,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // beforeValidate - Fields\n    // /////////////////////////////////////\n\n    data = await beforeValidate({\n      collection: null,\n      context: req.context,\n      data,\n      doc: originalDoc,\n      global: globalConfig,\n      operation: 'update',\n      overrideAccess,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // beforeValidate - Global\n    // /////////////////////////////////////\n\n    await globalConfig.hooks.beforeValidate.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      data =\n        (await hook({\n          context: req.context,\n          data,\n          global: globalConfig,\n          originalDoc,\n          req,\n        })) || data\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // beforeChange - Global\n    // /////////////////////////////////////\n\n    await globalConfig.hooks.beforeChange.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      data =\n        (await hook({\n          context: req.context,\n          data,\n          global: globalConfig,\n          originalDoc,\n          req,\n        })) || data\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // beforeChange - Fields\n    // /////////////////////////////////////\n\n    let result = await beforeChange({\n      collection: null,\n      context: req.context,\n      data,\n      doc: originalDoc,\n      docWithLocales: globalJSON,\n      global: globalConfig,\n      operation: 'update',\n      req,\n      skipValidation:\n        shouldSaveDraft && globalConfig.versions.drafts && !globalConfig.versions.drafts.validate,\n    })\n\n    // /////////////////////////////////////\n    // Update\n    // /////////////////////////////////////\n\n    if (!shouldSaveDraft) {\n      if (globalExists) {\n        result = await payload.db.updateGlobal({\n          slug,\n          data: result,\n          req,\n        })\n      } else {\n        result = await payload.db.createGlobal({\n          slug,\n          data: result,\n          req,\n        })\n      }\n    }\n\n    // /////////////////////////////////////\n    // Create version\n    // /////////////////////////////////////\n\n    if (globalConfig.versions) {\n      const { globalType } = result\n      result = await saveVersion({\n        autosave,\n        docWithLocales: {\n          ...result,\n          createdAt: result.createdAt,\n          updatedAt: result.updatedAt,\n        },\n        draft: shouldSaveDraft,\n        global: globalConfig,\n        payload,\n        req,\n      })\n      result.globalType = globalType\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: null,\n      context: req.context,\n      depth,\n      doc: result,\n      draft: draftArg,\n      fallbackLocale: null,\n      global: globalConfig,\n      locale,\n      overrideAccess,\n      req,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Global\n    // /////////////////////////////////////\n\n    await globalConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          context: req.context,\n          doc: result,\n          global: globalConfig,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterChange - Fields\n    // /////////////////////////////////////\n\n    result = await afterChange({\n      collection: null,\n      context: req.context,\n      data,\n      doc: result,\n      global: globalConfig,\n      operation: 'update',\n      previousDoc: originalDoc,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // afterChange - Global\n    // /////////////////////////////////////\n\n    await globalConfig.hooks.afterChange.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          context: req.context,\n          doc: result,\n          global: globalConfig,\n          previousDoc: originalDoc,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    if (shouldCommit) await commitTransaction(req)\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","afterChange","afterRead","beforeChange","beforeValidate","commitTransaction","initTransaction","killTransaction","getLatestGlobalVersion","saveVersion","updateOperation","args","slug","autosave","depth","draft","draftArg","globalConfig","overrideAccess","req","fallbackLocale","locale","payload","showHiddenFields","shouldCommit","data","shouldSaveDraft","Boolean","versions","drafts","accessResults","access","update","query","undefined","global","globalExists","config","where","globalJSON","JSON","parse","stringify","_id","originalDoc","collection","context","doc","operation","hooks","reduce","priorHook","hook","Promise","resolve","result","docWithLocales","skipValidation","validate","db","updateGlobal","createGlobal","globalType","createdAt","updatedAt","previousDoc","error"],"mappings":"AAMA,OAAOA,mBAAmB,8BAA6B;AACvD,SAASC,WAAW,QAAQ,0CAAyC;AACrE,SAASC,SAAS,QAAQ,wCAAuC;AACjE,SAASC,YAAY,QAAQ,2CAA0C;AACvE,SAASC,cAAc,QAAQ,6CAA4C;AAC3E,SAASC,iBAAiB,QAAQ,uCAAsC;AACxE,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,sBAAsB,QAAQ,2CAA0C;AACjF,SAASC,WAAW,QAAQ,gCAA+B;AAc3D,OAAO,MAAMC,kBAAkB,OAC7BC;IAEA,MAAM,EACJC,IAAI,EACJC,QAAQ,EACRC,KAAK,EACLC,OAAOC,QAAQ,EACfC,YAAY,EACZC,cAAc,EACdC,KAAK,EAAEC,cAAc,EAAEC,MAAM,EAAEC,OAAO,EAAE,EACxCH,GAAG,EACHI,gBAAgB,EACjB,GAAGZ;IAEJ,IAAI;QACF,MAAMa,eAAe,MAAMlB,gBAAgBa;QAE3C,IAAI,EAAEM,IAAI,EAAE,GAAGd;QAEf,MAAMe,kBAAkBC,QAAQX,YAAYC,aAAaW,QAAQ,EAAEC;QAEnE,wCAAwC;QACxC,iCAAiC;QACjC,wCAAwC;QAExC,MAAMC,gBAAgB,CAACZ,iBACnB,MAAMlB,cACJ;YACEyB;YACAN;QACF,GACAF,aAAac,MAAM,CAACC,MAAM,IAE5B;QAEJ,wCAAwC;QACxC,oBAAoB;QACpB,wCAAwC;QAExC,MAAMC,QAAef,iBAAiBgB,YAAaJ;QAEnD,wCAAwC;QACxC,uBAAuB;QACvB,wCAAwC;QACxC,MAAM,EAAEK,MAAM,EAAEC,YAAY,EAAE,GAAG,MAAM5B,uBAAuB;YAC5DI;YACAyB,QAAQpB;YACRI;YACAC;YACAH;YACAmB,OAAOL;QACT;QAEA,IAAIM,aAAsC,CAAC;QAE3C,IAAIJ,QAAQ;YACVI,aAAaC,KAAKC,KAAK,CAACD,KAAKE,SAAS,CAACP;YAEvC,IAAII,WAAWI,GAAG,EAAE;gBAClB,OAAOJ,WAAWI,GAAG;YACvB;QACF;QAEA,MAAMC,cAAc,MAAM1C,UAAU;YAClC2C,YAAY;YACZC,SAAS3B,IAAI2B,OAAO;YACpBhC,OAAO;YACPiC,KAAKR;YACLxB,OAAOC;YACPI;YACAe,QAAQlB;YACRI;YACAH,gBAAgB;YAChBC;YACAI;QACF;QAEA,wCAAwC;QACxC,0BAA0B;QAC1B,wCAAwC;QAExCE,OAAO,MAAMrB,eAAe;YAC1ByC,YAAY;YACZC,SAAS3B,IAAI2B,OAAO;YACpBrB;YACAsB,KAAKH;YACLT,QAAQlB;YACR+B,WAAW;YACX9B;YACAC;QACF;QAEA,wCAAwC;QACxC,0BAA0B;QAC1B,wCAAwC;QAExC,MAAMF,aAAagC,KAAK,CAAC7C,cAAc,CAAC8C,MAAM,CAAC,OAAOC,WAAWC;YAC/D,MAAMD;YAEN1B,OACE,AAAC,MAAM2B,KAAK;gBACVN,SAAS3B,IAAI2B,OAAO;gBACpBrB;gBACAU,QAAQlB;gBACR2B;gBACAzB;YACF,MAAOM;QACX,GAAG4B,QAAQC,OAAO;QAElB,wCAAwC;QACxC,wBAAwB;QACxB,wCAAwC;QAExC,MAAMrC,aAAagC,KAAK,CAAC9C,YAAY,CAAC+C,MAAM,CAAC,OAAOC,WAAWC;YAC7D,MAAMD;YAEN1B,OACE,AAAC,MAAM2B,KAAK;gBACVN,SAAS3B,IAAI2B,OAAO;gBACpBrB;gBACAU,QAAQlB;gBACR2B;gBACAzB;YACF,MAAOM;QACX,GAAG4B,QAAQC,OAAO;QAElB,wCAAwC;QACxC,wBAAwB;QACxB,wCAAwC;QAExC,IAAIC,SAAS,MAAMpD,aAAa;YAC9B0C,YAAY;YACZC,SAAS3B,IAAI2B,OAAO;YACpBrB;YACAsB,KAAKH;YACLY,gBAAgBjB;YAChBJ,QAAQlB;YACR+B,WAAW;YACX7B;YACAsC,gBACE/B,mBAAmBT,aAAaW,QAAQ,CAACC,MAAM,IAAI,CAACZ,aAAaW,QAAQ,CAACC,MAAM,CAAC6B,QAAQ;QAC7F;QAEA,wCAAwC;QACxC,SAAS;QACT,wCAAwC;QAExC,IAAI,CAAChC,iBAAiB;YACpB,IAAIU,cAAc;gBAChBmB,SAAS,MAAMjC,QAAQqC,EAAE,CAACC,YAAY,CAAC;oBACrChD;oBACAa,MAAM8B;oBACNpC;gBACF;YACF,OAAO;gBACLoC,SAAS,MAAMjC,QAAQqC,EAAE,CAACE,YAAY,CAAC;oBACrCjD;oBACAa,MAAM8B;oBACNpC;gBACF;YACF;QACF;QAEA,wCAAwC;QACxC,iBAAiB;QACjB,wCAAwC;QAExC,IAAIF,aAAaW,QAAQ,EAAE;YACzB,MAAM,EAAEkC,UAAU,EAAE,GAAGP;YACvBA,SAAS,MAAM9C,YAAY;gBACzBI;gBACA2C,gBAAgB;oBACd,GAAGD,MAAM;oBACTQ,WAAWR,OAAOQ,SAAS;oBAC3BC,WAAWT,OAAOS,SAAS;gBAC7B;gBACAjD,OAAOW;gBACPS,QAAQlB;gBACRK;gBACAH;YACF;YACAoC,OAAOO,UAAU,GAAGA;QACtB;QAEA,wCAAwC;QACxC,qBAAqB;QACrB,wCAAwC;QAExCP,SAAS,MAAMrD,UAAU;YACvB2C,YAAY;YACZC,SAAS3B,IAAI2B,OAAO;YACpBhC;YACAiC,KAAKQ;YACLxC,OAAOC;YACPI,gBAAgB;YAChBe,QAAQlB;YACRI;YACAH;YACAC;YACAI;QACF;QAEA,wCAAwC;QACxC,qBAAqB;QACrB,wCAAwC;QAExC,MAAMN,aAAagC,KAAK,CAAC/C,SAAS,CAACgD,MAAM,CAAC,OAAOC,WAAWC;YAC1D,MAAMD;YAENI,SACE,AAAC,MAAMH,KAAK;gBACVN,SAAS3B,IAAI2B,OAAO;gBACpBC,KAAKQ;gBACLpB,QAAQlB;gBACRE;YACF,MAAOoC;QACX,GAAGF,QAAQC,OAAO;QAElB,wCAAwC;QACxC,uBAAuB;QACvB,wCAAwC;QAExCC,SAAS,MAAMtD,YAAY;YACzB4C,YAAY;YACZC,SAAS3B,IAAI2B,OAAO;YACpBrB;YACAsB,KAAKQ;YACLpB,QAAQlB;YACR+B,WAAW;YACXiB,aAAarB;YACbzB;QACF;QAEA,wCAAwC;QACxC,uBAAuB;QACvB,wCAAwC;QAExC,MAAMF,aAAagC,KAAK,CAAChD,WAAW,CAACiD,MAAM,CAAC,OAAOC,WAAWC;YAC5D,MAAMD;YAENI,SACE,AAAC,MAAMH,KAAK;gBACVN,SAAS3B,IAAI2B,OAAO;gBACpBC,KAAKQ;gBACLpB,QAAQlB;gBACRgD,aAAarB;gBACbzB;YACF,MAAOoC;QACX,GAAGF,QAAQC,OAAO;QAElB,wCAAwC;QACxC,iBAAiB;QACjB,wCAAwC;QAExC,IAAI9B,cAAc,MAAMnB,kBAAkBc;QAE1C,OAAOoC;IACT,EAAE,OAAOW,OAAgB;QACvB,MAAM3D,gBAAgBY;QACtB,MAAM+C;IACR;AACF,EAAC"}