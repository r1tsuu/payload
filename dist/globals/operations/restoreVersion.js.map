{"version":3,"sources":["../../../src/globals/operations/restoreVersion.ts"],"sourcesContent":["import type { PayloadRequestWithData } from '../../types/index.js'\nimport type { TypeWithVersion } from '../../versions/types.js'\nimport type { SanitizedGlobalConfig } from '../config/types.js'\n\nimport executeAccess from '../../auth/executeAccess.js'\nimport { NotFound } from '../../errors/index.js'\nimport { afterChange } from '../../fields/hooks/afterChange/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\n\nexport type Arguments = {\n  depth?: number\n  globalConfig: SanitizedGlobalConfig\n  id: number | string\n  overrideAccess?: boolean\n  req?: PayloadRequestWithData\n  showHiddenFields?: boolean\n}\n\nexport const restoreVersionOperation = async <T extends TypeWithVersion<T> = any>(\n  args: Arguments,\n): Promise<T> => {\n  const {\n    id,\n    depth,\n    globalConfig,\n    overrideAccess,\n    req: { fallbackLocale, locale, payload },\n    req,\n    showHiddenFields,\n  } = args\n\n  try {\n    const shouldCommit = await initTransaction(req)\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    if (!overrideAccess) {\n      await executeAccess({ req }, globalConfig.access.update)\n    }\n\n    // /////////////////////////////////////\n    // Retrieve original raw version\n    // /////////////////////////////////////\n\n    const { docs: versionDocs } = await payload.db.findGlobalVersions<any>({\n      global: globalConfig.slug,\n      limit: 1,\n      req,\n      where: { id: { equals: id } },\n    })\n\n    if (!versionDocs || versionDocs.length === 0) {\n      throw new NotFound(req.t)\n    }\n\n    const rawVersion = versionDocs[0]\n\n    // Patch globalType onto version doc\n    rawVersion.version.globalType = globalConfig.slug\n\n    // /////////////////////////////////////\n    // fetch previousDoc\n    // /////////////////////////////////////\n\n    const previousDoc = await payload.findGlobal({\n      slug: globalConfig.slug,\n      depth,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // Update global\n    // /////////////////////////////////////\n\n    const global = await payload.db.findGlobal({\n      slug: globalConfig.slug,\n      req,\n    })\n\n    let result = rawVersion.version\n\n    if (global) {\n      result = await payload.db.updateGlobal({\n        slug: globalConfig.slug,\n        data: result,\n        req,\n      })\n    } else {\n      result = await payload.db.createGlobal({\n        slug: globalConfig.slug,\n        data: result,\n        req,\n      })\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: null,\n      context: req.context,\n      depth,\n      doc: result,\n      draft: undefined,\n      fallbackLocale,\n      global: globalConfig,\n      locale,\n      overrideAccess,\n      req,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Global\n    // /////////////////////////////////////\n\n    await globalConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          context: req.context,\n          doc: result,\n          global: globalConfig,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterChange - Fields\n    // /////////////////////////////////////\n\n    result = await afterChange({\n      collection: null,\n      context: req.context,\n      data: result,\n      doc: result,\n      global: globalConfig,\n      operation: 'update',\n      previousDoc,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // afterChange - Global\n    // /////////////////////////////////////\n\n    await globalConfig.hooks.afterChange.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      result =\n        (await hook({\n          context: req.context,\n          doc: result,\n          global: globalConfig,\n          previousDoc,\n          req,\n        })) || result\n    }, Promise.resolve())\n\n    if (shouldCommit) await commitTransaction(req)\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","NotFound","afterChange","afterRead","commitTransaction","initTransaction","killTransaction","restoreVersionOperation","args","id","depth","globalConfig","overrideAccess","req","fallbackLocale","locale","payload","showHiddenFields","shouldCommit","access","update","docs","versionDocs","db","findGlobalVersions","global","slug","limit","where","equals","length","t","rawVersion","version","globalType","previousDoc","findGlobal","result","updateGlobal","data","createGlobal","collection","context","doc","draft","undefined","hooks","reduce","priorHook","hook","Promise","resolve","operation","error"],"mappings":"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"}