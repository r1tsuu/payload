{"version":3,"sources":["../../../src/globals/config/types.ts"],"sourcesContent":["import type { GraphQLNonNull, GraphQLObjectType } from 'graphql'\nimport type { DeepRequired } from 'ts-essentials'\n\nimport type {\n  CustomPreviewButton,\n  CustomPublishButton,\n  CustomSaveButton,\n  CustomSaveDraftButton,\n} from '../../admin/types.js'\nimport type {\n  Access,\n  EditConfig,\n  Endpoint,\n  EntityDescription,\n  EntityDescriptionComponent,\n  GeneratePreviewURL,\n  LivePreviewConfig,\n  OpenGraphConfig,\n} from '../../config/types.js'\nimport type { DBIdentifierName } from '../../database/types.js'\nimport type { Field } from '../../fields/config/types.js'\nimport type { GlobalSlug, TypedGlobal } from '../../index.js'\nimport type { PayloadRequestWithData, RequestContext, Where } from '../../types/index.js'\nimport type { IncomingGlobalVersions, SanitizedGlobalVersions } from '../../versions/types.js'\n\nexport type DataFromGlobalSlug<TSlug extends GlobalSlug> = TypedGlobal[TSlug]\n\nexport type BeforeValidateHook = (args: {\n  context: RequestContext\n  data?: any\n  /** The global which this hook is being run on */\n  global: SanitizedGlobalConfig\n  originalDoc?: any\n  req: PayloadRequestWithData\n}) => any\n\nexport type BeforeChangeHook = (args: {\n  context: RequestContext\n  data: any\n  /** The global which this hook is being run on */\n  global: SanitizedGlobalConfig\n  originalDoc?: any\n  req: PayloadRequestWithData\n}) => any\n\nexport type AfterChangeHook = (args: {\n  context: RequestContext\n  doc: any\n  /** The global which this hook is being run on */\n  global: SanitizedGlobalConfig\n  previousDoc: any\n  req: PayloadRequestWithData\n}) => any\n\nexport type BeforeReadHook = (args: {\n  context: RequestContext\n  doc: any\n  /** The global which this hook is being run on */\n  global: SanitizedGlobalConfig\n  req: PayloadRequestWithData\n}) => any\n\nexport type AfterReadHook = (args: {\n  context: RequestContext\n  doc: any\n  findMany?: boolean\n  /** The global which this hook is being run on */\n  global: SanitizedGlobalConfig\n  query?: Where\n  req: PayloadRequestWithData\n}) => any\n\nexport type GlobalAdminOptions = {\n  /**\n   * Custom admin components\n   */\n  components?: {\n    elements?: {\n      Description?: EntityDescriptionComponent\n      /**\n       * Replaces the \"Preview\" button\n       */\n      PreviewButton?: CustomPreviewButton\n      /**\n       * Replaces the \"Publish\" button\n       * + drafts must be enabled\n       */\n      PublishButton?: CustomPublishButton\n      /**\n       * Replaces the \"Save\" button\n       * + drafts must be disabled\n       */\n      SaveButton?: CustomSaveButton\n      /**\n       * Replaces the \"Save Draft\" button\n       * + drafts must be enabled\n       * + autosave must be disabled\n       */\n      SaveDraftButton?: CustomSaveDraftButton\n    }\n    views?: {\n      /**\n       * Set to a React component to replace the entire \"Edit\" view, including all nested routes.\n       * Set to an object to replace or modify individual nested routes, or to add new ones.\n       */\n      Edit?: EditConfig\n    }\n  }\n  /** Extension point to add your custom data. Available in server and client. */\n  custom?: Record<string, any>\n  /**\n   * Custom description for collection\n   */\n  description?: EntityDescription\n  /**\n   * Place globals into a navigational group\n   * */\n  group?: Record<string, string> | string\n  /**\n   * Exclude the global from the admin nav and routes\n   */\n  hidden?: ((args: { user: PayloadRequestWithData['user'] }) => boolean) | boolean\n  /**\n   * Hide the API URL within the Edit view\n   */\n  hideAPIURL?: boolean\n  /**\n   * Live preview options\n   */\n  livePreview?: LivePreviewConfig\n  meta?: {\n    description?: string\n    openGraph?: OpenGraphConfig\n  }\n  /**\n   * Function to generate custom preview URL\n   */\n  preview?: GeneratePreviewURL\n}\n\nexport type GlobalConfig = {\n  access?: {\n    read?: Access\n    readDrafts?: Access\n    readVersions?: Access\n    update?: Access\n  }\n  admin?: GlobalAdminOptions\n  /** Extension point to add your custom data. Server only. */\n  custom?: Record<string, any>\n  /**\n   * Customize the SQL table name\n   */\n  dbName?: DBIdentifierName\n  endpoints?: Omit<Endpoint, 'root'>[] | false\n  fields: Field[]\n  graphQL?:\n    | {\n        name?: string\n      }\n    | false\n  hooks?: {\n    afterChange?: AfterChangeHook[]\n    afterRead?: AfterReadHook[]\n    beforeChange?: BeforeChangeHook[]\n    beforeRead?: BeforeReadHook[]\n    beforeValidate?: BeforeValidateHook[]\n  }\n  label?: Record<string, string> | string\n  slug: string\n  /**\n   * Options used in typescript generation\n   */\n  typescript?: {\n    /**\n     * Typescript generation name given to the interface type\n     */\n    interface?: string\n  }\n  versions?: IncomingGlobalVersions | boolean\n}\n\nexport interface SanitizedGlobalConfig\n  extends Omit<DeepRequired<GlobalConfig>, 'endpoints' | 'fields' | 'versions'> {\n  endpoints: Endpoint[] | false\n  fields: Field[]\n  versions: SanitizedGlobalVersions\n}\n\nexport type Globals = {\n  config: SanitizedGlobalConfig[]\n  graphQL?:\n    | {\n        [slug: string]: {\n          mutationInputType: GraphQLNonNull<any>\n          type: GraphQLObjectType\n          versionType?: GraphQLObjectType\n        }\n      }\n    | false\n}\n"],"names":[],"mappings":"AA6LA,WAWC"}