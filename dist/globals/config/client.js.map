{"version":3,"sources":["../../../src/globals/config/client.ts"],"sourcesContent":["import type { TFunction } from '@payloadcms/translations'\n\nimport type {\n  LivePreviewConfig,\n  SanitizedConfig,\n  ServerOnlyLivePreviewProperties,\n} from '../../config/types.js'\nimport type { ClientFieldConfig } from '../../fields/config/client.js'\nimport type { SanitizedGlobalConfig } from './types.js'\n\nimport { createClientFieldConfigs } from '../../fields/config/client.js'\n\nexport type ServerOnlyGlobalProperties = keyof Pick<\n  SanitizedGlobalConfig,\n  'access' | 'admin' | 'custom' | 'endpoints' | 'fields' | 'hooks'\n>\nexport type ServerOnlyGlobalAdminProperties = keyof Pick<\n  SanitizedGlobalConfig['admin'],\n  'components' | 'hidden' | 'preview'\n>\n\nexport type ClientGlobalConfig = Omit<\n  SanitizedGlobalConfig,\n  'admin' | 'fields' | ServerOnlyGlobalProperties\n> & {\n  admin: Omit<\n    SanitizedGlobalConfig['admin'],\n    ServerOnlyGlobalAdminProperties & 'fields' & 'livePreview'\n  > & {\n    livePreview?: Omit<LivePreviewConfig, ServerOnlyLivePreviewProperties>\n  }\n  fields: ClientFieldConfig[]\n}\n\nexport const createClientGlobalConfig = ({\n  global,\n  t,\n}: {\n  global: SanitizedConfig['globals'][0]\n  t: TFunction\n}): ClientGlobalConfig => {\n  const sanitized = { ...global }\n  sanitized.fields = createClientFieldConfigs({ fields: sanitized.fields, t })\n\n  const serverOnlyProperties: Partial<ServerOnlyGlobalProperties>[] = [\n    'hooks',\n    'access',\n    'endpoints',\n    'custom',\n    // `admin` is handled separately\n  ]\n\n  serverOnlyProperties.forEach((key) => {\n    if (key in sanitized) {\n      delete sanitized[key]\n    }\n  })\n\n  if ('admin' in sanitized) {\n    sanitized.admin = { ...sanitized.admin }\n\n    const serverOnlyGlobalAdminProperties: Partial<ServerOnlyGlobalAdminProperties>[] = [\n      'components',\n      'hidden',\n      'preview',\n    ]\n\n    serverOnlyGlobalAdminProperties.forEach((key) => {\n      if (key in sanitized.admin) {\n        delete sanitized.admin[key]\n      }\n    })\n\n    if ('livePreview' in sanitized.admin) {\n      sanitized.admin.livePreview = { ...sanitized.admin.livePreview }\n      delete sanitized.admin.livePreview.url\n    }\n  }\n\n  return sanitized\n}\n\nexport const createClientGlobalConfigs = ({\n  globals,\n  t,\n}: {\n  globals: SanitizedConfig['globals']\n  t: TFunction\n}): ClientGlobalConfig[] => globals.map((global) => createClientGlobalConfig({ global, t }))\n"],"names":["createClientFieldConfigs","createClientGlobalConfig","global","t","sanitized","fields","serverOnlyProperties","forEach","key","admin","serverOnlyGlobalAdminProperties","livePreview","url","createClientGlobalConfigs","globals","map"],"mappings":"AAUA,SAASA,wBAAwB,QAAQ,gCAA+B;AAwBxE,OAAO,MAAMC,2BAA2B,CAAC,EACvCC,MAAM,EACNC,CAAC,EAIF;IACC,MAAMC,YAAY;QAAE,GAAGF,MAAM;IAAC;IAC9BE,UAAUC,MAAM,GAAGL,yBAAyB;QAAEK,QAAQD,UAAUC,MAAM;QAAEF;IAAE;IAE1E,MAAMG,uBAA8D;QAClE;QACA;QACA;QACA;KAED;IAEDA,qBAAqBC,OAAO,CAAC,CAACC;QAC5B,IAAIA,OAAOJ,WAAW;YACpB,OAAOA,SAAS,CAACI,IAAI;QACvB;IACF;IAEA,IAAI,WAAWJ,WAAW;QACxBA,UAAUK,KAAK,GAAG;YAAE,GAAGL,UAAUK,KAAK;QAAC;QAEvC,MAAMC,kCAA8E;YAClF;YACA;YACA;SACD;QAEDA,gCAAgCH,OAAO,CAAC,CAACC;YACvC,IAAIA,OAAOJ,UAAUK,KAAK,EAAE;gBAC1B,OAAOL,UAAUK,KAAK,CAACD,IAAI;YAC7B;QACF;QAEA,IAAI,iBAAiBJ,UAAUK,KAAK,EAAE;YACpCL,UAAUK,KAAK,CAACE,WAAW,GAAG;gBAAE,GAAGP,UAAUK,KAAK,CAACE,WAAW;YAAC;YAC/D,OAAOP,UAAUK,KAAK,CAACE,WAAW,CAACC,GAAG;QACxC;IACF;IAEA,OAAOR;AACT,EAAC;AAED,OAAO,MAAMS,4BAA4B,CAAC,EACxCC,OAAO,EACPX,CAAC,EAIF,GAA2BW,QAAQC,GAAG,CAAC,CAACb,SAAWD,yBAAyB;YAAEC;YAAQC;QAAE,IAAG"}