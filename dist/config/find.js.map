{"version":3,"sources":["../../src/config/find.ts"],"sourcesContent":["import { findUpSync, pathExistsSync } from 'find-up'\nimport { getTsconfig } from 'get-tsconfig'\nimport path from 'path'\n\n/**\n * Returns the source and output paths from the nearest tsconfig.json file.\n * If no tsconfig.json file is found, returns the current working directory.\n * @returns An object containing the source and output paths.\n */\nconst getTSConfigPaths = (): {\n  configPath?: string\n  outPath?: string\n  rootPath?: string\n  srcPath?: string\n  tsConfigPath?: string\n} => {\n  const tsConfigResult = getTsconfig()\n  const tsConfig = tsConfigResult.config\n  const tsConfigDir = path.dirname(tsConfigResult.path)\n\n  try {\n    const rootConfigDir = path.resolve(tsConfigDir, tsConfig.compilerOptions.baseUrl || '')\n    const srcPath = tsConfig.compilerOptions?.rootDir || path.resolve(process.cwd(), 'src')\n    const outPath = tsConfig.compilerOptions?.outDir || path.resolve(process.cwd(), 'dist')\n    let configPath = path.resolve(\n      rootConfigDir,\n      tsConfig.compilerOptions?.paths?.['@payload-config']?.[0],\n    )\n\n    if (configPath) {\n      configPath = path.resolve(rootConfigDir, configPath)\n    }\n    return {\n      configPath,\n      outPath,\n      rootPath: rootConfigDir,\n      srcPath,\n      tsConfigPath: tsConfigResult.path,\n    }\n  } catch (error) {\n    console.error(`Error parsing tsconfig.json: ${error}`) // Do not throw the error, as we can still continue with the other config path finding methods\n    return {\n      rootPath: process.cwd(),\n    }\n  }\n}\n\n/**\n * Searches for a Payload configuration file.\n * @returns The absolute path to the Payload configuration file.\n * @throws An error if no configuration file is found.\n */\nexport const findConfig = (): string => {\n  // If the developer has specified a config path,\n  // format it if relative and use it directly if absolute\n  if (process.env.PAYLOAD_CONFIG_PATH) {\n    if (path.isAbsolute(process.env.PAYLOAD_CONFIG_PATH)) {\n      return process.env.PAYLOAD_CONFIG_PATH\n    }\n\n    return path.resolve(process.cwd(), process.env.PAYLOAD_CONFIG_PATH)\n  }\n\n  const { configPath, outPath, rootPath, srcPath } = getTSConfigPaths()\n\n  // if configPath is absolute file, not folder, return it\n  if (path.extname(configPath) === '.js' || path.extname(configPath) === '.ts') {\n    return configPath\n  }\n\n  const searchPaths =\n    process.env.NODE_ENV === 'production'\n      ? [configPath, outPath, srcPath, rootPath]\n      : [configPath, srcPath, rootPath]\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const searchPath of searchPaths) {\n    if (!searchPath) continue\n\n    const configPath = findUpSync(\n      (dir) => {\n        const tsPath = path.join(dir, 'payload.config.ts')\n        const hasTS = pathExistsSync(tsPath)\n\n        if (hasTS) {\n          return tsPath\n        }\n\n        const jsPath = path.join(dir, 'payload.config.js')\n        const hasJS = pathExistsSync(jsPath)\n\n        if (hasJS) {\n          return jsPath\n        }\n\n        return undefined\n      },\n      { cwd: searchPath },\n    )\n\n    if (configPath) {\n      return configPath\n    }\n  }\n\n  // If no config file is found in the directories defined by tsconfig.json,\n  // try searching in the 'src' and 'dist' directory as a last resort, as they are most commonly used\n  if (process.env.NODE_ENV === 'production') {\n    const distConfigPath = findUpSync(['payload.config.js', 'payload.config.ts'], {\n      cwd: path.resolve(process.cwd(), 'dist'),\n    })\n\n    if (distConfigPath) return distConfigPath\n  } else {\n    const srcConfigPath = findUpSync(['payload.config.js', 'payload.config.ts'], {\n      cwd: path.resolve(process.cwd(), 'src'),\n    })\n\n    if (srcConfigPath) return srcConfigPath\n  }\n\n  throw new Error(\n    'Error: cannot find Payload config. Please create a configuration file located at the root of your current working directory called \"payload.config.js\" or \"payload.config.ts\".',\n  )\n}\n"],"names":["findUpSync","pathExistsSync","getTsconfig","path","getTSConfigPaths","tsConfigResult","tsConfig","config","tsConfigDir","dirname","rootConfigDir","resolve","compilerOptions","baseUrl","srcPath","rootDir","process","cwd","outPath","outDir","configPath","paths","rootPath","tsConfigPath","error","console","findConfig","env","PAYLOAD_CONFIG_PATH","isAbsolute","extname","searchPaths","NODE_ENV","searchPath","dir","tsPath","join","hasTS","jsPath","hasJS","undefined","distConfigPath","srcConfigPath","Error"],"mappings":"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"}