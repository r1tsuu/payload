{"version":3,"sources":["../../src/config/types.ts"],"sourcesContent":["import type {\n  DefaultTranslationsObject,\n  I18nClient,\n  I18nOptions,\n  TFunction,\n} from '@payloadcms/translations'\nimport type { Options as ExpressFileUploadOptions } from 'express-fileupload'\nimport type GraphQL from 'graphql'\nimport type { JSONSchema4 } from 'json-schema'\nimport type { DestinationStream, LoggerOptions } from 'pino'\nimport type React from 'react'\nimport type { JSX } from 'react'\nimport type { default as sharp } from 'sharp'\nimport type { DeepRequired } from 'ts-essentials'\n\nimport type { RichTextAdapterProvider } from '../admin/RichText.js'\nimport type { DocumentTab, RichTextAdapter } from '../admin/types.js'\nimport type { AdminView, ServerSideEditViewProps } from '../admin/views/types.js'\nimport type { Permissions } from '../auth/index.js'\nimport type {\n  AfterErrorHook,\n  Collection,\n  CollectionConfig,\n  SanitizedCollectionConfig,\n} from '../collections/config/types.js'\nimport type { DatabaseAdapterResult } from '../database/types.js'\nimport type { EmailAdapter, SendEmailOptions } from '../email/types.js'\nimport type { GlobalConfig, Globals, SanitizedGlobalConfig } from '../globals/config/types.js'\nimport type { Payload, TypedUser } from '../index.js'\nimport type { PayloadRequest, PayloadRequestWithData, Where } from '../types/index.js'\nimport type { PayloadLogger } from '../utilities/logger.js'\n\nexport type BinScriptConfig = {\n  key: string\n  scriptPath: string\n}\n\nexport type BinScript = (config: SanitizedConfig) => Promise<void> | void\n\ntype Prettify<T> = {\n  [K in keyof T]: T[K]\n} & NonNullable<unknown>\n\n// eslint-disable-next-line no-use-before-define\nexport type Plugin = (config: Config) => Config | Promise<Config>\n\nexport type LivePreviewConfig = {\n  /**\n   Device breakpoints to use for the `iframe` of the Live Preview window.\n   Options are displayed in the Live Preview toolbar.\n   The `responsive` breakpoint is included by default.\n   */\n  breakpoints?: {\n    height: number | string\n    label: string\n    name: string\n    width: number | string\n  }[]\n  /**\n   The URL of the frontend application. This will be rendered within an `iframe` as its `src`.\n   Payload will send a `window.postMessage()` to this URL with the document data in real-time.\n   The frontend application is responsible for receiving the message and updating the UI accordingly.\n   Use the `useLivePreview` hook to get started in React applications.\n   */\n  url?:\n    | ((args: {\n        collectionConfig?: SanitizedCollectionConfig\n        data: Record<string, any>\n        globalConfig?: SanitizedGlobalConfig\n        locale: Locale\n        payload: Payload\n      }) => Promise<string> | string)\n    | string\n}\n\nexport type OGImageConfig = {\n  alt?: string\n  height?: number | string\n  type?: string\n  url: string\n  width?: number | string\n}\n\nexport type OpenGraphConfig = {\n  description?: string\n  images?: OGImageConfig | OGImageConfig[]\n  siteName?: string\n  title?: string\n}\n\nexport type IconConfig = {\n  color?: string\n  /**\n   * @see https://developer.mozilla.org/docs/Web/API/HTMLImageElement/fetchPriority\n   */\n  fetchPriority?: 'auto' | 'high' | 'low'\n  media?: string\n  /** defaults to rel=\"icon\" */\n  rel?: string\n  sizes?: string\n  type?: string\n  url: string\n}\n\nexport type MetaConfig = {\n  /**\n   * When `static`, a pre-made image will be used for all pages.\n   * When `dynamic`, a unique image will be generated for each page based on page content and given overrides.\n   * When `off`, no Open Graph images will be generated and the `/api/og` endpoint will be disabled. You can still provide custom images using the `openGraph.images` property.\n   * @default 'dynamic'\n   */\n  defaultOGImageType?: 'dynamic' | 'off' | 'static'\n  /**\n   * Overrides the auto-generated <meta name=\"description\"> of admin pages\n   * @example `\"This is my custom CMS built with Payload.\"`\n   */\n  description?: string\n  /**\n   * Icons to be rendered by devices and browsers.\n   *\n   * For example browser tabs, phone home screens, and search engine results.\n   */\n  icons?: IconConfig[]\n  /**\n   * Overrides the auto-generated <meta name=\"keywords\"> of admin pages\n   * @example `\"CMS, Payload, Custom\"`\n   */\n  keywords?: string\n  /**\n   * Metadata to be rendered as `og` meta tags in the head of the Admin Panel.\n   *\n   * For example when sharing the Admin Panel on social media or through messaging services.\n   */\n  openGraph?: OpenGraphConfig\n  /**\n   * Overrides the auto-generated <title> of admin pages\n   * @example `\"My Admin Panel\"`\n   */\n  title?: string\n  /**\n   * String to append to the auto-generated <title> of admin pages\n   * @example `\" - Custom CMS\"`\n   */\n  titleSuffix?: string\n}\n\nexport type ServerOnlyLivePreviewProperties = keyof Pick<LivePreviewConfig, 'url'>\n\ntype GeneratePreviewURLOptions = {\n  locale: string\n  req: PayloadRequestWithData\n  token: null | string\n}\n\nexport type GeneratePreviewURL = (\n  doc: Record<string, unknown>,\n  options: GeneratePreviewURLOptions,\n) => Promise<null | string> | null | string\n\nexport type GraphQLInfo = {\n  Mutation: {\n    fields: Record<string, any>\n    name: string\n  }\n  Query: {\n    fields: Record<string, any>\n    name: string\n  }\n  collections: {\n    [slug: number | string | symbol]: Collection\n  }\n  globals: Globals\n  types: {\n    arrayTypes: Record<string, GraphQL.GraphQLType>\n    blockInputTypes: Record<string, GraphQL.GraphQLInputObjectType>\n    blockTypes: Record<string, GraphQL.GraphQLObjectType>\n    fallbackLocaleInputType?: GraphQL.GraphQLEnumType | GraphQL.GraphQLScalarType\n    groupTypes: Record<string, GraphQL.GraphQLObjectType>\n    localeInputType?: GraphQL.GraphQLEnumType | GraphQL.GraphQLScalarType\n    tabTypes: Record<string, GraphQL.GraphQLObjectType>\n  }\n}\nexport type GraphQLExtension = (\n  graphQL: typeof GraphQL,\n  context: {\n    config: SanitizedConfig\n  } & GraphQLInfo,\n) => Record<string, unknown>\n\nexport type InitOptions = {\n  /**\n   * Sometimes, with the local API, you might need to pass a config file directly, for example, serverless on Vercel\n   * The passed config should match the config file, and if it doesn't, there could be mismatches between the admin UI\n   * and the backend functionality\n   */\n  config: Promise<SanitizedConfig> | SanitizedConfig\n  /**\n   * Disable connect to the database on init\n   */\n  disableDBConnect?: boolean\n\n  /**\n   * Disable running of the `onInit` function\n   */\n  disableOnInit?: boolean\n\n  /**\n   * A previously instantiated logger instance. Must conform to the PayloadLogger interface which uses Pino\n   * This allows you to bring your own logger instance and let payload use it\n   */\n  logger?: PayloadLogger\n\n  loggerDestination?: DestinationStream\n\n  /**\n   * Specify options for the built-in Pino logger that Payload uses for internal logging.\n   *\n   * See Pino Docs for options: https://getpino.io/#/docs/api?id=options\n   */\n  loggerOptions?: LoggerOptions\n  /**\n   * A function that is called immediately following startup that receives the Payload instance as it's only argument.\n   */\n  onInit?: (payload: Payload) => Promise<void> | void\n}\n\n/**\n * This result is calculated on the server\n * and then sent to the client allowing the dashboard to show accessible data and actions.\n *\n * If the result is `true`, the user has access.\n * If the result is an object, it is interpreted as a MongoDB query.\n *\n * @example `{ createdBy: { equals: id } }`\n *\n * @example `{ tenant: { in: tenantIds } }`\n *\n * @see https://payloadcms.com/docs/access-control/overview\n */\nexport type AccessResult = Where | boolean\n\nexport type AccessArgs<TData = any> = {\n  /**\n   * The relevant resource that is being accessed.\n   *\n   * `data` is null when a list is requested\n   */\n  data?: TData\n  /** ID of the resource being accessed */\n  id?: number | string\n  /** If true, the request is for a static file */\n  isReadingStaticFile?: boolean\n  /** The original request that requires an access check */\n  req: PayloadRequestWithData\n}\n\n/**\n * Access function runs on the server\n * and is sent to the client allowing the dashboard to show accessible data and actions.\n *\n * @see https://payloadcms.com/docs/access-control/overview\n */\nexport type Access<TData = any> = (args: AccessArgs<TData>) => AccessResult | Promise<AccessResult>\n\n/** Web Request/Response model, but the req has more payload specific properties added to it. */\nexport type PayloadHandler = (req: PayloadRequest) => Promise<Response> | Response\n\n/**\n * Docs: https://payloadcms.com/docs/rest-api/overview#custom-endpoints\n */\nexport type Endpoint = {\n  /** Extension point to add your custom data. */\n  custom?: Record<string, any>\n\n  /**\n   * Middleware that will be called when the path/method matches\n   *\n   * Compatible with Web Request/Response Model\n   */\n  handler: PayloadHandler\n  /** HTTP method (or \"all\") */\n  method: 'connect' | 'delete' | 'get' | 'head' | 'options' | 'patch' | 'post' | 'put'\n  /**\n   * Pattern that should match the path of the incoming request\n   *\n   * Compatible with the Express router\n   */\n  path: string\n  /**\n   * Please add \"root\" routes under the /api folder in the Payload Project.\n   * https://nextjs.org/docs/app/api-reference/file-conventions/route\n   *\n   * @deprecated in 3.0\n   */\n  root?: never\n}\n\nexport type EditViewComponent = React.ComponentType<ServerSideEditViewProps>\n\nexport type EditViewConfig =\n  | {\n      /**\n       * Add a new Edit view to the admin panel\n       * i.e. you can render a custom view that has no tab, if desired\n       * Or override a specific properties of an existing one\n       * i.e. you can customize the `Default` view tab label, if desired\n       */\n      Tab?: DocumentTab\n      path?: string\n    }\n  | {\n      Component: EditViewComponent\n      path: string\n    }\n  | {\n      actions?: CustomComponent[]\n    }\n\n/**\n * Override existing views\n * i.e. Dashboard, Account, API, LivePreview, etc.\n * Path is not available here\n * All Tab properties become optional\n * i.e. you can change just the label, if desired\n */\nexport type EditView = EditViewComponent | EditViewConfig\n\nexport type ServerProps = {\n  [key: string]: unknown\n  i18n: I18nClient\n  locale?: Locale\n  params?: { [key: string]: string | string[] | undefined }\n  payload: Payload\n  permissions?: Permissions\n  searchParams?: { [key: string]: string | string[] | undefined }\n  user?: TypedUser\n}\n\nexport const serverProps: (keyof ServerProps)[] = [\n  'payload',\n  'i18n',\n  'locale',\n  'params',\n  'permissions',\n  'searchParams',\n  'permissions',\n]\n\nexport type CustomComponent<TAdditionalProps extends any = any> = React.ComponentType<\n  TAdditionalProps & Partial<ServerProps>\n>\n\nexport type Locale = {\n  /**\n   * value of supported locale\n   * @example \"en\"\n   */\n  code: string\n  /**\n   * Code of another locale to use when reading documents with fallback, if not specified defaultLocale is used\n   */\n  fallbackLocale?: string\n  /**\n   * label of supported locale\n   * @example \"English\"\n   */\n  label: Record<string, string> | string\n  /**\n   * if true, defaults textAligmnent on text fields to RTL\n   */\n  rtl?: boolean\n}\n\nexport type BaseLocalizationConfig = {\n  /**\n   * Locale for users that have not expressed their preference for a specific locale\n   * @example `\"en\"`\n   */\n  defaultLocale: string\n  /** Set to `true` to let missing values in localised fields fall back to the values in `defaultLocale` */\n  fallback?: boolean\n}\n\nexport type LocalizationConfigWithNoLabels = Prettify<\n  BaseLocalizationConfig & {\n    /**\n     * List of supported locales\n     * @example `[\"en\", \"es\", \"fr\", \"nl\", \"de\", \"jp\"]`\n     */\n    locales: string[]\n  }\n>\n\nexport type LocalizationConfigWithLabels = Prettify<\n  BaseLocalizationConfig & {\n    /**\n     * List of supported locales with labels\n     * @example {\n     *  label: 'English',\n     *  value: 'en',\n     *  rtl: false\n     * }\n     */\n    locales: Locale[]\n  }\n>\n\nexport type SanitizedLocalizationConfig = Prettify<\n  LocalizationConfigWithLabels & {\n    /**\n     * List of supported locales\n     * @example `[\"en\", \"es\", \"fr\", \"nl\", \"de\", \"jp\"]`\n     */\n    localeCodes: string[]\n  }\n>\n\n/**\n * @see https://payloadcms.com/docs/configuration/localization#localization\n */\nexport type LocalizationConfig = Prettify<\n  LocalizationConfigWithLabels | LocalizationConfigWithNoLabels\n>\n\nexport type LabelFunction = ({ t }: { t: TFunction }) => string\n\nexport type SharpDependency = (\n  input?:\n    | ArrayBuffer\n    | Buffer\n    | Float32Array\n    | Float64Array\n    | Int8Array\n    | Int16Array\n    | Int32Array\n    | Uint8Array\n    | Uint8ClampedArray\n    | Uint16Array\n    | Uint32Array\n    | string,\n  options?: sharp.SharpOptions,\n) => sharp.Sharp\n\n/**\n * This is the central configuration\n *\n * @see https://payloadcms.com/docs/configuration/overview\n */\nexport type Config = {\n  /** Configure admin dashboard */\n  admin?: {\n    /** Automatically log in as a user when visiting the admin dashboard. */\n    autoLogin?:\n      | {\n          /**\n           * The email address of the user to login as\n           *\n           */\n          email: string\n          /** The password of the user to login as */\n          password: string\n          /**\n           * If set to true, the login credentials will be prefilled but the user will still need to click the login button.\n           *\n           * @default false\n           */\n          prefillOnly?: boolean\n        }\n      | false\n    /** Set account profile picture. Options: gravatar, default or a custom React component. */\n    avatar?: 'default' | 'gravatar' | React.ComponentType<any>\n\n    /**\n     * Add extra and/or replace built-in components with custom components\n     *\n     * @see https://payloadcms.com/docs/admin/components\n     */\n    components?: {\n      /**\n       * Replace the navigation with a custom component\n       */\n      Nav?: CustomComponent\n      /**\n       * Add custom components to the top right of the Admin Panel\n       */\n      actions?: CustomComponent[]\n      /**\n       * Add custom components after the collection overview\n       */\n      afterDashboard?: CustomComponent[]\n      /**\n       * Add custom components after the email/password field\n       */\n      afterLogin?: CustomComponent[]\n      /**\n       * Add custom components after the navigation links\n       */\n      afterNavLinks?: CustomComponent[]\n      /**\n       * Add custom components before the collection overview\n       */\n      beforeDashboard?: CustomComponent[]\n      /**\n       * Add custom components before the email/password field\n       */\n      beforeLogin?: CustomComponent[]\n      /**\n       * Add custom components before the navigation links\n       */\n      beforeNavLinks?: CustomComponent[]\n      /** Replace graphical components */\n      graphics?: {\n        /** Replace the icon in the navigation */\n        Icon?: CustomComponent\n        /** Replace the logo on the login page */\n        Logo?: CustomComponent\n      }\n      /** Replace logout related components */\n      logout?: {\n        /** Replace the logout button  */\n        Button?: CustomComponent\n      }\n      /**\n       * Wrap the admin dashboard in custom context providers\n       */\n      providers?: React.ComponentType<{ children?: React.ReactNode }>[]\n      /**\n       * Replace or modify top-level admin routes, or add new ones:\n       * + `Account` - `/admin/account`\n       * + `Dashboard` - `/admin`\n       * + `:path` - `/admin/:path`\n       */\n      views?: {\n        /** Add custom admin views */\n        [key: string]: AdminView\n        /** Replace the account screen */\n        Account?: AdminView\n        /** Replace the admin homepage */\n        Dashboard?: AdminView\n      }\n    }\n    /** Extension point to add your custom data. Available in server and client. */\n    custom?: Record<string, any>\n    /** Global date format that will be used for all dates in the Admin panel. Any valid date-fns format pattern can be used. */\n    dateFormat?: string\n    /** If set to true, the entire Admin panel will be disabled. */\n    disable?: boolean\n    livePreview?: LivePreviewConfig & {\n      collections?: string[]\n      globals?: string[]\n    }\n    /** Base meta data to use for the Admin Panel. Included properties are titleSuffix, ogImage, and favicon. */\n    meta?: MetaConfig\n    routes?: {\n      /** The route for the account page. */\n      account?: string\n      /** The route for the create first user page. */\n      createFirstUser?: string\n      /** The route for the forgot password page. */\n      forgot?: string\n      /** The route the user will be redirected to after being inactive for too long. */\n      inactivity?: string\n      /** The route for the login page. */\n      login?: string\n      /** The route for the logout page. */\n      logout?: string\n      /** The route for the reset password page. */\n      reset?: string\n      /** The route for the unauthorized page. */\n      unauthorized?: string\n    }\n    /** The slug of a Collection that you want to be used to log in to the Admin dashboard. */\n    user?: string\n  }\n  /** Custom Payload bin scripts can be injected via the config. */\n  bin?: BinScriptConfig[]\n  /**\n   * Manage the datamodel of your application\n   *\n   * @see https://payloadcms.com/docs/configuration/collections#collection-configs\n   */\n  collections?: CollectionConfig[]\n  /**\n   * Replace the built-in components with custom ones\n   */\n  components?: { [key: string]: (() => JSX.Element) | JSX.Element }\n  /**\n   * Prefix a string to all cookies that Payload sets.\n   *\n   * @default \"payload\"\n   */\n  cookiePrefix?: string\n  /** Either a whitelist array of URLS to allow CORS requests from, or a wildcard string ('*') to accept incoming requests from any domain. */\n  cors?: '*' | string[]\n  /** A whitelist array of URLs to allow Payload cookies to be accepted from as a form of CSRF protection. */\n  csrf?: string[]\n\n  /** Extension point to add your custom data. Server only. */\n  custom?: Record<string, any>\n\n  /** Pass in a database adapter for use on this project. */\n  db: DatabaseAdapterResult\n  /** Enable to expose more detailed error information. */\n  debug?: boolean\n  /**\n   * If a user does not specify `depth` while requesting a resource, this depth will be used.\n   *\n   * @see https://payloadcms.com/docs/getting-started/concepts#depth\n   *\n   * @default 2\n   */\n  defaultDepth?: number\n  /**\n   * The maximum allowed depth to be permitted application-wide. This setting helps prevent against malicious queries.\n   *\n   * @default 40000\n   */\n  defaultMaxTextLength?: number\n  /** Default richtext editor to use for richText fields */\n  editor?: RichTextAdapterProvider<any, any, any>\n  /**\n   * Email Adapter\n   *\n   * @see https://payloadcms.com/docs/email/overview\n   */\n  email?: EmailAdapter | Promise<EmailAdapter>\n  /** Custom REST endpoints */\n  endpoints?: Endpoint[]\n  /**\n   * @see https://payloadcms.com/docs/configuration/globals#global-configs\n   */\n  globals?: GlobalConfig[]\n  /**\n   * Manage the GraphQL API\n   *\n   * You can add your own GraphQL queries and mutations to Payload, making use of all the types that Payload has defined for you.\n   *\n   * @see https://payloadcms.com/docs/graphql/overview\n   */\n  graphQL?: {\n    disable?: boolean\n    disablePlaygroundInProduction?: boolean\n    maxComplexity?: number\n    /**\n     * Function that returns an object containing keys to custom GraphQL mutations\n     *\n     * @see https://payloadcms.com/docs/graphql/extending\n     */\n    mutations?: GraphQLExtension\n    /**\n     * Function that returns an object containing keys to custom GraphQL queries\n     *\n     * @see https://payloadcms.com/docs/graphql/extending\n     */\n    queries?: GraphQLExtension\n    /**\n     * Filepath to write the generated schema to\n     */\n    schemaOutputFile?: string\n  }\n  /**\n   * Tap into Payload-wide hooks.\n   *\n   * @see https://payloadcms.com/docs/hooks/overview\n   */\n  hooks?: {\n    afterError?: AfterErrorHook\n  }\n  /** i18n config settings */\n  i18n?: I18nOptions<{} | DefaultTranslationsObject> // loosen the type here to allow for custom translations\n  /** Automatically index all sortable top-level fields in the database to improve sort performance and add database compatibility for Azure Cosmos and similar. */\n  indexSortableFields?: boolean\n  /**\n   * Translate your content to different languages/locales.\n   *\n   * @default false // disable localization\n   */\n  localization?: LocalizationConfig | false\n  /**\n   * The maximum allowed depth to be permitted application-wide. This setting helps prevent against malicious queries.\n   *\n   * @see https://payloadcms.com/docs/getting-started/concepts#depth\n   *\n   * @default 10\n   */\n  maxDepth?: number\n  /** A function that is called immediately following startup that receives the Payload instance as its only argument. */\n  onInit?: (payload: Payload) => Promise<void> | void\n  /**\n   * An array of Payload plugins.\n   *\n   * @see https://payloadcms.com/docs/plugins/overview\n   */\n  plugins?: Plugin[]\n  /** Control the routing structure that Payload binds itself to. */\n  routes?: {\n    /** @default \"/admin\" */\n    admin?: string\n    /** @default \"/api\"  */\n    api?: string\n    /** @default \"/graphql\"  */\n    graphQL?: string\n    /** @default \"/graphql-playground\" */\n    graphQLPlayground?: string\n  }\n  /** Secure string that Payload will use for any encryption workflows */\n  secret: string\n  /**\n   * Define the absolute URL of your app including the protocol, for example `https://example.org`.\n   * No paths allowed, only protocol, domain and (optionally) port.\n   *\n   * @see https://payloadcms.com/docs/configuration/overview#options\n   */\n  serverURL?: string\n  /**\n   * Pass in a local copy of Sharp if you'd like to use it.\n   *\n   */\n  sharp?: SharpDependency\n  /** Send anonymous telemetry data about general usage. */\n  telemetry?: boolean\n  /** Control how typescript interfaces are generated from your collections. */\n  typescript?: {\n    /**\n     * Automatically generate types during development\n     * @default true\n     */\n    autoGenerate?: boolean\n\n    /** Disable declare block in generated types file */\n    declare?:\n      | {\n          /**\n           * @internal internal use only to allow for multiple declarations within a monorepo and suppress the \"Duplicate identifier GeneratedTypes\" error\n           *\n           * Adds a @ts-ignore flag above the GeneratedTypes interface declaration\n           *\n           * @default false\n           */\n          ignoreTSError?: boolean\n        }\n      | false\n\n    /** Reusable JSON Shema definitions for usage in `typescriptSchema` field property */\n    definitions?: Record<string, JSONSchema4>\n\n    /** Filename to write the generated types to */\n    outputFile?: string\n  }\n  /**\n   * Customize the handling of incoming file uploads for collections that have uploads enabled.\n   */\n  upload?: ExpressFileUploadOptions\n}\n\nexport type SanitizedConfig = Omit<\n  DeepRequired<Config>,\n  'collections' | 'editor' | 'endpoint' | 'globals' | 'i18n' | 'localization' | 'upload'\n> & {\n  collections: SanitizedCollectionConfig[]\n  /** Default richtext editor to use for richText fields */\n  editor?: RichTextAdapter<any, any, any>\n  endpoints: Endpoint[]\n  globals: SanitizedGlobalConfig[]\n  i18n: Required<I18nOptions>\n  localization: SanitizedLocalizationConfig | false\n  paths: {\n    config: string\n    configDir: string\n    rawConfig: string\n  }\n  upload: ExpressFileUploadOptions & {\n    /**\n     * Deduped list of adapters used in the project\n     */\n    adapters: string[]\n  }\n}\n\nexport type EditConfig =\n  | (\n      | {\n          /**\n           * Replace or modify individual nested routes, or add new ones:\n           * + `Default` - `/admin/collections/:collection/:id`\n           * + `API` - `/admin/collections/:collection/:id/api`\n           * + `LivePreview` - `/admin/collections/:collection/:id/preview`\n           * + `References` - `/admin/collections/:collection/:id/references`\n           * + `Relationships` - `/admin/collections/:collection/:id/relationships`\n           * + `Versions` - `/admin/collections/:collection/:id/versions`\n           * + `Version` - `/admin/collections/:collection/:id/versions/:version`\n           * + `CustomView` - `/admin/collections/:collection/:id/:path`\n           */\n          API?: EditViewComponent | Partial<EditViewConfig>\n          Default?: EditViewComponent | Partial<EditViewConfig>\n          LivePreview?: EditViewComponent | Partial<EditViewConfig>\n          Version?: EditViewComponent | Partial<EditViewConfig>\n          Versions?: EditViewComponent | Partial<EditViewConfig>\n          // TODO: uncomment these as they are built\n          // References?: EditView\n          // Relationships?: EditView\n        }\n      | {\n          [key: string]: EditViewConfig\n        }\n    )\n  | EditViewComponent\n\nexport type EntityDescriptionComponent = CustomComponent\n\nexport type EntityDescriptionFunction = ({ t }: { t: TFunction }) => string\n\nexport type EntityDescription = EntityDescriptionFunction | Record<string, string> | string\n\nexport type { EmailAdapter, SendEmailOptions }\n"],"names":["serverProps"],"mappings":"AAkVA,OAAO,MAAMA,cAAqC;IAChD;IACA;IACA;IACA;IACA;IACA;IACA;CACD,CAAA"}