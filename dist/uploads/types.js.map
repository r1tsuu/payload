{"version":3,"sources":["../../src/uploads/types.ts"],"sourcesContent":["import type { ResizeOptions, Sharp } from 'sharp'\n\nimport type { TypeWithID } from '../collections/config/types.js'\nimport type { PayloadRequestWithData } from '../types/index.js'\n\nexport type FileSize = {\n  filename: null | string\n  filesize: null | number\n  height: null | number\n  mimeType: null | string\n  width: null | number\n}\n\nexport type FileSizes = {\n  [size: string]: FileSize\n}\n\nexport type FileData = {\n  filename: string\n  filesize: number\n  focalX?: number\n  focalY?: number\n  height: number\n  mimeType: string\n  sizes: FileSizes\n  tempFilePath?: string\n  url?: string\n  width: number\n}\n\nexport type ProbedImageSize = {\n  height: number\n  width: number\n}\n\n/**\n * Params sent to the sharp `toFormat()` function\n * @link https://sharp.pixelplumbing.com/api-output#toformat\n */\nexport type ImageUploadFormatOptions = {\n  format: Parameters<Sharp['toFormat']>[0]\n  options?: Parameters<Sharp['toFormat']>[1]\n}\n\n/**\n * Params sent to the sharp trim() function\n * @link https://sharp.pixelplumbing.com/api-resize#trim\n */\nexport type ImageUploadTrimOptions = Parameters<Sharp['trim']>[0]\n\nexport type ImageSize = Omit<ResizeOptions, 'withoutEnlargement'> & {\n  /**\n   * @deprecated prefer position\n   */\n  crop?: string // comes from sharp package\n  formatOptions?: ImageUploadFormatOptions\n  name: string\n  trimOptions?: ImageUploadTrimOptions\n  /**\n   * When an uploaded image is smaller than the defined image size, we have 3 options:\n   *\n   * `undefined | false | true`\n   *\n   * 1. `undefined` [default]: uploading images with smaller width AND height than the image size will return null\n   * 2. `false`: always enlarge images to the image size\n   * 3. `true`: if the image is smaller than the image size, return the original image\n   */\n  withoutEnlargement?: ResizeOptions['withoutEnlargement']\n}\n\nexport type GetAdminThumbnail = (args: { doc: Record<string, unknown> }) => false | null | string\n\nexport type UploadConfig = {\n  /**\n   * The adapter name to use for uploads. Used for storage adapter telemetry.\n   * @default undefined\n   */\n  adapter?: string\n  /**\n   * Represents an admin thumbnail, which can be either a React component or a string.\n   * - If a string, it should be one of the image size names.\n   * - A function that generates a fully qualified URL for the thumbnail, receives the doc as the only argument.\n   **/\n  adminThumbnail?: GetAdminThumbnail | string\n  /**\n   * Enables cropping of images.\n   * @default true\n   */\n  crop?: boolean\n  /**\n   * Disable the ability to save files to disk.\n   * @default false\n   */\n  disableLocalStorage?: boolean\n  /**\n   * Ability to filter/modify Request Headers when fetching a file.\n   *\n   * Useful for adding custom headers to fetch from external providers.\n   * @default undefined\n   */\n  externalFileHeaderFilter?: (headers: Record<string, string>) => Record<string, string>\n  /**\n   * Require files to be uploaded when creating a document.\n   * @default true\n   */\n  filesRequiredOnCreate?: boolean\n  /**\n   * Enables focal point positioning for image manipulation.\n   * @default false\n   */\n  focalPoint?: boolean\n  /**\n   * Format options for the uploaded file. Formatting image sizes needs to be done within each formatOptions individually.\n   */\n  formatOptions?: ImageUploadFormatOptions\n  /**\n   * Custom handlers to run when a file is fetched.\n   *\n   * - If a handler returns a Response, the response will be sent to the client and no further handlers will be run.\n   * - If a handler returns null, the next handler will be run.\n   * - If no handlers return a response the file will be returned by default.\n   *\n   * @default undefined\n   */\n  handlers?: ((\n    req: PayloadRequestWithData,\n    args: {\n      doc: TypeWithID\n      params: { collection: string; filename: string }\n    },\n  ) => Promise<Response> | Promise<void> | Response | void)[]\n  imageSizes?: ImageSize[]\n  /**\n   * Restrict mimeTypes in the file picker. Array of valid mime types or mimetype wildcards\n   * @example ['image/*', 'application/pdf']\n   * @default undefined\n   */\n  mimeTypes?: string[]\n  /**\n   * Ability to modify the response headers fetching a file.\n   * @default undefined\n   */\n  modifyResponseHeaders?: ({ headers }: { headers: Headers }) => Headers\n  /**\n   * Sharp resize options for the original image.\n   * @link https://sharp.pixelplumbing.com/api-resize#resize\n   * @default undefined\n   */\n  resizeOptions?: ResizeOptions\n  /**\n   * The directory to serve static files from. Defaults to collection slug.\n   * @default undefined\n   */\n  staticDir?: string\n  trimOptions?: ImageUploadTrimOptions\n}\n\nexport type SanitizedUploadConfig = UploadConfig & {\n  staticDir: UploadConfig['staticDir']\n}\n\nexport type File = {\n  /**\n   * The buffer of the file.\n   */\n  data: Buffer\n  /**\n   * The mimetype of the file.\n   */\n  mimetype: string\n  /**\n   * The name of the file.\n   */\n  name: string\n  /**\n   * The size of the file in bytes.\n   */\n  size: number\n}\n\nexport type FileToSave = {\n  /**\n   * The buffer of the file.\n   */\n  buffer: Buffer\n  /**\n   * The path to save the file.\n   */\n  path: string\n}\n\nexport type UploadEdits = {\n  crop?: {\n    height?: number\n    width?: number\n    x?: number\n    y?: number\n  }\n  focalPoint?: {\n    x?: number\n    y?: number\n  }\n}\n"],"names":[],"mappings":"AA+LA,WAWC"}