{"version":3,"sources":["../../src/utilities/mergeListSearchAndWhere.ts"],"sourcesContent":["import type { SanitizedCollectionConfig } from '../collections/config/types.js'\nimport type { FieldAffectingData } from '../fields/config/types.js'\nimport type { Where } from '../types/index.js'\n\nimport { fieldAffectsData } from '../fields/config/types.js'\nimport { default as flattenTopLevelFields } from './flattenTopLevelFields.js'\n\nconst hoistQueryParamsToAnd = (where: Where, queryParams: Where) => {\n  if ('and' in where) {\n    where.and.push(queryParams)\n  } else if ('or' in where) {\n    where = {\n      and: [where, queryParams],\n    }\n  } else {\n    where = {\n      and: [where, queryParams],\n    }\n  }\n\n  return where\n}\n\nconst getTitleField = (collection: SanitizedCollectionConfig): FieldAffectingData => {\n  const {\n    admin: { useAsTitle },\n    fields,\n  } = collection\n\n  const topLevelFields = flattenTopLevelFields(fields)\n  return topLevelFields.find(\n    (field) => fieldAffectsData(field) && field.name === useAsTitle,\n  ) as FieldAffectingData\n}\n\ntype Args = {\n  collectionConfig: SanitizedCollectionConfig\n  query: {\n    search?: string\n    where?: Where\n  }\n}\n\nexport const mergeListSearchAndWhere = ({ collectionConfig, query }: Args): Where => {\n  const search = query?.search || undefined\n  let where = query?.where || undefined\n\n  if (search) {\n    let copyOfWhere = { ...(where || {}) }\n\n    const searchAsConditions = (\n      collectionConfig.admin.listSearchableFields || [getTitleField(collectionConfig)?.name || 'id']\n    ).map((fieldName) => {\n      return {\n        [fieldName]: {\n          like: search,\n        },\n      }\n    }, [])\n\n    if (searchAsConditions.length > 0) {\n      const conditionalSearchFields = {\n        or: [...searchAsConditions],\n      }\n      copyOfWhere = hoistQueryParamsToAnd(copyOfWhere, conditionalSearchFields)\n    }\n\n    where = copyOfWhere\n  }\n\n  return where\n}\n"],"names":["fieldAffectsData","default","flattenTopLevelFields","hoistQueryParamsToAnd","where","queryParams","and","push","getTitleField","collection","admin","useAsTitle","fields","topLevelFields","find","field","name","mergeListSearchAndWhere","collectionConfig","query","search","undefined","copyOfWhere","searchAsConditions","listSearchableFields","map","fieldName","like","length","conditionalSearchFields","or"],"mappings":"AAIA,SAASA,gBAAgB,QAAQ,4BAA2B;AAC5D,SAASC,WAAWC,qBAAqB,QAAQ,6BAA4B;AAE7E,MAAMC,wBAAwB,CAACC,OAAcC;IAC3C,IAAI,SAASD,OAAO;QAClBA,MAAME,GAAG,CAACC,IAAI,CAACF;IACjB,OAAO,IAAI,QAAQD,OAAO;QACxBA,QAAQ;YACNE,KAAK;gBAACF;gBAAOC;aAAY;QAC3B;IACF,OAAO;QACLD,QAAQ;YACNE,KAAK;gBAACF;gBAAOC;aAAY;QAC3B;IACF;IAEA,OAAOD;AACT;AAEA,MAAMI,gBAAgB,CAACC;IACrB,MAAM,EACJC,OAAO,EAAEC,UAAU,EAAE,EACrBC,MAAM,EACP,GAAGH;IAEJ,MAAMI,iBAAiBX,sBAAsBU;IAC7C,OAAOC,eAAeC,IAAI,CACxB,CAACC,QAAUf,iBAAiBe,UAAUA,MAAMC,IAAI,KAAKL;AAEzD;AAUA,OAAO,MAAMM,0BAA0B,CAAC,EAAEC,gBAAgB,EAAEC,KAAK,EAAQ;IACvE,MAAMC,SAASD,OAAOC,UAAUC;IAChC,IAAIjB,QAAQe,OAAOf,SAASiB;IAE5B,IAAID,QAAQ;QACV,IAAIE,cAAc;YAAE,GAAIlB,SAAS,CAAC,CAAC;QAAE;QAErC,MAAMmB,qBAAqB,AACzBL,CAAAA,iBAAiBR,KAAK,CAACc,oBAAoB,IAAI;YAAChB,cAAcU,mBAAmBF,QAAQ;SAAK,AAAD,EAC7FS,GAAG,CAAC,CAACC;YACL,OAAO;gBACL,CAACA,UAAU,EAAE;oBACXC,MAAMP;gBACR;YACF;QACF,GAAG,EAAE;QAEL,IAAIG,mBAAmBK,MAAM,GAAG,GAAG;YACjC,MAAMC,0BAA0B;gBAC9BC,IAAI;uBAAIP;iBAAmB;YAC7B;YACAD,cAAcnB,sBAAsBmB,aAAaO;QACnD;QAEAzB,QAAQkB;IACV;IAEA,OAAOlB;AACT,EAAC"}