{"version":3,"sources":["../../../src/utilities/telemetry/index.ts"],"sourcesContent":["import { execSync } from 'child_process'\nimport ciInfo from 'ci-info'\nimport Conf from 'conf'\nimport { randomBytes } from 'crypto'\nimport { findUp } from 'find-up'\nimport fs from 'fs'\nimport path from 'path'\nimport { fileURLToPath } from 'url'\n\nimport type { Payload } from '../../types/index.js'\nimport type { AdminInitEvent } from './events/adminInit.js'\nimport type { ServerInitEvent } from './events/serverInit.js'\n\nimport { oneWayHash } from './oneWayHash.js'\n\nexport type BaseEvent = {\n  ciName: null | string\n  dbAdapter: string\n  emailAdapter: null | string\n  envID: string\n  isCI: boolean\n  locales: string[]\n  localizationDefaultLocale: null | string\n  localizationEnabled: boolean\n  nodeEnv: string\n  nodeVersion: string\n  payloadVersion: string\n  projectID: string\n  uploadAdapters: string[]\n}\n\ntype PackageJSON = {\n  dependencies: Record<string, string | undefined>\n  name: string\n}\n\ntype TelemetryEvent = AdminInitEvent | ServerInitEvent\n\ntype Args = {\n  event: TelemetryEvent\n  payload: Payload\n}\n\nlet baseEvent: BaseEvent | null = null\n\nexport const sendEvent = async ({ event, payload }: Args): Promise<void> => {\n  try {\n    const { packageJSON, packageJSONPath } = await getPackageJSON()\n\n    // Only generate the base event once\n    if (!baseEvent) {\n      baseEvent = {\n        ciName: ciInfo.isCI ? ciInfo.name : null,\n        envID: getEnvID(),\n        isCI: ciInfo.isCI,\n        nodeEnv: process.env.NODE_ENV || 'development',\n        nodeVersion: process.version,\n        payloadVersion: getPayloadVersion(packageJSON),\n        projectID: getProjectID(payload, packageJSON),\n        ...getLocalizationInfo(payload),\n        dbAdapter: payload.db.name,\n        emailAdapter: payload.email?.name || null,\n        uploadAdapters: payload.config.upload.adapters,\n      }\n    }\n\n    if (process.env.PAYLOAD_TELEMETRY_DEBUG) {\n      payload.logger.info({\n        event: { ...baseEvent, ...event, packageJSONPath },\n        msg: 'Telemetry Event',\n      })\n      return\n    }\n\n    if (payload.config.telemetry !== false) {\n      await fetch('https://telemetry.payloadcms.com/events', {\n        body: JSON.stringify({ ...baseEvent, ...event }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        method: 'post',\n      })\n    }\n  } catch (_) {\n    // Eat any errors in sending telemetry event\n  }\n}\n\n/**\n * This is a quasi-persistent identifier used to dedupe recurring events. It's\n * generated from random data and completely anonymous.\n */\nconst getEnvID = (): string => {\n  const conf = new Conf()\n  const ENV_ID = 'envID'\n\n  const val = conf.get(ENV_ID)\n  if (val) {\n    return val as string\n  }\n\n  const generated = randomBytes(32).toString('hex')\n  conf.set(ENV_ID, generated)\n  return generated\n}\n\nconst getProjectID = (payload: Payload, packageJSON: PackageJSON): string => {\n  const projectID =\n    getGitID(payload) ||\n    getPackageJSONID(payload, packageJSON) ||\n    payload.config.serverURL ||\n    process.cwd()\n  return oneWayHash(projectID, payload.secret)\n}\n\nconst getGitID = (payload: Payload) => {\n  try {\n    const originBuffer = execSync('git config --local --get remote.origin.url', {\n      stdio: 'pipe',\n      timeout: 1000,\n    })\n\n    return oneWayHash(String(originBuffer).trim(), payload.secret)\n  } catch (_) {\n    return null\n  }\n}\n\nconst getPackageJSON = async (): Promise<{\n  packageJSON?: PackageJSON\n  packageJSONPath: string\n}> => {\n  let packageJSONPath = path.resolve(process.cwd(), 'package.json')\n\n  if (!fs.existsSync(packageJSONPath)) {\n    // Old logic\n    const filename = fileURLToPath(import.meta.url)\n    const dirname = path.dirname(filename)\n    packageJSONPath = await findUp('package.json', { cwd: dirname })\n    const jsonContent: PackageJSON = JSON.parse(fs.readFileSync(packageJSONPath, 'utf-8'))\n    return { packageJSON: jsonContent, packageJSONPath }\n  }\n\n  const packageJSON: PackageJSON = JSON.parse(fs.readFileSync(packageJSONPath, 'utf-8'))\n  return { packageJSON, packageJSONPath }\n}\n\nconst getPackageJSONID = (payload: Payload, packageJSON: PackageJSON): string => {\n  return oneWayHash(packageJSON.name, payload.secret)\n}\n\nexport const getPayloadVersion = (packageJSON: PackageJSON): string => {\n  return packageJSON?.dependencies?.payload ?? ''\n}\n\nexport const getLocalizationInfo = (\n  payload: Payload,\n): Pick<BaseEvent, 'locales' | 'localizationDefaultLocale' | 'localizationEnabled'> => {\n  if (!payload.config.localization) {\n    return {\n      locales: [],\n      localizationDefaultLocale: null,\n      localizationEnabled: false,\n    }\n  }\n\n  return {\n    locales: payload.config.localization.localeCodes,\n    localizationDefaultLocale: payload.config.localization.defaultLocale,\n    localizationEnabled: true,\n  }\n}\n"],"names":["execSync","ciInfo","Conf","randomBytes","findUp","fs","path","fileURLToPath","oneWayHash","baseEvent","sendEvent","event","payload","packageJSON","packageJSONPath","getPackageJSON","ciName","isCI","name","envID","getEnvID","nodeEnv","process","env","NODE_ENV","nodeVersion","version","payloadVersion","getPayloadVersion","projectID","getProjectID","getLocalizationInfo","dbAdapter","db","emailAdapter","email","uploadAdapters","config","upload","adapters","PAYLOAD_TELEMETRY_DEBUG","logger","info","msg","telemetry","fetch","body","JSON","stringify","headers","method","_","conf","ENV_ID","val","get","generated","toString","set","getGitID","getPackageJSONID","serverURL","cwd","secret","originBuffer","stdio","timeout","String","trim","resolve","existsSync","filename","url","dirname","jsonContent","parse","readFileSync","dependencies","localization","locales","localizationDefaultLocale","localizationEnabled","localeCodes","defaultLocale"],"mappings":"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"}