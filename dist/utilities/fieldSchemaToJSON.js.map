{"version":3,"sources":["../../src/utilities/fieldSchemaToJSON.ts"],"sourcesContent":["import type { FieldTypes } from '../admin/forms/FieldTypes.js'\nimport type { ClientFieldConfig } from '../fields/config/client.js'\n\nexport type FieldSchemaJSON = {\n  blocks?: FieldSchemaJSON // TODO: conditionally add based on `type`\n  fields?: FieldSchemaJSON // TODO: conditionally add based on `type`\n  hasMany?: boolean // TODO: conditionally add based on `type`\n  name: string\n  relationTo?: string // TODO: conditionally add based on `type`\n  slug?: string // TODO: conditionally add based on `type`\n  type: keyof FieldTypes\n}[]\n\nexport const fieldSchemaToJSON = (fields: ClientFieldConfig[]): FieldSchemaJSON => {\n  return fields.reduce((acc, field) => {\n    let result = acc\n\n    switch (field.type) {\n      case 'group':\n        acc.push({\n          // @ts-expect-error\n          name: field.name,\n          type: field.type,\n          // @ts-expect-error\n          fields: fieldSchemaToJSON(field.fields),\n        })\n\n        break\n\n      case 'array':\n        acc.push({\n          // @ts-expect-error\n          name: field.name,\n          type: field.type,\n          fields: fieldSchemaToJSON([\n            // @ts-expect-error\n            ...field.fields,\n            {\n              name: 'id',\n              type: 'text',\n            },\n          ]),\n        })\n\n        break\n\n      case 'blocks':\n        acc.push({\n          // @ts-expect-error\n          name: field.name,\n          type: field.type,\n          // @ts-expect-error\n          blocks: field.blocks.reduce((acc, block) => {\n            acc[block.slug] = {\n              fields: fieldSchemaToJSON([\n                ...block.fields,\n                {\n                  name: 'id',\n                  type: 'text',\n                },\n              ]),\n            }\n\n            return acc\n          }, {}),\n        })\n\n        break\n\n      case 'row':\n      case 'collapsible':\n        // @ts-expect-error\n        result = result.concat(fieldSchemaToJSON(field.fields))\n        break\n\n      case 'tabs': {\n        let tabFields = []\n\n        // @ts-expect-error\n        field.tabs.forEach((tab) => {\n          if ('name' in tab) {\n            tabFields.push({\n              name: tab.name,\n              type: field.type,\n              fields: fieldSchemaToJSON(tab.fields),\n            })\n            return\n          }\n\n          tabFields = tabFields.concat(fieldSchemaToJSON(tab.fields))\n        })\n\n        result = result.concat(tabFields)\n\n        break\n      }\n\n      case 'relationship':\n      case 'upload':\n        acc.push({\n          // @ts-expect-error\n          name: field.name,\n          type: field.type,\n          hasMany: 'hasMany' in field ? Boolean(field.hasMany) : false, // TODO: type this\n          // @ts-expect-error\n          relationTo: field.relationTo,\n        })\n\n        break\n\n      default:\n        if ('name' in field) {\n          acc.push({\n            name: field.name,\n            type: field.type,\n          })\n        }\n    }\n\n    return result\n  }, [])\n}\n"],"names":["fieldSchemaToJSON","fields","reduce","acc","field","result","type","push","name","blocks","block","slug","concat","tabFields","tabs","forEach","tab","hasMany","Boolean","relationTo"],"mappings":"AAaA,OAAO,MAAMA,oBAAoB,CAACC;IAChC,OAAOA,OAAOC,MAAM,CAAC,CAACC,KAAKC;QACzB,IAAIC,SAASF;QAEb,OAAQC,MAAME,IAAI;YAChB,KAAK;gBACHH,IAAII,IAAI,CAAC;oBACP,mBAAmB;oBACnBC,MAAMJ,MAAMI,IAAI;oBAChBF,MAAMF,MAAME,IAAI;oBAChB,mBAAmB;oBACnBL,QAAQD,kBAAkBI,MAAMH,MAAM;gBACxC;gBAEA;YAEF,KAAK;gBACHE,IAAII,IAAI,CAAC;oBACP,mBAAmB;oBACnBC,MAAMJ,MAAMI,IAAI;oBAChBF,MAAMF,MAAME,IAAI;oBAChBL,QAAQD,kBAAkB;wBACxB,mBAAmB;2BAChBI,MAAMH,MAAM;wBACf;4BACEO,MAAM;4BACNF,MAAM;wBACR;qBACD;gBACH;gBAEA;YAEF,KAAK;gBACHH,IAAII,IAAI,CAAC;oBACP,mBAAmB;oBACnBC,MAAMJ,MAAMI,IAAI;oBAChBF,MAAMF,MAAME,IAAI;oBAChB,mBAAmB;oBACnBG,QAAQL,MAAMK,MAAM,CAACP,MAAM,CAAC,CAACC,KAAKO;wBAChCP,GAAG,CAACO,MAAMC,IAAI,CAAC,GAAG;4BAChBV,QAAQD,kBAAkB;mCACrBU,MAAMT,MAAM;gCACf;oCACEO,MAAM;oCACNF,MAAM;gCACR;6BACD;wBACH;wBAEA,OAAOH;oBACT,GAAG,CAAC;gBACN;gBAEA;YAEF,KAAK;YACL,KAAK;gBACH,mBAAmB;gBACnBE,SAASA,OAAOO,MAAM,CAACZ,kBAAkBI,MAAMH,MAAM;gBACrD;YAEF,KAAK;gBAAQ;oBACX,IAAIY,YAAY,EAAE;oBAElB,mBAAmB;oBACnBT,MAAMU,IAAI,CAACC,OAAO,CAAC,CAACC;wBAClB,IAAI,UAAUA,KAAK;4BACjBH,UAAUN,IAAI,CAAC;gCACbC,MAAMQ,IAAIR,IAAI;gCACdF,MAAMF,MAAME,IAAI;gCAChBL,QAAQD,kBAAkBgB,IAAIf,MAAM;4BACtC;4BACA;wBACF;wBAEAY,YAAYA,UAAUD,MAAM,CAACZ,kBAAkBgB,IAAIf,MAAM;oBAC3D;oBAEAI,SAASA,OAAOO,MAAM,CAACC;oBAEvB;gBACF;YAEA,KAAK;YACL,KAAK;gBACHV,IAAII,IAAI,CAAC;oBACP,mBAAmB;oBACnBC,MAAMJ,MAAMI,IAAI;oBAChBF,MAAMF,MAAME,IAAI;oBAChBW,SAAS,aAAab,QAAQc,QAAQd,MAAMa,OAAO,IAAI;oBACvD,mBAAmB;oBACnBE,YAAYf,MAAMe,UAAU;gBAC9B;gBAEA;YAEF;gBACE,IAAI,UAAUf,OAAO;oBACnBD,IAAII,IAAI,CAAC;wBACPC,MAAMJ,MAAMI,IAAI;wBAChBF,MAAMF,MAAME,IAAI;oBAClB;gBACF;QACJ;QAEA,OAAOD;IACT,GAAG,EAAE;AACP,EAAC"}