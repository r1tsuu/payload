{"version":3,"sources":["../../src/utilities/configToJSONSchema.spec.ts"],"sourcesContent":["import type { Config } from '../config/types.js'\n\nimport { sanitizeConfig } from '../config/sanitize.js'\nimport { configToJSONSchema } from './configToJSONSchema.js'\nimport { JSONSchema4 } from 'json-schema'\n\ndescribe('configToJSONSchema', () => {\n  it('should handle optional arrays with required fields', async () => {\n    // @ts-expect-error\n    const config: Config = {\n      collections: [\n        {\n          fields: [\n            {\n              name: 'someRequiredField',\n              type: 'array',\n              fields: [\n                {\n                  name: 'someRequiredField',\n                  required: true,\n                  type: 'text',\n                },\n              ],\n            },\n          ],\n          slug: 'test',\n          timestamps: false,\n        },\n      ],\n    }\n\n    const sanitizedConfig = await sanitizeConfig(config)\n    const schema = configToJSONSchema(sanitizedConfig, 'text')\n\n    expect(schema?.definitions?.test).toStrictEqual({\n      additionalProperties: false,\n      properties: {\n        id: {\n          type: 'string',\n        },\n        someRequiredField: {\n          items: {\n            additionalProperties: false,\n            properties: {\n              id: {\n                type: ['string', 'null'],\n              },\n              someRequiredField: {\n                type: 'string',\n              },\n            },\n            required: ['someRequiredField'],\n            type: 'object',\n          },\n          type: ['array', 'null'],\n        },\n      },\n      required: ['id'],\n      title: 'Test',\n      type: 'object',\n    })\n  })\n\n  it('should handle tabs and named tabs with required fields', async () => {\n    // @ts-expect-error\n    const config: Config = {\n      collections: [\n        {\n          fields: [\n            {\n              type: 'tabs',\n              tabs: [\n                {\n                  label: 'unnamedTab',\n                  fields: [\n                    {\n                      type: 'text',\n                      name: 'fieldInUnnamedTab',\n                    },\n                  ],\n                },\n                {\n                  label: 'namedTab',\n                  name: 'namedTab',\n                  fields: [\n                    {\n                      type: 'text',\n                      name: 'fieldInNamedTab',\n                    },\n                  ],\n                },\n                {\n                  label: 'namedTabWithRequired',\n                  name: 'namedTabWithRequired',\n                  fields: [\n                    {\n                      type: 'text',\n                      name: 'fieldInNamedTab',\n                      required: true,\n                    },\n                  ],\n                },\n              ],\n            },\n          ],\n          slug: 'test',\n          timestamps: false,\n        },\n      ],\n    }\n\n    const sanitizedConfig = await sanitizeConfig(config)\n    const schema = configToJSONSchema(sanitizedConfig, 'text')\n\n    expect(schema?.definitions?.test).toStrictEqual({\n      additionalProperties: false,\n      properties: {\n        id: {\n          type: 'string',\n        },\n        fieldInUnnamedTab: {\n          type: ['string', 'null'],\n        },\n        namedTab: {\n          additionalProperties: false,\n          type: 'object',\n          properties: {\n            fieldInNamedTab: {\n              type: ['string', 'null'],\n            },\n          },\n          required: [],\n        },\n        namedTabWithRequired: {\n          additionalProperties: false,\n          type: 'object',\n          properties: {\n            fieldInNamedTab: {\n              type: 'string',\n            },\n          },\n          required: ['fieldInNamedTab'],\n        },\n      },\n      required: ['id', 'namedTabWithRequired'],\n      title: 'Test',\n      type: 'object',\n    })\n  })\n\n  it('should handle custom typescript schema and JSON field schema', async () => {\n    const customSchema: JSONSchema4 = {\n      type: 'object',\n      properties: {\n        id: {\n          type: 'number',\n        },\n        required: ['id'],\n      },\n    }\n\n    // @ts-expect-error\n    const config: Config = {\n      collections: [\n        {\n          fields: [\n            {\n              type: 'text',\n              name: 'withCustom',\n              typescriptSchema: customSchema,\n            },\n            {\n              type: 'json',\n              name: 'jsonWithSchema',\n              jsonSchema: {\n                uri: 'a://b/foo.json',\n                fileMatch: ['a://b/foo.json'],\n                schema: customSchema,\n              },\n            },\n          ],\n          slug: 'test',\n          timestamps: false,\n        },\n      ],\n    }\n\n    const sanitizedConfig = await sanitizeConfig(config)\n    const schema = configToJSONSchema(sanitizedConfig, 'text')\n\n    expect(schema?.definitions?.test).toStrictEqual({\n      additionalProperties: false,\n      properties: {\n        id: {\n          type: 'string',\n        },\n        withCustom: customSchema,\n        jsonWithSchema: customSchema,\n      },\n      required: ['id'],\n      title: 'Test',\n      type: 'object',\n    })\n  })\n})\n"],"names":["sanitizeConfig","configToJSONSchema","describe","it","config","collections","fields","name","type","required","slug","timestamps","sanitizedConfig","schema","expect","definitions","test","toStrictEqual","additionalProperties","properties","id","someRequiredField","items","title","tabs","label","fieldInUnnamedTab","namedTab","fieldInNamedTab","namedTabWithRequired","customSchema","typescriptSchema","jsonSchema","uri","fileMatch","withCustom","jsonWithSchema"],"mappings":"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"}