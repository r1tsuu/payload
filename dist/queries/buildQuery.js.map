{"version":3,"sources":["../../src/queries/buildQuery.ts"],"sourcesContent":["import type { SQL } from 'drizzle-orm'\nimport type { PgTableWithColumns } from 'drizzle-orm/pg-core'\nimport type { Field, Where } from 'payload'\n\nimport { asc, desc } from 'drizzle-orm'\n\nimport type { GenericColumn, GenericTable, PostgresAdapter } from '../types.js'\n\nimport { getTableColumnFromPath } from './getTableColumnFromPath.js'\nimport { parseParams } from './parseParams.js'\n\nexport type BuildQueryJoins = Record<string, SQL>\n\nexport type BuildQueryJoinAliases = {\n  condition: SQL\n  table: GenericTable | PgTableWithColumns<any>\n}[]\n\ntype BuildQueryArgs = {\n  adapter: PostgresAdapter\n  fields: Field[]\n  locale?: string\n  sort?: string\n  tableName: string\n  where: Where\n}\n\ntype Result = {\n  joins: BuildQueryJoinAliases\n  orderBy: {\n    column: GenericColumn\n    order: typeof asc | typeof desc\n  }\n  selectFields: Record<string, GenericColumn>\n  where: SQL\n}\nconst buildQuery = async function buildQuery({\n  adapter,\n  fields,\n  locale,\n  sort,\n  tableName,\n  where: incomingWhere,\n}: BuildQueryArgs): Promise<Result> {\n  const selectFields: Record<string, GenericColumn> = {\n    id: adapter.tables[tableName].id,\n  }\n  const joins: BuildQueryJoinAliases = []\n\n  const orderBy: Result['orderBy'] = {\n    column: null,\n    order: null,\n  }\n\n  if (sort) {\n    let sortPath\n\n    if (sort[0] === '-') {\n      sortPath = sort.substring(1)\n      orderBy.order = desc\n    } else {\n      sortPath = sort\n      orderBy.order = asc\n    }\n\n    try {\n      const { columnName: sortTableColumnName, table: sortTable } = getTableColumnFromPath({\n        adapter,\n        collectionPath: sortPath,\n        fields,\n        joins,\n        locale,\n        pathSegments: sortPath.replace(/__/g, '.').split('.'),\n        selectFields,\n        tableName,\n        value: sortPath,\n      })\n      orderBy.column = sortTable?.[sortTableColumnName]\n    } catch (err) {\n      // continue\n    }\n  }\n\n  if (!orderBy?.column) {\n    orderBy.order = desc\n    const createdAt = adapter.tables[tableName]?.createdAt\n\n    if (createdAt) {\n      orderBy.column = createdAt\n    } else {\n      orderBy.column = adapter.tables[tableName].id\n    }\n  }\n\n  if (orderBy.column) {\n    selectFields.sort = orderBy.column\n  }\n\n  let where: SQL\n\n  if (incomingWhere && Object.keys(incomingWhere).length > 0) {\n    where = await parseParams({\n      adapter,\n      fields,\n      joins,\n      locale,\n      selectFields,\n      tableName,\n      where: incomingWhere,\n    })\n  }\n\n  return {\n    joins,\n    orderBy,\n    selectFields,\n    where,\n  }\n}\n\nexport default buildQuery\n"],"names":["asc","desc","getTableColumnFromPath","parseParams","buildQuery","adapter","fields","locale","sort","tableName","where","incomingWhere","selectFields","id","tables","joins","orderBy","column","order","sortPath","substring","columnName","sortTableColumnName","table","sortTable","collectionPath","pathSegments","replace","split","value","err","createdAt","Object","keys","length"],"mappings":"AAIA,SAASA,GAAG,EAAEC,IAAI,QAAQ,cAAa;AAIvC,SAASC,sBAAsB,QAAQ,8BAA6B;AACpE,SAASC,WAAW,QAAQ,mBAAkB;AA2B9C,MAAMC,aAAa,eAAeA,WAAW,EAC3CC,OAAO,EACPC,MAAM,EACNC,MAAM,EACNC,IAAI,EACJC,SAAS,EACTC,OAAOC,aAAa,EACL;IACf,MAAMC,eAA8C;QAClDC,IAAIR,QAAQS,MAAM,CAACL,UAAU,CAACI,EAAE;IAClC;IACA,MAAME,QAA+B,EAAE;IAEvC,MAAMC,UAA6B;QACjCC,QAAQ;QACRC,OAAO;IACT;IAEA,IAAIV,MAAM;QACR,IAAIW;QAEJ,IAAIX,IAAI,CAAC,EAAE,KAAK,KAAK;YACnBW,WAAWX,KAAKY,SAAS,CAAC;YAC1BJ,QAAQE,KAAK,GAAGjB;QAClB,OAAO;YACLkB,WAAWX;YACXQ,QAAQE,KAAK,GAAGlB;QAClB;QAEA,IAAI;YACF,MAAM,EAAEqB,YAAYC,mBAAmB,EAAEC,OAAOC,SAAS,EAAE,GAAGtB,uBAAuB;gBACnFG;gBACAoB,gBAAgBN;gBAChBb;gBACAS;gBACAR;gBACAmB,cAAcP,SAASQ,OAAO,CAAC,OAAO,KAAKC,KAAK,CAAC;gBACjDhB;gBACAH;gBACAoB,OAAOV;YACT;YACAH,QAAQC,MAAM,GAAGO,WAAW,CAACF,oBAAoB;QACnD,EAAE,OAAOQ,KAAK;QACZ,WAAW;QACb;IACF;IAEA,IAAI,CAACd,SAASC,QAAQ;QACpBD,QAAQE,KAAK,GAAGjB;QAChB,MAAM8B,YAAY1B,QAAQS,MAAM,CAACL,UAAU,EAAEsB;QAE7C,IAAIA,WAAW;YACbf,QAAQC,MAAM,GAAGc;QACnB,OAAO;YACLf,QAAQC,MAAM,GAAGZ,QAAQS,MAAM,CAACL,UAAU,CAACI,EAAE;QAC/C;IACF;IAEA,IAAIG,QAAQC,MAAM,EAAE;QAClBL,aAAaJ,IAAI,GAAGQ,QAAQC,MAAM;IACpC;IAEA,IAAIP;IAEJ,IAAIC,iBAAiBqB,OAAOC,IAAI,CAACtB,eAAeuB,MAAM,GAAG,GAAG;QAC1DxB,QAAQ,MAAMP,YAAY;YACxBE;YACAC;YACAS;YACAR;YACAK;YACAH;YACAC,OAAOC;QACT;IACF;IAEA,OAAO;QACLI;QACAC;QACAJ;QACAF;IACF;AACF;AAEA,eAAeN,WAAU"}