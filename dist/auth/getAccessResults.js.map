{"version":3,"sources":["../../src/auth/getAccessResults.ts"],"sourcesContent":["import type { AllOperations, PayloadRequestWithData } from '../types/index.js'\nimport type { Permissions } from './types.js'\n\nimport { getEntityPolicies } from '../utilities/getEntityPolicies.js'\nimport isolateObjectProperty from '../utilities/isolateObjectProperty.js'\n\ntype GetAccessResultsArgs = {\n  req: PayloadRequestWithData\n}\nexport async function getAccessResults({ req }: GetAccessResultsArgs): Promise<Permissions> {\n  const results = {} as Permissions\n  const { payload, user } = req\n\n  const isLoggedIn = !!user\n  const userCollectionConfig =\n    user && user.collection\n      ? payload.config.collections.find((collection) => collection.slug === user.collection)\n      : null\n\n  if (userCollectionConfig && payload.config.admin.user === user.collection) {\n    results.canAccessAdmin = userCollectionConfig.access.admin\n      ? await userCollectionConfig.access.admin({ req })\n      : isLoggedIn\n  } else {\n    results.canAccessAdmin = false\n  }\n\n  await Promise.all(\n    payload.config.collections.map(async (collection) => {\n      const collectionOperations: AllOperations[] = ['create', 'read', 'update', 'delete']\n\n      if (\n        collection.auth &&\n        typeof collection.auth.maxLoginAttempts !== 'undefined' &&\n        collection.auth.maxLoginAttempts !== 0\n      ) {\n        collectionOperations.push('unlock')\n      }\n\n      if (collection.versions) {\n        collectionOperations.push('readVersions')\n      }\n\n      const collectionPolicy = await getEntityPolicies({\n        type: 'collection',\n        entity: collection,\n        operations: collectionOperations,\n        // Do not re-use our existing req object, as we need a new req.transactionID. Cannot re-use our existing one, as this is run in parallel (Promise.all above) which is\n        // not supported on the same transaction ID. Not passing a transaction ID here creates a new transaction ID.\n        req: isolateObjectProperty(req, 'transactionID'),\n      })\n      results.collections = {\n        ...results.collections,\n        [collection.slug]: collectionPolicy,\n      }\n    }),\n  )\n\n  await Promise.all(\n    payload.config.globals.map(async (global) => {\n      const globalOperations: AllOperations[] = ['read', 'update']\n\n      if (global.versions) {\n        globalOperations.push('readVersions')\n      }\n\n      const globalPolicy = await getEntityPolicies({\n        type: 'global',\n        entity: global,\n        operations: globalOperations,\n        // Do not re-use our existing req object, as we need a new req.transactionID. Cannot re-use our existing one, as this is run in parallel (Promise.all above) which is\n        // not supported on the same transaction ID. Not passing a transaction ID here creates a new transaction ID.\n        req: isolateObjectProperty(req, 'transactionID'),\n      })\n      results.globals = {\n        ...results.globals,\n        [global.slug]: globalPolicy,\n      }\n    }),\n  )\n\n  return results\n}\n"],"names":["getEntityPolicies","isolateObjectProperty","getAccessResults","req","results","payload","user","isLoggedIn","userCollectionConfig","collection","config","collections","find","slug","admin","canAccessAdmin","access","Promise","all","map","collectionOperations","auth","maxLoginAttempts","push","versions","collectionPolicy","type","entity","operations","globals","global","globalOperations","globalPolicy"],"mappings":"AAGA,SAASA,iBAAiB,QAAQ,oCAAmC;AACrE,OAAOC,2BAA2B,wCAAuC;AAKzE,OAAO,eAAeC,iBAAiB,EAAEC,GAAG,EAAwB;IAClE,MAAMC,UAAU,CAAC;IACjB,MAAM,EAAEC,OAAO,EAAEC,IAAI,EAAE,GAAGH;IAE1B,MAAMI,aAAa,CAAC,CAACD;IACrB,MAAME,uBACJF,QAAQA,KAAKG,UAAU,GACnBJ,QAAQK,MAAM,CAACC,WAAW,CAACC,IAAI,CAAC,CAACH,aAAeA,WAAWI,IAAI,KAAKP,KAAKG,UAAU,IACnF;IAEN,IAAID,wBAAwBH,QAAQK,MAAM,CAACI,KAAK,CAACR,IAAI,KAAKA,KAAKG,UAAU,EAAE;QACzEL,QAAQW,cAAc,GAAGP,qBAAqBQ,MAAM,CAACF,KAAK,GACtD,MAAMN,qBAAqBQ,MAAM,CAACF,KAAK,CAAC;YAAEX;QAAI,KAC9CI;IACN,OAAO;QACLH,QAAQW,cAAc,GAAG;IAC3B;IAEA,MAAME,QAAQC,GAAG,CACfb,QAAQK,MAAM,CAACC,WAAW,CAACQ,GAAG,CAAC,OAAOV;QACpC,MAAMW,uBAAwC;YAAC;YAAU;YAAQ;YAAU;SAAS;QAEpF,IACEX,WAAWY,IAAI,IACf,OAAOZ,WAAWY,IAAI,CAACC,gBAAgB,KAAK,eAC5Cb,WAAWY,IAAI,CAACC,gBAAgB,KAAK,GACrC;YACAF,qBAAqBG,IAAI,CAAC;QAC5B;QAEA,IAAId,WAAWe,QAAQ,EAAE;YACvBJ,qBAAqBG,IAAI,CAAC;QAC5B;QAEA,MAAME,mBAAmB,MAAMzB,kBAAkB;YAC/C0B,MAAM;YACNC,QAAQlB;YACRmB,YAAYR;YACZ,qKAAqK;YACrK,4GAA4G;YAC5GjB,KAAKF,sBAAsBE,KAAK;QAClC;QACAC,QAAQO,WAAW,GAAG;YACpB,GAAGP,QAAQO,WAAW;YACtB,CAACF,WAAWI,IAAI,CAAC,EAAEY;QACrB;IACF;IAGF,MAAMR,QAAQC,GAAG,CACfb,QAAQK,MAAM,CAACmB,OAAO,CAACV,GAAG,CAAC,OAAOW;QAChC,MAAMC,mBAAoC;YAAC;YAAQ;SAAS;QAE5D,IAAID,OAAON,QAAQ,EAAE;YACnBO,iBAAiBR,IAAI,CAAC;QACxB;QAEA,MAAMS,eAAe,MAAMhC,kBAAkB;YAC3C0B,MAAM;YACNC,QAAQG;YACRF,YAAYG;YACZ,qKAAqK;YACrK,4GAA4G;YAC5G5B,KAAKF,sBAAsBE,KAAK;QAClC;QACAC,QAAQyB,OAAO,GAAG;YAChB,GAAGzB,QAAQyB,OAAO;YAClB,CAACC,OAAOjB,IAAI,CAAC,EAAEmB;QACjB;IACF;IAGF,OAAO5B;AACT"}