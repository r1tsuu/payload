{"version":3,"sources":["../../../src/auth/operations/unlock.ts"],"sourcesContent":["import httpStatus from 'http-status'\n\nimport type { Collection } from '../../collections/config/types.js'\nimport type { PayloadRequestWithData } from '../../types/index.js'\n\nimport { APIError } from '../../errors/index.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport executeAccess from '../executeAccess.js'\nimport { resetLoginAttempts } from '../strategies/local/resetLoginAttempts.js'\n\nexport type Args = {\n  collection: Collection\n  data: {\n    email: string\n  }\n  overrideAccess?: boolean\n  req: PayloadRequestWithData\n}\n\nexport const unlockOperation = async (args: Args): Promise<boolean> => {\n  if (!Object.prototype.hasOwnProperty.call(args.data, 'email')) {\n    throw new APIError('Missing email.', httpStatus.BAD_REQUEST)\n  }\n\n  const {\n    collection: { config: collectionConfig },\n    overrideAccess,\n    req: { locale },\n    req,\n  } = args\n\n  try {\n    const shouldCommit = await initTransaction(req)\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    if (!overrideAccess) {\n      await executeAccess({ req }, collectionConfig.access.unlock)\n    }\n\n    const options = { ...args }\n\n    const { data } = options\n\n    // /////////////////////////////////////\n    // Unlock\n    // /////////////////////////////////////\n\n    if (!data.email) {\n      throw new APIError('Missing email.', httpStatus.BAD_REQUEST)\n    }\n\n    const user = await req.payload.db.findOne({\n      collection: collectionConfig.slug,\n      locale,\n      req,\n      where: { email: { equals: data.email.toLowerCase() } },\n    })\n\n    let result\n\n    if (user) {\n      await resetLoginAttempts({\n        collection: collectionConfig,\n        doc: user,\n        payload: req.payload,\n        req,\n      })\n      result = true\n    } else {\n      result = null\n    }\n\n    if (shouldCommit) await commitTransaction(req)\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n\nexport default unlockOperation\n"],"names":["httpStatus","APIError","commitTransaction","initTransaction","killTransaction","executeAccess","resetLoginAttempts","unlockOperation","args","Object","prototype","hasOwnProperty","call","data","BAD_REQUEST","collection","config","collectionConfig","overrideAccess","req","locale","shouldCommit","access","unlock","options","email","user","payload","db","findOne","slug","where","equals","toLowerCase","result","doc","error"],"mappings":"AAAA,OAAOA,gBAAgB,cAAa;AAKpC,SAASC,QAAQ,QAAQ,wBAAuB;AAChD,SAASC,iBAAiB,QAAQ,uCAAsC;AACxE,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,eAAe,QAAQ,qCAAoC;AACpE,OAAOC,mBAAmB,sBAAqB;AAC/C,SAASC,kBAAkB,QAAQ,4CAA2C;AAW9E,OAAO,MAAMC,kBAAkB,OAAOC;IACpC,IAAI,CAACC,OAAOC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACJ,KAAKK,IAAI,EAAE,UAAU;QAC7D,MAAM,IAAIZ,SAAS,kBAAkBD,WAAWc,WAAW;IAC7D;IAEA,MAAM,EACJC,YAAY,EAAEC,QAAQC,gBAAgB,EAAE,EACxCC,cAAc,EACdC,KAAK,EAAEC,MAAM,EAAE,EACfD,GAAG,EACJ,GAAGX;IAEJ,IAAI;QACF,MAAMa,eAAe,MAAMlB,gBAAgBgB;QAE3C,wCAAwC;QACxC,SAAS;QACT,wCAAwC;QAExC,IAAI,CAACD,gBAAgB;YACnB,MAAMb,cAAc;gBAAEc;YAAI,GAAGF,iBAAiBK,MAAM,CAACC,MAAM;QAC7D;QAEA,MAAMC,UAAU;YAAE,GAAGhB,IAAI;QAAC;QAE1B,MAAM,EAAEK,IAAI,EAAE,GAAGW;QAEjB,wCAAwC;QACxC,SAAS;QACT,wCAAwC;QAExC,IAAI,CAACX,KAAKY,KAAK,EAAE;YACf,MAAM,IAAIxB,SAAS,kBAAkBD,WAAWc,WAAW;QAC7D;QAEA,MAAMY,OAAO,MAAMP,IAAIQ,OAAO,CAACC,EAAE,CAACC,OAAO,CAAC;YACxCd,YAAYE,iBAAiBa,IAAI;YACjCV;YACAD;YACAY,OAAO;gBAAEN,OAAO;oBAAEO,QAAQnB,KAAKY,KAAK,CAACQ,WAAW;gBAAG;YAAE;QACvD;QAEA,IAAIC;QAEJ,IAAIR,MAAM;YACR,MAAMpB,mBAAmB;gBACvBS,YAAYE;gBACZkB,KAAKT;gBACLC,SAASR,IAAIQ,OAAO;gBACpBR;YACF;YACAe,SAAS;QACX,OAAO;YACLA,SAAS;QACX;QAEA,IAAIb,cAAc,MAAMnB,kBAAkBiB;QAE1C,OAAOe;IACT,EAAE,OAAOE,OAAgB;QACvB,MAAMhC,gBAAgBe;QACtB,MAAMiB;IACR;AACF,EAAC;AAED,eAAe7B,gBAAe"}