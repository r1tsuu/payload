{"version":3,"sources":["../../../src/auth/operations/logout.ts"],"sourcesContent":["import httpStatus from 'http-status'\n\nimport type { Collection } from '../../collections/config/types.js'\nimport type { PayloadRequestWithData } from '../../types/index.js'\n\nimport { APIError } from '../../errors/index.js'\n\nexport type Arguments = {\n  collection: Collection\n  req: PayloadRequestWithData\n}\n\nexport const logoutOperation = async (incomingArgs: Arguments): Promise<boolean> => {\n  let args = incomingArgs\n  const {\n    collection: { config: collectionConfig },\n    req: { user },\n    req,\n  } = incomingArgs\n\n  if (!user) throw new APIError('No User', httpStatus.BAD_REQUEST)\n  if (user.collection !== collectionConfig.slug)\n    throw new APIError('Incorrect collection', httpStatus.FORBIDDEN)\n\n  await collectionConfig.hooks.afterLogout.reduce(async (priorHook, hook) => {\n    await priorHook\n\n    args =\n      (await hook({\n        collection: args.collection?.config,\n        context: req.context,\n        req,\n      })) || args\n  }, Promise.resolve())\n\n  return true\n}\n"],"names":["httpStatus","APIError","logoutOperation","incomingArgs","args","collection","config","collectionConfig","req","user","BAD_REQUEST","slug","FORBIDDEN","hooks","afterLogout","reduce","priorHook","hook","context","Promise","resolve"],"mappings":"AAAA,OAAOA,gBAAgB,cAAa;AAKpC,SAASC,QAAQ,QAAQ,wBAAuB;AAOhD,OAAO,MAAMC,kBAAkB,OAAOC;IACpC,IAAIC,OAAOD;IACX,MAAM,EACJE,YAAY,EAAEC,QAAQC,gBAAgB,EAAE,EACxCC,KAAK,EAAEC,IAAI,EAAE,EACbD,GAAG,EACJ,GAAGL;IAEJ,IAAI,CAACM,MAAM,MAAM,IAAIR,SAAS,WAAWD,WAAWU,WAAW;IAC/D,IAAID,KAAKJ,UAAU,KAAKE,iBAAiBI,IAAI,EAC3C,MAAM,IAAIV,SAAS,wBAAwBD,WAAWY,SAAS;IAEjE,MAAML,iBAAiBM,KAAK,CAACC,WAAW,CAACC,MAAM,CAAC,OAAOC,WAAWC;QAChE,MAAMD;QAENZ,OACE,AAAC,MAAMa,KAAK;YACVZ,YAAYD,KAAKC,UAAU,EAAEC;YAC7BY,SAASV,IAAIU,OAAO;YACpBV;QACF,MAAOJ;IACX,GAAGe,QAAQC,OAAO;IAElB,OAAO;AACT,EAAC"}