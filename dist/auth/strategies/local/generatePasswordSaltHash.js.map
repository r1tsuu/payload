{"version":3,"sources":["../../../../src/auth/strategies/local/generatePasswordSaltHash.ts"],"sourcesContent":["import crypto from 'crypto'\n\nimport type { SanitizedCollectionConfig } from '../../../collections/config/types.js'\n\nimport { ValidationError } from '../../../errors/index.js'\n\nconst defaultPasswordValidator = (password: string): string | true => {\n  if (!password) return 'No password was given'\n  if (password.length < 3) return 'Password must be at least 3 characters'\n\n  return true\n}\n\nfunction randomBytes(): Promise<Buffer> {\n  return new Promise((resolve, reject) =>\n    crypto.randomBytes(32, (err, saltBuffer) => (err ? reject(err) : resolve(saltBuffer))),\n  )\n}\n\nfunction pbkdf2Promisified(password: string, salt: string): Promise<Buffer> {\n  return new Promise((resolve, reject) =>\n    crypto.pbkdf2(password, salt, 25000, 512, 'sha256', (err, hashRaw) =>\n      err ? reject(err) : resolve(hashRaw),\n    ),\n  )\n}\n\ntype Args = {\n  collection: SanitizedCollectionConfig\n  password: string\n}\n\nexport const generatePasswordSaltHash = async ({\n  collection,\n  password,\n}: Args): Promise<{ hash: string; salt: string }> => {\n  const validationResult = defaultPasswordValidator(password)\n\n  if (typeof validationResult === 'string') {\n    throw new ValidationError({\n      collection: collection?.slug,\n      errors: [{ field: 'password', message: validationResult }],\n    })\n  }\n\n  const saltBuffer = await randomBytes()\n  const salt = saltBuffer.toString('hex')\n\n  const hashRaw = await pbkdf2Promisified(password, salt)\n  const hash = hashRaw.toString('hex')\n\n  return { hash, salt }\n}\n"],"names":["crypto","ValidationError","defaultPasswordValidator","password","length","randomBytes","Promise","resolve","reject","err","saltBuffer","pbkdf2Promisified","salt","pbkdf2","hashRaw","generatePasswordSaltHash","collection","validationResult","slug","errors","field","message","toString","hash"],"mappings":"AAAA,OAAOA,YAAY,SAAQ;AAI3B,SAASC,eAAe,QAAQ,2BAA0B;AAE1D,MAAMC,2BAA2B,CAACC;IAChC,IAAI,CAACA,UAAU,OAAO;IACtB,IAAIA,SAASC,MAAM,GAAG,GAAG,OAAO;IAEhC,OAAO;AACT;AAEA,SAASC;IACP,OAAO,IAAIC,QAAQ,CAACC,SAASC,SAC3BR,OAAOK,WAAW,CAAC,IAAI,CAACI,KAAKC,aAAgBD,MAAMD,OAAOC,OAAOF,QAAQG;AAE7E;AAEA,SAASC,kBAAkBR,QAAgB,EAAES,IAAY;IACvD,OAAO,IAAIN,QAAQ,CAACC,SAASC,SAC3BR,OAAOa,MAAM,CAACV,UAAUS,MAAM,OAAO,KAAK,UAAU,CAACH,KAAKK,UACxDL,MAAMD,OAAOC,OAAOF,QAAQO;AAGlC;AAOA,OAAO,MAAMC,2BAA2B,OAAO,EAC7CC,UAAU,EACVb,QAAQ,EACH;IACL,MAAMc,mBAAmBf,yBAAyBC;IAElD,IAAI,OAAOc,qBAAqB,UAAU;QACxC,MAAM,IAAIhB,gBAAgB;YACxBe,YAAYA,YAAYE;YACxBC,QAAQ;gBAAC;oBAAEC,OAAO;oBAAYC,SAASJ;gBAAiB;aAAE;QAC5D;IACF;IAEA,MAAMP,aAAa,MAAML;IACzB,MAAMO,OAAOF,WAAWY,QAAQ,CAAC;IAEjC,MAAMR,UAAU,MAAMH,kBAAkBR,UAAUS;IAClD,MAAMW,OAAOT,QAAQQ,QAAQ,CAAC;IAE9B,OAAO;QAAEC;QAAMX;IAAK;AACtB,EAAC"}