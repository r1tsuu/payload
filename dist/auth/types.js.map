{"version":3,"sources":["../../src/auth/types.ts"],"sourcesContent":["import type { DeepRequired } from 'ts-essentials'\n\nimport type { Payload } from '../index.js'\nimport type { PayloadRequestWithData, Where } from '../types/index.js'\n\nexport type Permission = {\n  permission: boolean\n  where?: Record<string, unknown>\n}\n\nexport type FieldPermissions = {\n  blocks?: {\n    [blockSlug: string]: {\n      fields: {\n        [fieldName: string]: FieldPermissions\n      }\n    }\n  }\n  create: {\n    permission: boolean\n  }\n  fields?: {\n    [fieldName: string]: FieldPermissions\n  }\n  read: {\n    permission: boolean\n  }\n  update: {\n    permission: boolean\n  }\n}\n\nexport type CollectionPermission = {\n  create: Permission\n  delete: Permission\n  fields: {\n    [fieldName: string]: FieldPermissions\n  }\n  read: Permission\n  readVersions?: Permission\n  update: Permission\n}\n\nexport type GlobalPermission = {\n  fields: {\n    [fieldName: string]: FieldPermissions\n  }\n  read: Permission\n  readVersions?: Permission\n  update: Permission\n}\n\nexport type DocumentPermissions = CollectionPermission | GlobalPermission\nexport type Permissions = {\n  canAccessAdmin: boolean\n  collections: {\n    [collectionSlug: string]: CollectionPermission\n  }\n  globals?: {\n    [globalSlug: string]: GlobalPermission\n  }\n}\n\nexport type User = {\n  [key: string]: any // This NEEDS to be an any, otherwise it breaks the Omit for ClientUser below\n  collection: string\n  email: string\n  id: number | string\n}\n\n/**\n * `collection` is not available one the client. It's only available on the server (req.user)\n * On the client, you can access the collection via config.admin.user. Config can be accessed using the useConfig() hook\n */\nexport type ClientUser = Omit<User, 'collection'>\n\ntype GenerateVerifyEmailHTML = (args: {\n  req: PayloadRequestWithData\n  token: string\n  user: any\n}) => Promise<string> | string\ntype GenerateVerifyEmailSubject = (args: {\n  req: PayloadRequestWithData\n  token: string\n  user: any\n}) => Promise<string> | string\n\ntype GenerateForgotPasswordEmailHTML = (args?: {\n  req?: PayloadRequestWithData\n  token?: string\n  user?: unknown\n}) => Promise<string> | string\ntype GenerateForgotPasswordEmailSubject = (args?: {\n  req?: PayloadRequestWithData\n  token?: string\n  user?: any\n}) => Promise<string> | string\n\nexport type AuthStrategyFunctionArgs = {\n  headers: Request['headers']\n  isGraphQL?: boolean\n  payload: Payload\n}\n\nexport type AuthStrategyResult = {\n  responseHeaders?: Headers\n  user: User | null\n}\n\nexport type AuthStrategyFunction = (\n  args: AuthStrategyFunctionArgs,\n) => AuthStrategyResult | Promise<AuthStrategyResult>\nexport type AuthStrategy = {\n  authenticate: AuthStrategyFunction\n  name: string\n}\n\nexport interface IncomingAuthType {\n  cookies?: {\n    domain?: string\n    sameSite?: 'Lax' | 'None' | 'Strict' | boolean\n    secure?: boolean\n  }\n  depth?: number\n  disableLocalStrategy?: true\n  forgotPassword?: {\n    generateEmailHTML?: GenerateForgotPasswordEmailHTML\n    generateEmailSubject?: GenerateForgotPasswordEmailSubject\n  }\n  lockTime?: number\n  maxLoginAttempts?: number\n  removeTokenFromResponses?: true\n  strategies?: AuthStrategy[]\n  tokenExpiration?: number\n  useAPIKey?: boolean\n  verify?:\n    | {\n        generateEmailHTML?: GenerateVerifyEmailHTML\n        generateEmailSubject?: GenerateVerifyEmailSubject\n      }\n    | boolean\n}\n\nexport type VerifyConfig = {\n  generateEmailHTML?: GenerateVerifyEmailHTML\n  generateEmailSubject?: GenerateVerifyEmailSubject\n}\n\nexport interface Auth extends Omit<DeepRequired<IncomingAuthType>, 'forgotPassword' | 'verify'> {\n  forgotPassword?: {\n    generateEmailHTML?: GenerateForgotPasswordEmailHTML\n    generateEmailSubject?: GenerateForgotPasswordEmailSubject\n  }\n  verify?: VerifyConfig | boolean\n}\n\nexport function hasWhereAccessResult(result: Where | boolean): result is Where {\n  return result && typeof result === 'object'\n}\n"],"names":["hasWhereAccessResult","result"],"mappings":"AA4JA,OAAO,SAASA,qBAAqBC,MAAuB;IAC1D,OAAOA,UAAU,OAAOA,WAAW;AACrC"}