{"version":3,"sources":["../../src/auth/extractJWT.ts"],"sourcesContent":["import type { AuthStrategyFunctionArgs } from './index.js'\n\nimport { parseCookies } from '../utilities/parseCookies.js'\n\nexport const extractJWT = (args: AuthStrategyFunctionArgs): null | string => {\n  const { headers, payload } = args\n\n  const jwtFromHeader = headers.get('Authorization')\n  const origin = headers.get('Origin')\n\n  if (jwtFromHeader?.startsWith('JWT ')) {\n    return jwtFromHeader.replace('JWT ', '')\n  }\n  // allow RFC6750 OAuth 2.0 compliant Bearer tokens\n  // in addition to the payload default JWT format\n  if (jwtFromHeader?.startsWith('Bearer ')) {\n    return jwtFromHeader.replace('Bearer ', '')\n  }\n\n  const cookies = parseCookies(headers)\n  const tokenCookieName = `${payload.config.cookiePrefix}-token`\n  const cookieToken = cookies.get(tokenCookieName)\n\n  if (!cookieToken) {\n    return null\n  }\n\n  if (!origin || payload.config.csrf.length === 0 || payload.config.csrf.indexOf(origin) > -1) {\n    return cookieToken\n  }\n\n  return null\n}\n"],"names":["parseCookies","extractJWT","args","headers","payload","jwtFromHeader","get","origin","startsWith","replace","cookies","tokenCookieName","config","cookiePrefix","cookieToken","csrf","length","indexOf"],"mappings":"AAEA,SAASA,YAAY,QAAQ,+BAA8B;AAE3D,OAAO,MAAMC,aAAa,CAACC;IACzB,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAE,GAAGF;IAE7B,MAAMG,gBAAgBF,QAAQG,GAAG,CAAC;IAClC,MAAMC,SAASJ,QAAQG,GAAG,CAAC;IAE3B,IAAID,eAAeG,WAAW,SAAS;QACrC,OAAOH,cAAcI,OAAO,CAAC,QAAQ;IACvC;IACA,kDAAkD;IAClD,gDAAgD;IAChD,IAAIJ,eAAeG,WAAW,YAAY;QACxC,OAAOH,cAAcI,OAAO,CAAC,WAAW;IAC1C;IAEA,MAAMC,UAAUV,aAAaG;IAC7B,MAAMQ,kBAAkB,CAAC,EAAEP,QAAQQ,MAAM,CAACC,YAAY,CAAC,MAAM,CAAC;IAC9D,MAAMC,cAAcJ,QAAQJ,GAAG,CAACK;IAEhC,IAAI,CAACG,aAAa;QAChB,OAAO;IACT;IAEA,IAAI,CAACP,UAAUH,QAAQQ,MAAM,CAACG,IAAI,CAACC,MAAM,KAAK,KAAKZ,QAAQQ,MAAM,CAACG,IAAI,CAACE,OAAO,CAACV,UAAU,CAAC,GAAG;QAC3F,OAAOO;IACT;IAEA,OAAO;AACT,EAAC"}