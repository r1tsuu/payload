{"version":3,"sources":["../../src/schema/build.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport type { Relation } from 'drizzle-orm'\nimport type {\n  ForeignKeyBuilder,\n  IndexBuilder,\n  PgColumnBuilder,\n  PgTableWithColumns,\n  UniqueConstraintBuilder,\n} from 'drizzle-orm/pg-core'\nimport type { Field } from 'payload'\n\nimport { relations } from 'drizzle-orm'\nimport {\n  foreignKey,\n  index,\n  integer,\n  numeric,\n  serial,\n  timestamp,\n  unique,\n  varchar,\n} from 'drizzle-orm/pg-core'\nimport toSnakeCase from 'to-snake-case'\n\nimport type { GenericColumns, GenericTable, IDType, PostgresAdapter } from '../types.js'\n\nimport { createTableName } from './createTableName.js'\nimport { parentIDColumnMap } from './parentIDColumnMap.js'\nimport { setColumnID } from './setColumnID.js'\nimport { traverseFields } from './traverseFields.js'\n\nexport type BaseExtraConfig = Record<\n  string,\n  (cols: GenericColumns) => ForeignKeyBuilder | IndexBuilder | UniqueConstraintBuilder\n>\n\nexport type RelationMap = Map<string, { localized: boolean; target: string; type: 'many' | 'one' }>\n\ntype Args = {\n  adapter: PostgresAdapter\n  baseColumns?: Record<string, PgColumnBuilder>\n  baseExtraConfig?: BaseExtraConfig\n  buildNumbers?: boolean\n  buildRelationships?: boolean\n  disableNotNull: boolean\n  disableUnique: boolean\n  fields: Field[]\n  rootRelationsToBuild?: RelationMap\n  rootRelationships?: Set<string>\n  rootTableIDColType?: string\n  rootTableName?: string\n  tableName: string\n  timestamps?: boolean\n  versions: boolean\n}\n\ntype Result = {\n  hasManyNumberField: 'index' | boolean\n  hasManyTextField: 'index' | boolean\n  relationsToBuild: RelationMap\n}\n\nexport const buildTable = ({\n  adapter,\n  baseColumns = {},\n  baseExtraConfig = {},\n  disableNotNull,\n  disableUnique = false,\n  fields,\n  rootRelationsToBuild,\n  rootRelationships,\n  rootTableIDColType,\n  rootTableName: incomingRootTableName,\n  tableName,\n  timestamps,\n  versions,\n}: Args): Result => {\n  const isRoot = !incomingRootTableName\n  const rootTableName = incomingRootTableName || tableName\n  const columns: Record<string, PgColumnBuilder> = baseColumns\n  const indexes: Record<string, (cols: GenericColumns) => IndexBuilder> = {}\n\n  const localesColumns: Record<string, PgColumnBuilder> = {}\n  const localesIndexes: Record<string, (cols: GenericColumns) => IndexBuilder> = {}\n  let localesTable: GenericTable | PgTableWithColumns<any>\n  let textsTable: GenericTable | PgTableWithColumns<any>\n  let numbersTable: GenericTable | PgTableWithColumns<any>\n\n  // Relationships to the base collection\n  const relationships: Set<string> = rootRelationships || new Set()\n\n  let relationshipsTable: GenericTable | PgTableWithColumns<any>\n\n  // Drizzle relations\n  const relationsToBuild: RelationMap = new Map()\n\n  const idColType: IDType = setColumnID({ adapter, columns, fields })\n\n  const {\n    hasLocalizedField,\n    hasLocalizedManyNumberField,\n    hasLocalizedManyTextField,\n    hasLocalizedRelationshipField,\n    hasManyNumberField,\n    hasManyTextField,\n  } = traverseFields({\n    adapter,\n    columns,\n    disableNotNull,\n    disableUnique,\n    fields,\n    indexes,\n    localesColumns,\n    localesIndexes,\n    newTableName: tableName,\n    parentTableName: tableName,\n    relationsToBuild,\n    relationships,\n    rootRelationsToBuild: rootRelationsToBuild || relationsToBuild,\n    rootTableIDColType: rootTableIDColType || idColType,\n    rootTableName,\n    versions,\n  })\n\n  // split the relationsToBuild by localized and non-localized\n  const localizedRelations = new Map()\n  const nonLocalizedRelations = new Map()\n\n  relationsToBuild.forEach(({ type, localized, target }, key) => {\n    const map = localized ? localizedRelations : nonLocalizedRelations\n    map.set(key, { type, target })\n  })\n\n  if (timestamps) {\n    columns.createdAt = timestamp('created_at', {\n      mode: 'string',\n      precision: 3,\n      withTimezone: true,\n    })\n      .defaultNow()\n      .notNull()\n    columns.updatedAt = timestamp('updated_at', {\n      mode: 'string',\n      precision: 3,\n      withTimezone: true,\n    })\n      .defaultNow()\n      .notNull()\n  }\n\n  const table = adapter.pgSchema.table(tableName, columns, (cols) => {\n    const extraConfig = Object.entries(baseExtraConfig).reduce((config, [key, func]) => {\n      config[key] = func(cols)\n      return config\n    }, {})\n\n    const result = Object.entries(indexes).reduce((acc, [colName, func]) => {\n      acc[colName] = func(cols)\n      return acc\n    }, extraConfig)\n\n    return result\n  })\n\n  adapter.tables[tableName] = table\n\n  if (hasLocalizedField || localizedRelations.size) {\n    const localeTableName = `${tableName}${adapter.localesSuffix}`\n    localesColumns.id = serial('id').primaryKey()\n    localesColumns._locale = adapter.enums.enum__locales('_locale').notNull()\n    localesColumns._parentID = parentIDColumnMap[idColType]('_parent_id').notNull()\n\n    localesTable = adapter.pgSchema.table(localeTableName, localesColumns, (cols) => {\n      return Object.entries(localesIndexes).reduce(\n        (acc, [colName, func]) => {\n          acc[colName] = func(cols)\n          return acc\n        },\n        {\n          _localeParent: unique(`${localeTableName}_locale_parent_id_unique`).on(\n            cols._locale,\n            cols._parentID,\n          ),\n          _parentIdFk: foreignKey({\n            name: `${localeTableName}_parent_id_fk`,\n            columns: [cols._parentID],\n            foreignColumns: [table.id],\n          }).onDelete('cascade'),\n        },\n      )\n    })\n\n    adapter.tables[localeTableName] = localesTable\n\n    adapter.relations[`relations_${localeTableName}`] = relations(localesTable, ({ many, one }) => {\n      const result: Record<string, Relation<string>> = {}\n\n      result._parentID = one(table, {\n        fields: [localesTable._parentID],\n        references: [table.id],\n        // name the relationship by what the many() relationName is\n        relationName: '_locales',\n      })\n\n      localizedRelations.forEach(({ type, target }, key) => {\n        if (type === 'one') {\n          result[key] = one(adapter.tables[target], {\n            fields: [localesTable[key]],\n            references: [adapter.tables[target].id],\n            relationName: key,\n          })\n        }\n        if (type === 'many') {\n          result[key] = many(adapter.tables[target], {\n            relationName: key,\n          })\n        }\n      })\n\n      return result\n    })\n  }\n\n  if (isRoot) {\n    if (hasManyTextField) {\n      const textsTableName = `${rootTableName}_texts`\n      const columns: Record<string, PgColumnBuilder> = {\n        id: serial('id').primaryKey(),\n        order: integer('order').notNull(),\n        parent: parentIDColumnMap[idColType]('parent_id').notNull(),\n        path: varchar('path').notNull(),\n        text: varchar('text'),\n      }\n\n      if (hasLocalizedManyTextField) {\n        columns.locale = adapter.enums.enum__locales('locale')\n      }\n\n      textsTable = adapter.pgSchema.table(textsTableName, columns, (cols) => {\n        const config: Record<string, ForeignKeyBuilder | IndexBuilder> = {\n          orderParentIdx: index(`${textsTableName}_order_parent_idx`).on(cols.order, cols.parent),\n          parentFk: foreignKey({\n            name: `${textsTableName}_parent_fk`,\n            columns: [cols.parent],\n            foreignColumns: [table.id],\n          }).onDelete('cascade'),\n        }\n\n        if (hasManyTextField === 'index') {\n          config.text_idx = index(`${textsTableName}_text_idx`).on(cols.text)\n        }\n\n        if (hasLocalizedManyTextField) {\n          config.localeParent = index(`${textsTableName}_locale_parent`).on(\n            cols.locale,\n            cols.parent,\n          )\n        }\n\n        return config\n      })\n\n      adapter.tables[textsTableName] = textsTable\n\n      adapter.relations[`relations_${textsTableName}`] = relations(textsTable, ({ one }) => ({\n        parent: one(table, {\n          fields: [textsTable.parent],\n          references: [table.id],\n          relationName: '_texts',\n        }),\n      }))\n    }\n\n    if (hasManyNumberField) {\n      const numbersTableName = `${rootTableName}_numbers`\n      const columns: Record<string, PgColumnBuilder> = {\n        id: serial('id').primaryKey(),\n        number: numeric('number'),\n        order: integer('order').notNull(),\n        parent: parentIDColumnMap[idColType]('parent_id').notNull(),\n        path: varchar('path').notNull(),\n      }\n\n      if (hasLocalizedManyNumberField) {\n        columns.locale = adapter.enums.enum__locales('locale')\n      }\n\n      numbersTable = adapter.pgSchema.table(numbersTableName, columns, (cols) => {\n        const config: Record<string, ForeignKeyBuilder | IndexBuilder> = {\n          orderParentIdx: index(`${numbersTableName}_order_parent_idx`).on(cols.order, cols.parent),\n          parentFk: foreignKey({\n            name: `${numbersTableName}_parent_fk`,\n            columns: [cols.parent],\n            foreignColumns: [table.id],\n          }).onDelete('cascade'),\n        }\n\n        if (hasManyNumberField === 'index') {\n          config.numberIdx = index(`${numbersTableName}_number_idx`).on(cols.number)\n        }\n\n        if (hasLocalizedManyNumberField) {\n          config.localeParent = index(`${numbersTableName}_locale_parent`).on(\n            cols.locale,\n            cols.parent,\n          )\n        }\n\n        return config\n      })\n\n      adapter.tables[numbersTableName] = numbersTable\n\n      adapter.relations[`relations_${numbersTableName}`] = relations(numbersTable, ({ one }) => ({\n        parent: one(table, {\n          fields: [numbersTable.parent],\n          references: [table.id],\n          relationName: '_numbers',\n        }),\n      }))\n    }\n\n    if (relationships.size) {\n      const relationshipColumns: Record<string, PgColumnBuilder> = {\n        id: serial('id').primaryKey(),\n        order: integer('order'),\n        parent: parentIDColumnMap[idColType]('parent_id').notNull(),\n        path: varchar('path').notNull(),\n      }\n\n      if (hasLocalizedRelationshipField) {\n        relationshipColumns.locale = adapter.enums.enum__locales('locale')\n      }\n\n      const relationExtraConfig: BaseExtraConfig = {}\n      const relationshipsTableName = `${tableName}${adapter.relationshipsSuffix}`\n\n      relationships.forEach((relationTo) => {\n        const relationshipConfig = adapter.payload.collections[relationTo].config\n        const formattedRelationTo = createTableName({\n          adapter,\n          config: relationshipConfig,\n          throwValidationError: true,\n        })\n        let colType = adapter.idType === 'uuid' ? 'uuid' : 'integer'\n        const relatedCollectionCustomIDType =\n          adapter.payload.collections[relationshipConfig.slug]?.customIDType\n\n        if (relatedCollectionCustomIDType === 'number') colType = 'numeric'\n        if (relatedCollectionCustomIDType === 'text') colType = 'varchar'\n\n        relationshipColumns[`${relationTo}ID`] = parentIDColumnMap[colType](\n          `${formattedRelationTo}_id`,\n        )\n\n        relationExtraConfig[`${relationTo}IdFk`] = (cols) =>\n          foreignKey({\n            name: `${relationshipsTableName}_${toSnakeCase(relationTo)}_fk`,\n            columns: [cols[`${relationTo}ID`]],\n            foreignColumns: [adapter.tables[formattedRelationTo].id],\n          }).onDelete('cascade')\n      })\n\n      relationshipsTable = adapter.pgSchema.table(\n        relationshipsTableName,\n        relationshipColumns,\n        (cols) => {\n          const result: Record<string, ForeignKeyBuilder | IndexBuilder> = Object.entries(\n            relationExtraConfig,\n          ).reduce(\n            (config, [key, func]) => {\n              config[key] = func(cols)\n              return config\n            },\n            {\n              order: index(`${relationshipsTableName}_order_idx`).on(cols.order),\n              parentFk: foreignKey({\n                name: `${relationshipsTableName}_parent_fk`,\n                columns: [cols.parent],\n                foreignColumns: [table.id],\n              }).onDelete('cascade'),\n              parentIdx: index(`${relationshipsTableName}_parent_idx`).on(cols.parent),\n              pathIdx: index(`${relationshipsTableName}_path_idx`).on(cols.path),\n            },\n          )\n\n          if (hasLocalizedRelationshipField) {\n            result.localeIdx = index(`${relationshipsTableName}_locale_idx`).on(cols.locale)\n          }\n\n          return result\n        },\n      )\n\n      adapter.tables[relationshipsTableName] = relationshipsTable\n\n      adapter.relations[`relations_${relationshipsTableName}`] = relations(\n        relationshipsTable,\n        ({ one }) => {\n          const result: Record<string, Relation<string>> = {\n            parent: one(table, {\n              fields: [relationshipsTable.parent],\n              references: [table.id],\n              relationName: '_rels',\n            }),\n          }\n\n          relationships.forEach((relationTo) => {\n            const relatedTableName = createTableName({\n              adapter,\n              config: adapter.payload.collections[relationTo].config,\n              throwValidationError: true,\n            })\n            const idColumnName = `${relationTo}ID`\n            result[idColumnName] = one(adapter.tables[relatedTableName], {\n              fields: [relationshipsTable[idColumnName]],\n              references: [adapter.tables[relatedTableName].id],\n              relationName: relationTo,\n            })\n          })\n\n          return result\n        },\n      )\n    }\n  }\n\n  adapter.relations[`relations_${tableName}`] = relations(table, ({ many, one }) => {\n    const result: Record<string, Relation<string>> = {}\n\n    nonLocalizedRelations.forEach(({ type, target }, key) => {\n      if (type === 'one') {\n        result[key] = one(adapter.tables[target], {\n          fields: [table[key]],\n          references: [adapter.tables[target].id],\n          relationName: key,\n        })\n      }\n      if (type === 'many') {\n        result[key] = many(adapter.tables[target], { relationName: key })\n      }\n    })\n\n    if (hasLocalizedField) {\n      result._locales = many(localesTable, { relationName: '_locales' })\n    }\n\n    if (hasManyTextField) {\n      result._texts = many(textsTable, { relationName: '_texts' })\n    }\n\n    if (hasManyNumberField) {\n      result._numbers = many(numbersTable, { relationName: '_numbers' })\n    }\n\n    if (relationships.size && relationshipsTable) {\n      result._rels = many(relationshipsTable, {\n        relationName: '_rels',\n      })\n    }\n\n    return result\n  })\n\n  return { hasManyNumberField, hasManyTextField, relationsToBuild }\n}\n"],"names":["relations","foreignKey","index","integer","numeric","serial","timestamp","unique","varchar","toSnakeCase","createTableName","parentIDColumnMap","setColumnID","traverseFields","buildTable","adapter","baseColumns","baseExtraConfig","disableNotNull","disableUnique","fields","rootRelationsToBuild","rootRelationships","rootTableIDColType","rootTableName","incomingRootTableName","tableName","timestamps","versions","isRoot","columns","indexes","localesColumns","localesIndexes","localesTable","textsTable","numbersTable","relationships","Set","relationshipsTable","relationsToBuild","Map","idColType","hasLocalizedField","hasLocalizedManyNumberField","hasLocalizedManyTextField","hasLocalizedRelationshipField","hasManyNumberField","hasManyTextField","newTableName","parentTableName","localizedRelations","nonLocalizedRelations","forEach","type","localized","target","key","map","set","createdAt","mode","precision","withTimezone","defaultNow","notNull","updatedAt","table","pgSchema","cols","extraConfig","Object","entries","reduce","config","func","result","acc","colName","tables","size","localeTableName","localesSuffix","id","primaryKey","_locale","enums","enum__locales","_parentID","_localeParent","on","_parentIdFk","name","foreignColumns","onDelete","many","one","references","relationName","textsTableName","order","parent","path","text","locale","orderParentIdx","parentFk","text_idx","localeParent","numbersTableName","number","numberIdx","relationshipColumns","relationExtraConfig","relationshipsTableName","relationshipsSuffix","relationTo","relationshipConfig","payload","collections","formattedRelationTo","throwValidationError","colType","idType","relatedCollectionCustomIDType","slug","customIDType","parentIdx","pathIdx","localeIdx","relatedTableName","idColumnName","_locales","_texts","_numbers","_rels"],"mappings":"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"}