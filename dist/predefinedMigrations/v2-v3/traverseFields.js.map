{"version":3,"sources":["../../../src/predefinedMigrations/v2-v3/traverseFields.ts"],"sourcesContent":["import type { Field, Payload } from 'payload'\n\nimport { tabHasName } from 'payload/shared'\nimport toSnakeCase from 'to-snake-case'\n\nimport type { DrizzleTransaction, PostgresAdapter } from '../../types.js'\nimport type { PathsToQuery } from './types.js'\n\ntype Args = {\n  adapter: PostgresAdapter\n  collectionSlug?: string\n  columnPrefix: string\n  db: DrizzleTransaction\n  disableNotNull: boolean\n  fields: Field[]\n  globalSlug?: string\n  isVersions: boolean\n  newTableName: string\n  parentTableName: string\n  path: string\n  pathsToQuery: PathsToQuery\n  payload: Payload\n  rootTableName: string\n}\n\nexport const traverseFields = (args: Args) => {\n  args.fields.forEach((field) => {\n    switch (field.type) {\n      case 'group': {\n        let newTableName = `${args.newTableName}_${toSnakeCase(field.name)}`\n\n        if (field.localized && args.payload.config.localization) {\n          newTableName += args.adapter.localesSuffix\n        }\n\n        return traverseFields({\n          ...args,\n          columnPrefix: `${args.columnPrefix}${toSnakeCase(field.name)}_`,\n          fields: field.fields,\n          newTableName,\n          path: `${args.path ? `${args.path}.` : ''}${field.name}`,\n        })\n      }\n\n      case 'row':\n      case 'collapsible': {\n        return traverseFields({\n          ...args,\n          fields: field.fields,\n        })\n      }\n\n      case 'array': {\n        const newTableName = args.adapter.tableNameMap.get(\n          `${args.newTableName}_${toSnakeCase(field.name)}`,\n        )\n\n        return traverseFields({\n          ...args,\n          columnPrefix: '',\n          fields: field.fields,\n          newTableName,\n          parentTableName: newTableName,\n          path: `${args.path ? `${args.path}.` : ''}${field.name}.%`,\n        })\n      }\n\n      case 'blocks': {\n        return field.blocks.forEach((block) => {\n          const newTableName = args.adapter.tableNameMap.get(\n            `${args.rootTableName}_blocks_${toSnakeCase(block.slug)}`,\n          )\n\n          traverseFields({\n            ...args,\n            columnPrefix: '',\n            fields: block.fields,\n            newTableName,\n            parentTableName: newTableName,\n            path: `${args.path ? `${args.path}.` : ''}${field.name}.%`,\n          })\n        })\n      }\n\n      case 'tabs': {\n        return field.tabs.forEach((tab) => {\n          if (tabHasName(tab)) {\n            args.columnPrefix = `${args.columnPrefix}_${toSnakeCase(tab.name)}_`\n            args.path = `${args.path ? `${args.path}.` : ''}${tab.name}`\n            args.newTableName = `${args.newTableName}_${toSnakeCase(tab.name)}`\n\n            if (tab.localized && args.payload.config.localization) {\n              args.newTableName += args.adapter.localesSuffix\n            }\n          }\n\n          traverseFields({\n            ...args,\n            fields: tab.fields,\n          })\n        })\n      }\n\n      case 'relationship':\n      case 'upload': {\n        if (typeof field.relationTo === 'string') {\n          if (field.type === 'upload' || !field.hasMany) {\n            args.pathsToQuery.add(`${args.path ? `${args.path}.` : ''}${field.name}`)\n          }\n        }\n\n        return null\n      }\n    }\n  })\n}\n"],"names":["tabHasName","toSnakeCase","traverseFields","args","fields","forEach","field","type","newTableName","name","localized","payload","config","localization","adapter","localesSuffix","columnPrefix","path","tableNameMap","get","parentTableName","blocks","block","rootTableName","slug","tabs","tab","relationTo","hasMany","pathsToQuery","add"],"mappings":"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"}