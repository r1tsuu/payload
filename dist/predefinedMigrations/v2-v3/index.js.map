{"version":3,"sources":["../../../src/predefinedMigrations/v2-v3/index.ts"],"sourcesContent":["import type { DrizzleSnapshotJSON } from 'drizzle-kit/payload'\nimport type { Payload, PayloadRequestWithData } from 'payload'\n\nimport { sql } from 'drizzle-orm'\nimport fs from 'fs'\nimport { createRequire } from 'module'\nimport { buildVersionCollectionFields, buildVersionGlobalFields } from 'payload'\nimport toSnakeCase from 'to-snake-case'\n\nimport type { PostgresAdapter } from '../../types.js'\nimport type { PathsToQuery } from './types.js'\n\nimport { groupUpSQLStatements } from './groupUpSQLStatements.js'\nimport { migrateRelationships } from './migrateRelationships.js'\nimport { traverseFields } from './traverseFields.js'\n\nconst require = createRequire(import.meta.url)\n\ntype Args = {\n  debug?: boolean\n  payload: Payload\n  req?: Partial<PayloadRequestWithData>\n}\n\n/**\n * Moves upload and relationship columns from the join table and into the tables while moving data\n * This is done in the following order:\n *    ADD COLUMNs\n *    -- manipulate data to move relationships to new columns\n *    ADD CONSTRAINTs\n *    NOT NULLs\n *    DROP TABLEs\n *    DROP CONSTRAINTs\n *    DROP COLUMNs\n * @param debug\n * @param payload\n * @param req\n */\nexport const migratePostgresV2toV3 = async ({ debug, payload, req }: Args) => {\n  const adapter = payload.db as PostgresAdapter\n  const db = adapter.sessions[req.transactionID]?.db\n  const dir = payload.db.migrationDir\n\n  // get the drizzle migrateUpSQL from drizzle using the last schema\n  const { generateDrizzleJson, generateMigration } = require('drizzle-kit/payload')\n  const drizzleJsonAfter = generateDrizzleJson(adapter.schema)\n\n  // Get the previous migration snapshot\n  const previousSnapshot = fs\n    .readdirSync(dir)\n    .filter((file) => file.endsWith('.json') && !file.endsWith('relationships_v2_v3.json'))\n    .sort()\n    .reverse()?.[0]\n\n  if (!previousSnapshot) {\n    throw new Error(\n      `No previous migration schema file found! A prior migration from v2 is required to migrate to v3.`,\n    )\n  }\n\n  const drizzleJsonBefore = JSON.parse(\n    fs.readFileSync(`${dir}/${previousSnapshot}`, 'utf8'),\n  ) as DrizzleSnapshotJSON\n\n  const generatedSQL = await generateMigration(drizzleJsonBefore, drizzleJsonAfter)\n\n  if (!generatedSQL.length) {\n    payload.logger.info(`No schema changes needed.`)\n    process.exit(0)\n  }\n\n  const sqlUpStatements = groupUpSQLStatements(generatedSQL)\n\n  const addColumnsStatement = sqlUpStatements.addColumn.join('\\n')\n\n  if (debug) {\n    payload.logger.info('CREATING NEW RELATIONSHIP COLUMNS')\n    payload.logger.info(addColumnsStatement)\n  }\n\n  await db.execute(sql.raw(addColumnsStatement))\n\n  for (const collection of payload.config.collections) {\n    const tableName = adapter.tableNameMap.get(toSnakeCase(collection.slug))\n    const pathsToQuery: PathsToQuery = new Set()\n\n    traverseFields({\n      adapter,\n      collectionSlug: collection.slug,\n      columnPrefix: '',\n      db,\n      disableNotNull: false,\n      fields: collection.fields,\n      isVersions: false,\n      newTableName: tableName,\n      parentTableName: tableName,\n      path: '',\n      pathsToQuery,\n      payload,\n      rootTableName: tableName,\n    })\n\n    await migrateRelationships({\n      adapter,\n      collectionSlug: collection.slug,\n      db,\n      debug,\n      fields: collection.fields,\n      isVersions: false,\n      pathsToQuery,\n      payload,\n      req,\n      tableName,\n    })\n\n    if (collection.versions) {\n      const versionsTableName = adapter.tableNameMap.get(\n        `_${toSnakeCase(collection.slug)}${adapter.versionsSuffix}`,\n      )\n      const versionFields = buildVersionCollectionFields(collection)\n      const versionPathsToQuery: PathsToQuery = new Set()\n\n      traverseFields({\n        adapter,\n        collectionSlug: collection.slug,\n        columnPrefix: '',\n        db,\n        disableNotNull: true,\n        fields: versionFields,\n        isVersions: true,\n        newTableName: versionsTableName,\n        parentTableName: versionsTableName,\n        path: '',\n        pathsToQuery: versionPathsToQuery,\n        payload,\n        rootTableName: versionsTableName,\n      })\n\n      await migrateRelationships({\n        adapter,\n        collectionSlug: collection.slug,\n        db,\n        debug,\n        fields: versionFields,\n        isVersions: true,\n        pathsToQuery: versionPathsToQuery,\n        payload,\n        req,\n        tableName: versionsTableName,\n      })\n    }\n  }\n\n  for (const global of payload.config.globals) {\n    const tableName = adapter.tableNameMap.get(toSnakeCase(global.slug))\n\n    const pathsToQuery: PathsToQuery = new Set()\n\n    traverseFields({\n      adapter,\n      columnPrefix: '',\n      db,\n      disableNotNull: false,\n      fields: global.fields,\n      globalSlug: global.slug,\n      isVersions: false,\n      newTableName: tableName,\n      parentTableName: tableName,\n      path: '',\n      pathsToQuery,\n      payload,\n      rootTableName: tableName,\n    })\n\n    await migrateRelationships({\n      adapter,\n      db,\n      debug,\n      fields: global.fields,\n      globalSlug: global.slug,\n      isVersions: false,\n      pathsToQuery,\n      payload,\n      req,\n      tableName,\n    })\n\n    if (global.versions) {\n      const versionsTableName = adapter.tableNameMap.get(\n        `_${toSnakeCase(global.slug)}${adapter.versionsSuffix}`,\n      )\n\n      const versionFields = buildVersionGlobalFields(global)\n\n      const versionPathsToQuery: PathsToQuery = new Set()\n\n      traverseFields({\n        adapter,\n        columnPrefix: '',\n        db,\n        disableNotNull: true,\n        fields: versionFields,\n        globalSlug: global.slug,\n        isVersions: true,\n        newTableName: versionsTableName,\n        parentTableName: versionsTableName,\n        path: '',\n        pathsToQuery: versionPathsToQuery,\n        payload,\n        rootTableName: versionsTableName,\n      })\n\n      await migrateRelationships({\n        adapter,\n        db,\n        debug,\n        fields: versionFields,\n        globalSlug: global.slug,\n        isVersions: true,\n        pathsToQuery: versionPathsToQuery,\n        payload,\n        req,\n        tableName: versionsTableName,\n      })\n    }\n  }\n\n  // ADD CONSTRAINT\n  const addConstraintsStatement = sqlUpStatements.addConstraint.join('\\n')\n\n  if (debug) {\n    payload.logger.info('ADDING CONSTRAINTS')\n    payload.logger.info(addConstraintsStatement)\n  }\n\n  await db.execute(sql.raw(addConstraintsStatement))\n\n  // NOT NULL\n  const notNullStatements = sqlUpStatements.notNull.join('\\n')\n\n  if (debug) {\n    payload.logger.info('NOT NULL CONSTRAINTS')\n    payload.logger.info(notNullStatements)\n  }\n\n  await db.execute(sql.raw(notNullStatements))\n\n  // DROP TABLE\n  const dropTablesStatement = sqlUpStatements.dropTable.join('\\n')\n\n  if (debug) {\n    payload.logger.info('DROPPING TABLES')\n    payload.logger.info(dropTablesStatement)\n  }\n\n  await db.execute(sql.raw(dropTablesStatement))\n\n  // DROP CONSTRAINT\n  const dropConstraintsStatement = sqlUpStatements.dropConstraint.join('\\n')\n\n  if (debug) {\n    payload.logger.info('DROPPING CONSTRAINTS')\n    payload.logger.info(dropConstraintsStatement)\n  }\n\n  await db.execute(sql.raw(dropConstraintsStatement))\n\n  // DROP COLUMN\n  const dropColumnsStatement = sqlUpStatements.dropColumn.join('\\n')\n\n  if (debug) {\n    payload.logger.info('DROPPING COLUMNS')\n    payload.logger.info(dropColumnsStatement)\n  }\n\n  await db.execute(sql.raw(dropColumnsStatement))\n}\n"],"names":["sql","fs","createRequire","buildVersionCollectionFields","buildVersionGlobalFields","toSnakeCase","groupUpSQLStatements","migrateRelationships","traverseFields","require","url","migratePostgresV2toV3","debug","payload","req","adapter","db","sessions","transactionID","dir","migrationDir","generateDrizzleJson","generateMigration","drizzleJsonAfter","schema","previousSnapshot","readdirSync","filter","file","endsWith","sort","reverse","Error","drizzleJsonBefore","JSON","parse","readFileSync","generatedSQL","length","logger","info","process","exit","sqlUpStatements","addColumnsStatement","addColumn","join","execute","raw","collection","config","collections","tableName","tableNameMap","get","slug","pathsToQuery","Set","collectionSlug","columnPrefix","disableNotNull","fields","isVersions","newTableName","parentTableName","path","rootTableName","versions","versionsTableName","versionsSuffix","versionFields","versionPathsToQuery","global","globals","globalSlug","addConstraintsStatement","addConstraint","notNullStatements","notNull","dropTablesStatement","dropTable","dropConstraintsStatement","dropConstraint","dropColumnsStatement","dropColumn"],"mappings":"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"}