{"version":3,"sources":["../../src/database/flattenWhereToOperators.ts"],"sourcesContent":["import type { Where, WhereField } from '../types/index.js'\n\n// Take a where query and flatten it to all top-level operators\nconst flattenWhereToOperators = (query: Where): WhereField[] =>\n  Object.entries(query).reduce((flattenedConstraints, [key, val]) => {\n    if ((key === 'and' || key === 'or') && Array.isArray(val)) {\n      return [\n        ...flattenedConstraints,\n        ...val.reduce((subVals, subVal) => {\n          return [...subVals, ...flattenWhereToOperators(subVal)]\n        }, []),\n      ]\n    }\n\n    return [...flattenedConstraints, val]\n  }, [])\n\nexport default flattenWhereToOperators\n"],"names":["flattenWhereToOperators","query","Object","entries","reduce","flattenedConstraints","key","val","Array","isArray","subVals","subVal"],"mappings":"AAEA,+DAA+D;AAC/D,MAAMA,0BAA0B,CAACC,QAC/BC,OAAOC,OAAO,CAACF,OAAOG,MAAM,CAAC,CAACC,sBAAsB,CAACC,KAAKC,IAAI;QAC5D,IAAI,AAACD,CAAAA,QAAQ,SAASA,QAAQ,IAAG,KAAME,MAAMC,OAAO,CAACF,MAAM;YACzD,OAAO;mBACFF;mBACAE,IAAIH,MAAM,CAAC,CAACM,SAASC;oBACtB,OAAO;2BAAID;2BAAYV,wBAAwBW;qBAAQ;gBACzD,GAAG,EAAE;aACN;QACH;QAEA,OAAO;eAAIN;YAAsBE;SAAI;IACvC,GAAG,EAAE;AAEP,eAAeP,wBAAuB"}