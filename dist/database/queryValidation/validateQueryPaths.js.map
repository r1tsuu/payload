{"version":3,"sources":["../../../src/database/queryValidation/validateQueryPaths.ts"],"sourcesContent":["/* eslint-disable no-restricted-syntax */\nimport type { SanitizedCollectionConfig } from '../../collections/config/types.js'\nimport type { Field, FieldAffectingData } from '../../fields/config/types.js'\nimport type { SanitizedGlobalConfig } from '../../globals/config/types.js'\n/* eslint-disable no-await-in-loop */\nimport type { Operator, PayloadRequestWithData, Where, WhereField } from '../../types/index.js'\nimport type { EntityPolicies } from './types.js'\n\nimport { QueryError } from '../../errors/QueryError.js'\nimport { validOperators } from '../../types/constants.js'\nimport { deepCopyObject } from '../../utilities/deepCopyObject.js'\nimport flattenFields from '../../utilities/flattenTopLevelFields.js'\nimport { validateSearchParam } from './validateSearchParams.js'\n\ntype Args = {\n  errors?: { path: string }[]\n  overrideAccess: boolean\n  policies?: EntityPolicies\n  req: PayloadRequestWithData\n  versionFields?: Field[]\n  where: Where\n} & (\n  | {\n      collectionConfig: SanitizedCollectionConfig\n      globalConfig?: never | undefined\n    }\n  | {\n      collectionConfig?: never | undefined\n      globalConfig: SanitizedGlobalConfig\n    }\n)\n\nconst flattenWhere = (query: Where): WhereField[] =>\n  Object.entries(query).reduce((flattenedConstraints, [key, val]) => {\n    if ((key === 'and' || key === 'or') && Array.isArray(val)) {\n      const subWhereConstraints: Where[] = val.reduce((acc, subVal) => {\n        const subWhere = flattenWhere(subVal)\n        return [...acc, ...subWhere]\n      }, [])\n      return [...flattenedConstraints, ...subWhereConstraints]\n    }\n\n    return [...flattenedConstraints, { [key]: val }]\n  }, [])\n\nexport async function validateQueryPaths({\n  collectionConfig,\n  errors = [],\n  globalConfig,\n  overrideAccess,\n  policies = {\n    collections: {},\n    globals: {},\n  },\n  req,\n  versionFields,\n  where,\n}: Args): Promise<void> {\n  const fields = flattenFields(\n    versionFields || (globalConfig || collectionConfig).fields,\n  ) as FieldAffectingData[]\n  if (typeof where === 'object') {\n    const whereFields = flattenWhere(where)\n    // We need to determine if the whereKey is an AND, OR, or a schema path\n    const promises = []\n    whereFields.map(async (constraint) => {\n      Object.keys(constraint).map(async (path) => {\n        Object.entries(constraint[path]).map(async ([operator, val]) => {\n          if (validOperators.includes(operator as Operator)) {\n            promises.push(\n              validateSearchParam({\n                collectionConfig: deepCopyObject(collectionConfig),\n                errors,\n                fields: fields as Field[],\n                globalConfig: deepCopyObject(globalConfig),\n                operator,\n                overrideAccess,\n                path,\n                policies,\n                req,\n                val,\n                versionFields,\n              }),\n            )\n          }\n        })\n      })\n    })\n    await Promise.all(promises)\n    if (errors.length > 0) {\n      throw new QueryError(errors)\n    }\n  }\n}\n"],"names":["QueryError","validOperators","deepCopyObject","flattenFields","validateSearchParam","flattenWhere","query","Object","entries","reduce","flattenedConstraints","key","val","Array","isArray","subWhereConstraints","acc","subVal","subWhere","validateQueryPaths","collectionConfig","errors","globalConfig","overrideAccess","policies","collections","globals","req","versionFields","where","fields","whereFields","promises","map","constraint","keys","path","operator","includes","push","Promise","all","length"],"mappings":"AAAA,uCAAuC,GAQvC,SAASA,UAAU,QAAQ,6BAA4B;AACvD,SAASC,cAAc,QAAQ,2BAA0B;AACzD,SAASC,cAAc,QAAQ,oCAAmC;AAClE,OAAOC,mBAAmB,2CAA0C;AACpE,SAASC,mBAAmB,QAAQ,4BAA2B;AAoB/D,MAAMC,eAAe,CAACC,QACpBC,OAAOC,OAAO,CAACF,OAAOG,MAAM,CAAC,CAACC,sBAAsB,CAACC,KAAKC,IAAI;QAC5D,IAAI,AAACD,CAAAA,QAAQ,SAASA,QAAQ,IAAG,KAAME,MAAMC,OAAO,CAACF,MAAM;YACzD,MAAMG,sBAA+BH,IAAIH,MAAM,CAAC,CAACO,KAAKC;gBACpD,MAAMC,WAAWb,aAAaY;gBAC9B,OAAO;uBAAID;uBAAQE;iBAAS;YAC9B,GAAG,EAAE;YACL,OAAO;mBAAIR;mBAAyBK;aAAoB;QAC1D;QAEA,OAAO;eAAIL;YAAsB;gBAAE,CAACC,IAAI,EAAEC;YAAI;SAAE;IAClD,GAAG,EAAE;AAEP,OAAO,eAAeO,mBAAmB,EACvCC,gBAAgB,EAChBC,SAAS,EAAE,EACXC,YAAY,EACZC,cAAc,EACdC,WAAW;IACTC,aAAa,CAAC;IACdC,SAAS,CAAC;AACZ,CAAC,EACDC,GAAG,EACHC,aAAa,EACbC,KAAK,EACA;IACL,MAAMC,SAAS3B,cACbyB,iBAAiB,AAACN,CAAAA,gBAAgBF,gBAAe,EAAGU,MAAM;IAE5D,IAAI,OAAOD,UAAU,UAAU;QAC7B,MAAME,cAAc1B,aAAawB;QACjC,uEAAuE;QACvE,MAAMG,WAAW,EAAE;QACnBD,YAAYE,GAAG,CAAC,OAAOC;YACrB3B,OAAO4B,IAAI,CAACD,YAAYD,GAAG,CAAC,OAAOG;gBACjC7B,OAAOC,OAAO,CAAC0B,UAAU,CAACE,KAAK,EAAEH,GAAG,CAAC,OAAO,CAACI,UAAUzB,IAAI;oBACzD,IAAIX,eAAeqC,QAAQ,CAACD,WAAuB;wBACjDL,SAASO,IAAI,CACXnC,oBAAoB;4BAClBgB,kBAAkBlB,eAAekB;4BACjCC;4BACAS,QAAQA;4BACRR,cAAcpB,eAAeoB;4BAC7Be;4BACAd;4BACAa;4BACAZ;4BACAG;4BACAf;4BACAgB;wBACF;oBAEJ;gBACF;YACF;QACF;QACA,MAAMY,QAAQC,GAAG,CAACT;QAClB,IAAIX,OAAOqB,MAAM,GAAG,GAAG;YACrB,MAAM,IAAI1C,WAAWqB;QACvB;IACF;AACF"}