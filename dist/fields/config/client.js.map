{"version":3,"sources":["../../../src/fields/config/client.ts"],"sourcesContent":["import type { TFunction } from '@payloadcms/translations'\n\nimport type { Field, FieldBase } from '../../fields/config/types.js'\n\nexport type ClientFieldConfig = Omit<Field, 'access' | 'defaultValue' | 'hooks' | 'validate'>\n\nexport type ServerOnlyFieldProperties =\n  | 'editor' // This is a `richText` only property\n  | 'filterOptions' // This is a `relationship` and `upload` only property\n  | 'label'\n  | keyof Pick<FieldBase, 'access' | 'custom' | 'defaultValue' | 'hooks' | 'validate'>\n\nexport type ServerOnlyFieldAdminProperties = keyof Pick<\n  FieldBase['admin'],\n  'components' | 'condition' | 'description'\n>\n\nexport const createClientFieldConfig = ({\n  field: incomingField,\n  t,\n}: {\n  field: Field\n  t: TFunction\n}) => {\n  const field = { ...incomingField }\n\n  const serverOnlyFieldProperties: Partial<ServerOnlyFieldProperties>[] = [\n    'hooks',\n    'access',\n    'validate',\n    'defaultValue',\n    'label',\n    'filterOptions', // This is a `relationship` and `upload` only property\n    'editor', // This is a `richText` only property\n    'custom',\n    // `fields`\n    // `blocks`\n    // `tabs`\n    // `admin`\n    // are all handled separately\n  ]\n\n  serverOnlyFieldProperties.forEach((key) => {\n    if (key in field) {\n      delete field[key]\n    }\n  })\n\n  if ('options' in field && Array.isArray(field.options)) {\n    field.options = field.options.map((option) => {\n      if (typeof option === 'object' && typeof option.label === 'function') {\n        return {\n          label: option.label({ t }),\n          value: option.value,\n        }\n      }\n\n      return option\n    })\n  }\n\n  if ('fields' in field) {\n    field.fields = createClientFieldConfigs({ fields: field.fields, t })\n  }\n\n  if ('blocks' in field) {\n    field.blocks = field.blocks.map((block) => {\n      const sanitized = { ...block }\n      sanitized.fields = createClientFieldConfigs({ fields: sanitized.fields, t })\n      return sanitized\n    })\n  }\n\n  if ('tabs' in field) {\n    // @ts-expect-error\n    field.tabs = field.tabs.map((tab) => createClientFieldConfig({ field: tab, t }))\n  }\n\n  if ('admin' in field) {\n    field.admin = { ...field.admin }\n\n    const serverOnlyFieldAdminProperties: Partial<ServerOnlyFieldAdminProperties>[] = [\n      'components',\n      'condition',\n      'description',\n    ]\n\n    serverOnlyFieldAdminProperties.forEach((key) => {\n      if (key in field.admin) {\n        delete field.admin[key]\n      }\n    })\n  }\n\n  return field\n}\n\nexport const createClientFieldConfigs = ({\n  fields,\n  t,\n}: {\n  fields: Field[]\n  t: TFunction\n}): Field[] => fields.map((field) => createClientFieldConfig({ field, t }))\n"],"names":["createClientFieldConfig","field","incomingField","t","serverOnlyFieldProperties","forEach","key","Array","isArray","options","map","option","label","value","fields","createClientFieldConfigs","blocks","block","sanitized","tabs","tab","admin","serverOnlyFieldAdminProperties"],"mappings":"AAiBA,OAAO,MAAMA,0BAA0B,CAAC,EACtCC,OAAOC,aAAa,EACpBC,CAAC,EAIF;IACC,MAAMF,QAAQ;QAAE,GAAGC,aAAa;IAAC;IAEjC,MAAME,4BAAkE;QACtE;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KAMD;IAEDA,0BAA0BC,OAAO,CAAC,CAACC;QACjC,IAAIA,OAAOL,OAAO;YAChB,OAAOA,KAAK,CAACK,IAAI;QACnB;IACF;IAEA,IAAI,aAAaL,SAASM,MAAMC,OAAO,CAACP,MAAMQ,OAAO,GAAG;QACtDR,MAAMQ,OAAO,GAAGR,MAAMQ,OAAO,CAACC,GAAG,CAAC,CAACC;YACjC,IAAI,OAAOA,WAAW,YAAY,OAAOA,OAAOC,KAAK,KAAK,YAAY;gBACpE,OAAO;oBACLA,OAAOD,OAAOC,KAAK,CAAC;wBAAET;oBAAE;oBACxBU,OAAOF,OAAOE,KAAK;gBACrB;YACF;YAEA,OAAOF;QACT;IACF;IAEA,IAAI,YAAYV,OAAO;QACrBA,MAAMa,MAAM,GAAGC,yBAAyB;YAAED,QAAQb,MAAMa,MAAM;YAAEX;QAAE;IACpE;IAEA,IAAI,YAAYF,OAAO;QACrBA,MAAMe,MAAM,GAAGf,MAAMe,MAAM,CAACN,GAAG,CAAC,CAACO;YAC/B,MAAMC,YAAY;gBAAE,GAAGD,KAAK;YAAC;YAC7BC,UAAUJ,MAAM,GAAGC,yBAAyB;gBAAED,QAAQI,UAAUJ,MAAM;gBAAEX;YAAE;YAC1E,OAAOe;QACT;IACF;IAEA,IAAI,UAAUjB,OAAO;QACnB,mBAAmB;QACnBA,MAAMkB,IAAI,GAAGlB,MAAMkB,IAAI,CAACT,GAAG,CAAC,CAACU,MAAQpB,wBAAwB;gBAAEC,OAAOmB;gBAAKjB;YAAE;IAC/E;IAEA,IAAI,WAAWF,OAAO;QACpBA,MAAMoB,KAAK,GAAG;YAAE,GAAGpB,MAAMoB,KAAK;QAAC;QAE/B,MAAMC,iCAA4E;YAChF;YACA;YACA;SACD;QAEDA,+BAA+BjB,OAAO,CAAC,CAACC;YACtC,IAAIA,OAAOL,MAAMoB,KAAK,EAAE;gBACtB,OAAOpB,MAAMoB,KAAK,CAACf,IAAI;YACzB;QACF;IACF;IAEA,OAAOL;AACT,EAAC;AAED,OAAO,MAAMc,2BAA2B,CAAC,EACvCD,MAAM,EACNX,CAAC,EAIF,GAAcW,OAAOJ,GAAG,CAAC,CAACT,QAAUD,wBAAwB;YAAEC;YAAOE;QAAE,IAAG"}