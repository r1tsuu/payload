{"version":3,"sources":["../../../src/fields/config/types.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-use-before-define */\nimport type { EditorProps } from '@monaco-editor/react'\nimport type { CSSProperties } from 'react'\n\n//eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport monacoeditor from 'monaco-editor' // IMPORTANT - DO NOT REMOVE: This is required for pnpm's default isolated mode to work - even though the import is not used. This is due to a typescript bug: https://github.com/microsoft/TypeScript/issues/47663#issuecomment-1519138189. (tsbugisolatedmode)\nimport type { JSONSchema4 } from 'json-schema'\nimport type React from 'react'\n\nimport type { RichTextAdapter, RichTextAdapterProvider } from '../../admin/RichText.js'\nimport type {\n  ConditionalDateProps,\n  Description,\n  DescriptionComponent,\n  ErrorProps,\n  LabelProps,\n  RowLabelComponent,\n} from '../../admin/types.js'\nimport type { SanitizedCollectionConfig, TypeWithID } from '../../collections/config/types.js'\nimport type { CustomComponent, LabelFunction } from '../../config/types.js'\nimport type { DBIdentifierName } from '../../database/types.js'\nimport type { SanitizedGlobalConfig } from '../../globals/config/types.js'\nimport type { CollectionSlug, GeneratedTypes } from '../../index.js'\nimport type { DocumentPreferences } from '../../preferences/types.js'\nimport type { Operation, PayloadRequestWithData, RequestContext, Where } from '../../types/index.js'\nimport type { ClientFieldConfig } from './client.js'\n\nexport type FieldHookArgs<TData extends TypeWithID = any, TValue = any, TSiblingData = any> = {\n  /** The collection which the field belongs to. If the field belongs to a global, this will be null. */\n  collection: SanitizedCollectionConfig | null\n  context: RequestContext\n  /** The data passed to update the document within create and update operations, and the full document itself in the afterRead hook. */\n  data?: Partial<TData>\n  /** The field which the hook is running against. */\n  field: FieldAffectingData\n  /** Boolean to denote if this hook is running against finding one, or finding many within the afterRead hook. */\n  findMany?: boolean\n  /** The global which the field belongs to. If the field belongs to a collection, this will be null. */\n  global: SanitizedGlobalConfig | null\n  /** A string relating to which operation the field type is currently executing within. Useful within beforeValidate, beforeChange, and afterChange hooks to differentiate between create and update operations. */\n  operation?: 'create' | 'delete' | 'read' | 'update'\n  /** The full original document in `update` operations. In the `afterChange` hook, this is the resulting document of the operation. */\n  originalDoc?: TData\n  overrideAccess?: boolean\n  /**\n   * The path of the field, e.g. [\"group\", \"myArray\", 1, \"textField\"]. The path is the schemaPath but with indexes and would be used in the context of field data, not field schemas.\n   */\n  path: (number | string)[]\n  /** The document before changes were applied, only in `afterChange` hooks. */\n  previousDoc?: TData\n  /** The sibling data of the document before changes being applied, only in `beforeChange`, `beforeValidate`, `beforeDuplicate` and `afterChange` field hooks. */\n  previousSiblingDoc?: TData\n  /** The previous value of the field, before changes, only in `beforeChange`, `afterChange`, `beforeDuplicate` and `beforeValidate` field hooks. */\n  previousValue?: TValue\n  /** The Express request object. It is mocked for Local API operations. */\n  req: PayloadRequestWithData\n  /**\n   * The schemaPath of the field, e.g. [\"group\", \"myArray\", \"textField\"]. The schemaPath is the path but without indexes and would be used in the context of field schemas, not field data.\n   */\n  schemaPath: string[]\n  /** The sibling data passed to a field that the hook is running against. */\n  siblingData: Partial<TSiblingData>\n  /**\n   * The original siblingData with locales (not modified by any hooks). Only available in `beforeChange` and `beforeDuplicate` field hooks.\n   */\n  siblingDocWithLocales?: Record<string, unknown>\n  /** The value of the field. */\n  value?: TValue\n}\n\nexport type FieldHook<TData extends TypeWithID = any, TValue = any, TSiblingData = any> = (\n  args: FieldHookArgs<TData, TValue, TSiblingData>,\n) => Promise<TValue> | TValue\n\nexport type FieldAccess<TData extends TypeWithID = any, TSiblingData = any> = (args: {\n  /**\n   * The incoming data used to `create` or `update` the document with. `data` is undefined during the `read` operation.\n   */\n  data?: Partial<TData>\n  /**\n   * The original data of the document before the `update` is applied. `doc` is undefined during the `create` operation.\n   */\n  doc?: TData\n  /**\n   * The `id` of the current document being read or updated. `id` is undefined during the `create` operation.\n   */\n  id?: number | string\n  /** The `payload` object to interface with the payload API */\n  req: PayloadRequestWithData\n  /**\n   * Immediately adjacent data to this field. For example, if this is a `group` field, then `siblingData` will be the other fields within the group.\n   */\n  siblingData?: Partial<TSiblingData>\n}) => Promise<boolean> | boolean\n\nexport type Condition<TData extends TypeWithID = any, TSiblingData = any> = (\n  data: Partial<TData>,\n  siblingData: Partial<TSiblingData>,\n  { user }: { user: PayloadRequestWithData['user'] },\n) => boolean\n\nexport type FilterOptionsProps<TData = any> = {\n  /**\n   * An object containing the full collection or global document currently being edited.\n   */\n  data: TData\n  /**\n   * The `id` of the current document being edited. `id` is undefined during the `create` operation.\n   */\n  id: number | string\n  /**\n   * The collection `slug` to filter against, limited to this field's `relationTo` property.\n   */\n  relationTo: CollectionSlug\n  /**\n   * An object containing document data that is scoped to only fields within the same parent of this field.\n   */\n  siblingData: unknown\n  /**\n   * An object containing the currently authenticated user.\n   */\n  user: Partial<PayloadRequestWithData['user']>\n}\n\nexport type FilterOptions<TData = any> =\n  | ((options: FilterOptionsProps<TData>) => Promise<Where | boolean> | Where | boolean)\n  | Where\n  | null\n\ntype Admin = {\n  className?: string\n  components?: {\n    Cell?: CustomComponent\n    Description?: DescriptionComponent\n    Field?: CustomComponent\n    /**\n     * The Filter component has to be a client component\n     */\n    Filter?: React.ComponentType<any>\n  }\n  /**\n   * You can programmatically show / hide fields based on what other fields are doing.\n   * This is also run on the server, to determine if the field should be validated.\n   */\n  condition?: Condition\n  /** Extension point to add your custom data. Available in server and client. */\n  custom?: Record<string, any>\n  description?: Description\n  disableBulkEdit?: boolean\n  /**\n   * Shows / hides fields from appearing in the list view column selector.\n   * @type boolean\n   */\n  disableListColumn?: boolean\n  /**\n   * Shows / hides fields from appearing in the list view filter options.\n   * @type boolean\n   */\n  disableListFilter?: boolean\n  disabled?: boolean\n  hidden?: boolean\n  position?: 'sidebar'\n  readOnly?: boolean\n  style?: CSSProperties\n  width?: string\n}\n\nexport type Labels = {\n  plural: LabelFunction | Record<string, string> | string\n  singular: LabelFunction | Record<string, string> | string\n}\n\nexport type BaseValidateOptions<TData, TSiblingData> = {\n  data: Partial<TData>\n  id?: number | string\n  operation?: Operation\n  preferences: DocumentPreferences\n  req: PayloadRequestWithData\n  siblingData: Partial<TSiblingData>\n}\n\nexport type ValidateOptions<TData, TSiblingData, TFieldConfig extends object> = BaseValidateOptions<\n  TData,\n  TSiblingData\n> &\n  TFieldConfig\n\nexport type Validate<\n  TValue = any,\n  TData = any,\n  TSiblingData = any,\n  TFieldConfig extends object = object,\n> = (\n  value: TValue,\n  options: ValidateOptions<TData, TSiblingData, TFieldConfig>,\n) => Promise<string | true> | string | true\n\nexport type ClientValidate = Omit<Validate, 'req'>\n\nexport type OptionObject = {\n  label: LabelFunction | Record<string, string> | string\n  value: string\n}\n\nexport type Option = OptionObject | string\n\nexport interface FieldBase {\n  access?: {\n    create?: FieldAccess\n    read?: FieldAccess\n    update?: FieldAccess\n  }\n  admin?: Admin\n  /** Extension point to add your custom data. Server only. */\n  custom?: Record<string, any>\n  defaultValue?: any\n  hidden?: boolean\n  hooks?: {\n    afterChange?: FieldHook[]\n    afterRead?: FieldHook[]\n    beforeChange?: FieldHook[]\n    /**\n     * Runs before a document is duplicated to prevent errors in unique fields or return null to use defaultValue.\n     */\n    beforeDuplicate?: FieldHook[]\n    beforeValidate?: FieldHook[]\n  }\n  index?: boolean\n  label?: LabelFunction | Record<string, string> | false | string\n  localized?: boolean\n  name: string\n  required?: boolean\n  saveToJWT?: boolean | string\n  /** Overrides Payload Typescript generation for the field  */\n  typescriptSchema?: JSONSchema4\n  unique?: boolean\n  validate?: Validate\n}\n\nexport type NumberField = FieldBase & {\n  admin?: Admin & {\n    /** Set this property to a string that will be used for browser autocomplete. */\n    autoComplete?: string\n    components?: {\n      Error?: CustomComponent<ErrorProps>\n      Label?: CustomComponent<LabelProps>\n      afterInput?: CustomComponent[]\n      beforeInput?: CustomComponent[]\n    }\n    /** Set this property to define a placeholder string for the field. */\n    placeholder?: Record<string, string> | string\n    /** Set a value for the number field to increment / decrement using browser controls. */\n    step?: number\n  }\n  /**\n   * Disables creation of the field schema in the SQL\n   * for [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges)\n   */\n  dbStore?: boolean\n  /**\n   * Changes SQL column type. With `bigint` and `integer` used in the default `validation` function to accept only integers.\n   */\n  dbType?: 'bigint' | 'integer' | 'numeric' | 'real'\n  /** Maximum value accepted. Used in the default `validation` function. */\n  max?: number\n  /** Minimum value accepted. Used in the default `validation` function. */\n  min?: number\n  type: 'number'\n} & (\n    | {\n        /** Makes this field an ordered array of numbers instead of just a single number. */\n        hasMany?: false | undefined\n        /** Maximum number of numbers in the numbers array, if `hasMany` is set to true. */\n        maxRows?: undefined\n        /** Minimum number of numbers in the numbers array, if `hasMany` is set to true. */\n        minRows?: undefined\n      }\n    | {\n        /** Store the field in a single JSON column in the SQL */\n        dbJsonColumn?: boolean\n        /** Makes this field an ordered array of numbers instead of just a single number. */\n        hasMany: true\n        /** Maximum number of numbers in the numbers array, if `hasMany` is set to true. */\n        maxRows?: number\n        /** Minimum number of numbers in the numbers array, if `hasMany` is set to true. */\n        minRows?: number\n      }\n  )\n\nexport type TextField = FieldBase & {\n  admin?: Admin & {\n    autoComplete?: string\n    components?: {\n      Error?: CustomComponent<ErrorProps>\n      Label?: CustomComponent<LabelProps>\n      afterInput?: CustomComponent[]\n      beforeInput?: CustomComponent[]\n    }\n    placeholder?: Record<string, string> | string\n    rtl?: boolean\n  }\n  /**\n   * Disables creation of the field schema in the SQL\n   * for [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges)\n   */\n  dbStore?: boolean\n  maxLength?: number\n  minLength?: number\n  type: 'text'\n} & (\n    | {\n        /** Makes this field an ordered array of strings instead of just a single string. */\n        hasMany?: false | undefined\n        /** Maximum number of strings in the strings array, if `hasMany` is set to true. */\n        maxRows?: undefined\n        /** Minimum number of strings in the strings array, if `hasMany` is set to true. */\n        minRows?: undefined\n      }\n    | {\n        /** Store the field in a single JSON column in the SQL */\n        dbJsonColumn?: boolean\n        /** Makes this field an ordered array of strings instead of just a single string. */\n        hasMany: true\n        /** Maximum number of strings in the strings array, if `hasMany` is set to true. */\n        maxRows?: number\n        /** Minimum number of strings in the strings array, if `hasMany` is set to true. */\n        minRows?: number\n      }\n  )\n\nexport type EmailField = FieldBase & {\n  admin?: Admin & {\n    autoComplete?: string\n    components?: {\n      Error?: CustomComponent<ErrorProps>\n      Label?: CustomComponent<LabelProps>\n      afterInput?: CustomComponent[]\n      beforeInput?: CustomComponent[]\n    }\n    placeholder?: Record<string, string> | string\n  }\n  /**\n   * Disables creation of the field schema in the SQL\n   * for [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges)\n   */\n  dbStore?: boolean\n  type: 'email'\n}\n\nexport type TextareaField = FieldBase & {\n  admin?: Admin & {\n    components?: {\n      Error?: CustomComponent<ErrorProps>\n      Label?: CustomComponent<LabelProps>\n      afterInput?: CustomComponent[]\n      beforeInput?: CustomComponent[]\n    }\n    placeholder?: Record<string, string> | string\n    rows?: number\n    rtl?: boolean\n  }\n  /**\n   * Disables creation of the field schema in the SQL\n   * for [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges)\n   */\n  dbStore?: boolean\n  maxLength?: number\n  minLength?: number\n  type: 'textarea'\n}\n\nexport type CheckboxField = FieldBase & {\n  admin?: Admin & {\n    components?: {\n      Error?: CustomComponent<ErrorProps>\n      Label?: CustomComponent<LabelProps>\n      afterInput?: CustomComponent[]\n      beforeInput?: CustomComponent[]\n    }\n  }\n  /**\n   * Disables creation of the field schema in the SQL\n   * for [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges)\n   */\n  dbStore?: boolean\n  type: 'checkbox'\n}\n\nexport type DateField = FieldBase & {\n  admin?: Admin & {\n    components?: {\n      Error?: CustomComponent<ErrorProps>\n      Label?: CustomComponent<LabelProps>\n      afterInput?: CustomComponent[]\n      beforeInput?: CustomComponent[]\n    }\n    date?: ConditionalDateProps\n    placeholder?: Record<string, string> | string\n  }\n  /**\n   * Disables creation of the field schema in the SQL\n   * for [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges)\n   */\n  dbStore?: boolean\n\n  type: 'date'\n}\n\nexport type GroupField = Omit<FieldBase, 'required' | 'validation'> & {\n  admin?: Admin & {\n    hideGutter?: boolean\n  }\n  /** Store the field in a single JSON column in the SQL */\n  dbJsonColumn?: boolean\n  /**\n   * Disables creation of the field schema in the SQL\n   * for [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges)\n   */\n  dbStore?: boolean\n  fields: Field[]\n  /** Customize generated GraphQL and Typescript schema names.\n   * By default, it is bound to the collection.\n   *\n   * This is useful if you would like to generate a top level type to share amongst collections/fields.\n   * **Note**: Top level types can collide, ensure they are unique amongst collections, arrays, groups, blocks, tabs.\n   */\n  interfaceName?: string\n  type: 'group'\n}\n\nexport type RowAdmin = Omit<Admin, 'description'>\n\nexport type RowField = Omit<FieldBase, 'admin' | 'label' | 'name'> & {\n  admin?: RowAdmin\n  fields: Field[]\n  type: 'row'\n}\n\nexport type CollapsibleField = Omit<FieldBase, 'label' | 'name'> & {\n  fields: Field[]\n  type: 'collapsible'\n} & (\n    | {\n        admin: Admin & {\n          components: {\n            RowLabel: RowLabelComponent\n          } & Admin['components']\n          initCollapsed?: boolean\n        }\n        label?: Required<FieldBase['label']>\n      }\n    | {\n        admin?: Admin & {\n          initCollapsed?: boolean\n        }\n        label: Required<FieldBase['label']>\n      }\n  )\n\nexport type TabsAdmin = Omit<Admin, 'description'>\n\ntype TabBase = Omit<FieldBase, 'required' | 'validation'> & {\n  description?: Description\n  fields: Field[]\n  interfaceName?: string\n  saveToJWT?: boolean | string\n}\n\nexport type NamedTab = TabBase & {\n  /** Customize generated GraphQL and Typescript schema names.\n   * The slug is used by default.\n   *\n   * This is useful if you would like to generate a top level type to share amongst collections/fields.\n   * **Note**: Top level types can collide, ensure they are unique amongst collections, arrays, groups, blocks, tabs.\n   */\n  interfaceName?: string\n}\n\nexport type UnnamedTab = Omit<TabBase, 'name'> & {\n  interfaceName?: never\n  /**\n   * Can be either:\n   * - A string, which will be used as the tab's label.\n   * - An object, where the key is the language code and the value is the label.\n   */\n  label:\n    | {\n        [selectedLanguage: string]: string\n      }\n    | LabelFunction\n    | string\n  localized?: never\n}\n\nexport type Tab = NamedTab | UnnamedTab\n\nexport type TabsField = Omit<FieldBase, 'admin' | 'localized' | 'name' | 'saveToJWT'> & {\n  admin?: TabsAdmin\n  tabs: Tab[]\n  type: 'tabs'\n}\n\nexport type TabAsField = Tab & {\n  /** Store the field in a single JSON column in the SQL */\n  dbJsonColumn?: boolean\n  /**\n   * Disables creation of the field schema in the SQL\n   * for [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges)\n   */\n  dbStore?: boolean\n  name?: string\n  type: 'tab'\n}\n\nexport type UIField = {\n  admin: {\n    components?: {\n      Cell?: CustomComponent\n      Field: CustomComponent\n      /**\n       * The Filter component has to be a client component\n       */\n      Filter?: React.ComponentType<any>\n    }\n    condition?: Condition\n    /** Extension point to add your custom data. Available in server and client. */\n    custom?: Record<string, any>\n    disableBulkEdit?: boolean\n    /**\n     * Shows / hides fields from appearing in the list view column selector.\n     * @type boolean\n     */\n    disableListColumn?: boolean\n    position?: string\n    width?: string\n  }\n  /** Extension point to add your custom data. Server only. */\n  custom?: Record<string, any>\n  label?: Record<string, string> | string\n  name: string\n  type: 'ui'\n}\n\nexport type UploadField = FieldBase & {\n  admin?: {\n    components?: {\n      Error?: CustomComponent<ErrorProps>\n      Label?: CustomComponent<LabelProps>\n    }\n  }\n  /** Store the field in a single JSON column in the SQL */\n  dbJsonColumn?: boolean\n  /**\n   * Disables creation of the field schema in the SQL\n   * for [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges)\n   */\n  dbStore?: boolean\n  filterOptions?: FilterOptions\n  /**\n   * Sets a maximum population depth for this field, regardless of the remaining depth when this field is reached.\n   *\n   * {@link https://payloadcms.com/docs/getting-started/concepts#field-level-max-depth}\n   */\n  maxDepth?: number\n  relationTo: CollectionSlug\n  type: 'upload'\n}\n\ntype CodeAdmin = Admin & {\n  components?: {\n    Error?: CustomComponent<ErrorProps>\n    Label?: CustomComponent<LabelProps>\n  }\n  editorOptions?: EditorProps['options']\n  language?: string\n}\n\nexport type CodeField = Omit<FieldBase, 'admin'> & {\n  admin?: CodeAdmin\n  maxLength?: number\n  minLength?: number\n  type: 'code'\n}\n\ntype JSONAdmin = Admin & {\n  components?: {\n    Error?: CustomComponent<ErrorProps>\n    Label?: CustomComponent<LabelProps>\n  }\n  editorOptions?: EditorProps['options']\n}\n\nexport type JSONField = Omit<FieldBase, 'admin'> & {\n  admin?: JSONAdmin\n  jsonSchema?: {\n    fileMatch: string[]\n    schema: JSONSchema4\n    uri: string\n  }\n  type: 'json'\n}\n\nexport type SelectField = FieldBase & {\n  admin?: Admin & {\n    components?: {\n      Error?: CustomComponent<ErrorProps>\n      Label?: CustomComponent<LabelProps>\n    }\n    isClearable?: boolean\n    isSortable?: boolean\n  }\n  /** Store the field in a single JSON column in the SQL */\n  dbJsonColumn?: boolean\n  /**\n   * Customize the SQL table name\n   */\n  dbName?: DBIdentifierName\n  /**\n   * Disables creation of the field schema in the SQL\n   * for [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges)\n   */\n  dbStore?: boolean\n  /**\n   * Customize the DB enum naFme\n   */\n  enumName?: DBIdentifierName\n  hasMany?: boolean\n  options: Option[]\n  type: 'select'\n}\n\ntype SharedRelationshipProperties = FieldBase & {\n  /**\n   * Disables creation of the field schema in the SQL\n   * for [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges)\n   */\n  dbStore?: boolean\n  filterOptions?: FilterOptions\n  hasMany?: boolean\n  /**\n   * Sets a maximum population depth for this field, regardless of the remaining depth when this field is reached.\n   *\n   * {@link https://payloadcms.com/docs/getting-started/concepts#field-level-max-depth}\n   */\n  maxDepth?: number\n  type: 'relationship'\n} & (\n    | {\n        /** Store the field in a single JSON column in the SQL */\n        dbJsonColumn?: boolean\n        hasMany: true\n        /**\n         * @deprecated Use 'maxRows' instead\n         */\n        max?: number\n        maxRows?: number\n        /**\n         * @deprecated Use 'minRows' instead\n         */\n        min?: number\n        minRows?: number\n      }\n    | {\n        hasMany?: false | undefined\n        /**\n         * @deprecated Use 'maxRows' instead\n         */\n        max?: undefined\n        maxRows?: undefined\n        /**\n         * @deprecated Use 'minRows' instead\n         */\n        min?: undefined\n        minRows?: undefined\n      }\n  )\n\ntype RelationshipAdmin = Admin & {\n  allowCreate?: boolean\n  components?: {\n    Error?: CustomComponent<ErrorProps>\n    Label?: CustomComponent<LabelProps>\n  }\n  isSortable?: boolean\n}\nexport type PolymorphicRelationshipField = SharedRelationshipProperties & {\n  admin?: RelationshipAdmin & {\n    sortOptions?: { [collectionSlug: CollectionSlug]: string }\n  }\n  /** Store the field in a single JSON column in the SQL */\n  dbJsonColumn?: boolean\n  relationTo: CollectionSlug[]\n}\nexport type SingleRelationshipField = SharedRelationshipProperties & {\n  admin?: RelationshipAdmin & {\n    sortOptions?: string\n  }\n  relationTo: CollectionSlug\n}\nexport type RelationshipField = PolymorphicRelationshipField | SingleRelationshipField\n\nexport type ValueWithRelation = {\n  relationTo: CollectionSlug\n  value: number | string\n}\n\nexport function valueIsValueWithRelation(value: unknown): value is ValueWithRelation {\n  return value !== null && typeof value === 'object' && 'relationTo' in value && 'value' in value\n}\n\nexport type RelationshipValue =\n  | (number | string)[]\n  | ValueWithRelation\n  | ValueWithRelation[]\n  | (number | string)\n\nexport type RichTextField<\n  Value extends object = any,\n  AdapterProps = any,\n  ExtraProperties = object,\n> = FieldBase & {\n  admin?: Admin & {\n    components?: {\n      Error?: CustomComponent<ErrorProps>\n      Label?: CustomComponent<LabelProps>\n    }\n  }\n  editor?:\n    | RichTextAdapter<Value, AdapterProps, AdapterProps>\n    | RichTextAdapterProvider<Value, AdapterProps, AdapterProps>\n  /**\n   * Sets a maximum population depth for this field, regardless of the remaining depth when this field is reached.\n   *\n   * {@link https://payloadcms.com/docs/getting-started/concepts#field-level-max-depth}\n   */\n  maxDepth?: number\n  type: 'richText'\n} & ExtraProperties\n\nexport type ArrayField = FieldBase & {\n  admin?: Admin & {\n    components?: {\n      RowLabel?: RowLabelComponent\n    } & Admin['components']\n    initCollapsed?: boolean\n    /**\n     * Disable drag and drop sorting\n     */\n    isSortable?: boolean\n  }\n  /** Store the field in a single JSON column in the SQL */\n  dbJsonColumn?: boolean\n  /**\n   * Customize the SQL table name\n   */\n  dbName?: DBIdentifierName\n  /**\n   * Disables creation of the field schema in the SQL\n   * for [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges)\n   */\n  dbStore?: boolean\n  fields: Field[]\n  /** Customize generated GraphQL and Typescript schema names.\n   * By default, it is bound to the collection.\n   *\n   * This is useful if you would like to generate a top level type to share amongst collections/fields.\n   * **Note**: Top level types can collide, ensure they are unique amongst collections, arrays, groups, blocks, tabs.\n   */\n  interfaceName?: string\n  labels?: Labels\n  maxRows?: number\n  minRows?: number\n  type: 'array'\n}\n\nexport type RadioField = FieldBase & {\n  admin?: Admin & {\n    components?: {\n      Error?: CustomComponent<ErrorProps>\n      Label?: CustomComponent<LabelProps>\n    }\n    layout?: 'horizontal' | 'vertical'\n  }\n  /**\n   * Customize the SQL table name\n   */\n  dbName?: DBIdentifierName\n  /**\n   * Disables creation of the field schema in the SQL\n   * for [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges)\n   */\n  dbStore?: boolean\n  /**\n   * Customize the DB enum name\n   */\n  enumName?: DBIdentifierName\n  options: Option[]\n  type: 'radio'\n}\n\nexport type Block = {\n  admin?: {\n    /** Extension point to add your custom data. Available in server and client. */\n    custom?: Record<string, any>\n  }\n  /** Extension point to add your custom data. Server only. */\n  custom?: Record<string, any>\n  /**\n   * Customize the SQL table name\n   */\n  dbName?: DBIdentifierName\n  fields: Field[]\n  /** @deprecated - please migrate to the interfaceName property instead. */\n  graphQL?: {\n    singularName?: string\n  }\n  imageAltText?: string\n  imageURL?: string\n  /** Customize generated GraphQL and Typescript schema names.\n   * The slug is used by default.\n   *\n   * This is useful if you would like to generate a top level type to share amongst collections/fields.\n   * **Note**: Top level types can collide, ensure they are unique amongst collections, arrays, groups, blocks, tabs.\n   */\n  interfaceName?: string\n  labels?: Labels\n  slug: string\n}\n\nexport type BlockField = FieldBase & {\n  admin?: Admin & {\n    initCollapsed?: boolean\n    /**\n     * Disable drag and drop sorting\n     */\n    isSortable?: boolean\n  }\n  blocks: Block[]\n  /** Store the field in a single JSON column in the SQL */\n  dbJsonColumn?: boolean\n  /**\n   * Disables creation of the field schema in the SQL\n   * for [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges)\n   */\n  dbStore?: boolean\n  defaultValue?: unknown\n  labels?: Labels\n  maxRows?: number\n  minRows?: number\n\n  type: 'blocks'\n}\n\nexport type PointField = FieldBase & {\n  type: 'point'\n}\n\nexport type Field =\n  | ArrayField\n  | BlockField\n  | CheckboxField\n  | CodeField\n  | CollapsibleField\n  | DateField\n  | EmailField\n  | GroupField\n  | JSONField\n  | NumberField\n  | PointField\n  | RadioField\n  | RelationshipField\n  | RichTextField\n  | RowField\n  | SelectField\n  | TabsField\n  | TextField\n  | TextareaField\n  | UIField\n  | UploadField\n\nexport type FieldAffectingData =\n  | ArrayField\n  | BlockField\n  | CheckboxField\n  | CodeField\n  | DateField\n  | EmailField\n  | GroupField\n  | JSONField\n  | NumberField\n  | PointField\n  | RadioField\n  | RelationshipField\n  | RichTextField\n  | SelectField\n  | TabAsField\n  | TextField\n  | TextareaField\n  | UploadField\n\nexport type NonPresentationalField =\n  | ArrayField\n  | BlockField\n  | CheckboxField\n  | CodeField\n  | CollapsibleField\n  | DateField\n  | EmailField\n  | GroupField\n  | JSONField\n  | NumberField\n  | PointField\n  | RadioField\n  | RelationshipField\n  | RichTextField\n  | RowField\n  | SelectField\n  | TabsField\n  | TextField\n  | TextareaField\n  | UploadField\n\nexport type FieldWithPath = Field & {\n  path?: string\n}\n\nexport type FieldWithSubFields = ArrayField | CollapsibleField | GroupField | RowField\n\nexport type FieldPresentationalOnly = UIField\n\nexport type FieldWithMany = RelationshipField | SelectField\n\nexport type FieldWithMaxDepth = RelationshipField | UploadField\n\nexport function fieldHasSubFields(field: ClientFieldConfig | Field): field is FieldWithSubFields {\n  return (\n    field.type === 'group' ||\n    field.type === 'array' ||\n    field.type === 'row' ||\n    field.type === 'collapsible'\n  )\n}\n\nexport function fieldIsArrayType(field: Field): field is ArrayField {\n  return field.type === 'array'\n}\n\nexport function fieldIsBlockType(field: Field): field is BlockField {\n  return field.type === 'blocks'\n}\n\nexport function fieldIsGroupType(field: Field): field is GroupField {\n  return field.type === 'group'\n}\n\nexport function optionIsObject(option: Option): option is OptionObject {\n  return typeof option === 'object'\n}\n\nexport function optionsAreObjects(options: Option[]): options is OptionObject[] {\n  return Array.isArray(options) && typeof options?.[0] === 'object'\n}\n\nexport function optionIsValue(option: Option): option is string {\n  return typeof option === 'string'\n}\n\nexport function fieldSupportsMany(field: Field): field is FieldWithMany {\n  return field.type === 'select' || field.type === 'relationship'\n}\n\nexport function fieldHasMaxDepth(field: Field): field is FieldWithMaxDepth {\n  return (\n    (field.type === 'upload' || field.type === 'relationship') && typeof field.maxDepth === 'number'\n  )\n}\n\nexport function fieldIsPresentationalOnly(\n  field: ClientFieldConfig | Field | TabAsField,\n): field is UIField {\n  return field.type === 'ui'\n}\n\nexport function fieldAffectsData(\n  field: ClientFieldConfig | Field | TabAsField,\n): field is FieldAffectingData {\n  return 'name' in field && !fieldIsPresentationalOnly(field)\n}\n\nexport function tabHasName(tab: Tab): tab is NamedTab {\n  return 'name' in tab\n}\n\nexport function fieldIsLocalized(field: Field | Tab): boolean {\n  return 'localized' in field && field.localized\n}\n\nexport type HookName =\n  | 'afterChange'\n  | 'afterRead'\n  | 'beforeChange'\n  | 'beforeRead'\n  | 'beforeValidate'\n"],"names":["valueIsValueWithRelation","value","fieldHasSubFields","field","type","fieldIsArrayType","fieldIsBlockType","fieldIsGroupType","optionIsObject","option","optionsAreObjects","options","Array","isArray","optionIsValue","fieldSupportsMany","fieldHasMaxDepth","maxDepth","fieldIsPresentationalOnly","fieldAffectsData","tabHasName","tab","fieldIsLocalized","localized"],"mappings":"AAAA,qDAAqD,GACrD,uCAAuC,GAksBvC,OAAO,SAASA,yBAAyBC,KAAc;IACrD,OAAOA,UAAU,QAAQ,OAAOA,UAAU,YAAY,gBAAgBA,SAAS,WAAWA;AAC5F;AAkOA,OAAO,SAASC,kBAAkBC,KAAgC;IAChE,OACEA,MAAMC,IAAI,KAAK,WACfD,MAAMC,IAAI,KAAK,WACfD,MAAMC,IAAI,KAAK,SACfD,MAAMC,IAAI,KAAK;AAEnB;AAEA,OAAO,SAASC,iBAAiBF,KAAY;IAC3C,OAAOA,MAAMC,IAAI,KAAK;AACxB;AAEA,OAAO,SAASE,iBAAiBH,KAAY;IAC3C,OAAOA,MAAMC,IAAI,KAAK;AACxB;AAEA,OAAO,SAASG,iBAAiBJ,KAAY;IAC3C,OAAOA,MAAMC,IAAI,KAAK;AACxB;AAEA,OAAO,SAASI,eAAeC,MAAc;IAC3C,OAAO,OAAOA,WAAW;AAC3B;AAEA,OAAO,SAASC,kBAAkBC,OAAiB;IACjD,OAAOC,MAAMC,OAAO,CAACF,YAAY,OAAOA,SAAS,CAAC,EAAE,KAAK;AAC3D;AAEA,OAAO,SAASG,cAAcL,MAAc;IAC1C,OAAO,OAAOA,WAAW;AAC3B;AAEA,OAAO,SAASM,kBAAkBZ,KAAY;IAC5C,OAAOA,MAAMC,IAAI,KAAK,YAAYD,MAAMC,IAAI,KAAK;AACnD;AAEA,OAAO,SAASY,iBAAiBb,KAAY;IAC3C,OACE,AAACA,CAAAA,MAAMC,IAAI,KAAK,YAAYD,MAAMC,IAAI,KAAK,cAAa,KAAM,OAAOD,MAAMc,QAAQ,KAAK;AAE5F;AAEA,OAAO,SAASC,0BACdf,KAA6C;IAE7C,OAAOA,MAAMC,IAAI,KAAK;AACxB;AAEA,OAAO,SAASe,iBACdhB,KAA6C;IAE7C,OAAO,UAAUA,SAAS,CAACe,0BAA0Bf;AACvD;AAEA,OAAO,SAASiB,WAAWC,GAAQ;IACjC,OAAO,UAAUA;AACnB;AAEA,OAAO,SAASC,iBAAiBnB,KAAkB;IACjD,OAAO,eAAeA,SAASA,MAAMoB,SAAS;AAChD"}