{"version":3,"sources":["../../src/find/buildFindManyArgs.ts"],"sourcesContent":["import type { DBQueryConfig } from 'drizzle-orm'\nimport type { Field } from 'payload'\n\nimport type { PostgresAdapter } from '../types.js'\n\nimport { traverseFields } from './traverseFields.js'\n\ntype BuildFindQueryArgs = {\n  adapter: PostgresAdapter\n  depth: number\n  fields: Field[]\n  tableName: string\n}\n\nexport type Result = DBQueryConfig<'many', true, any, any> & {\n  with?: DBQueryConfig<'many', true, any, any> & {\n    _locales?: DBQueryConfig<'many', true, any, any>\n  }\n}\n\n// Generate the Drizzle query for findMany based on\n// a collection field structure\nexport const buildFindManyArgs = ({\n  adapter,\n  depth,\n  fields,\n  tableName,\n}: BuildFindQueryArgs): Record<string, unknown> => {\n  const result: Result = {\n    with: {},\n  }\n\n  const _locales: Result = {\n    columns: {\n      id: false,\n      _parentID: false,\n    },\n    with: {},\n  }\n\n  if (adapter.tables[`${tableName}_texts`]) {\n    result.with._texts = {\n      columns: {\n        id: false,\n        parent: false,\n      },\n      orderBy: ({ order }, { asc: ASC }) => [ASC(order)],\n    }\n  }\n\n  if (adapter.tables[`${tableName}_numbers`]) {\n    result.with._numbers = {\n      columns: {\n        id: false,\n        parent: false,\n      },\n      orderBy: ({ order }, { asc: ASC }) => [ASC(order)],\n    }\n  }\n\n  if (adapter.tables[`${tableName}${adapter.relationshipsSuffix}`]) {\n    result.with._rels = {\n      columns: {\n        id: false,\n        parent: false,\n      },\n      orderBy: ({ order }, { asc: ASC }) => [ASC(order)],\n    }\n  }\n\n  if (adapter.tables[`${tableName}${adapter.localesSuffix}`]) {\n    result.with._locales = _locales\n  }\n\n  traverseFields({\n    _locales,\n    adapter,\n    currentArgs: result,\n    currentTableName: tableName,\n    depth,\n    fields,\n    path: '',\n    topLevelArgs: result,\n    topLevelTableName: tableName,\n  })\n\n  return result\n}\n"],"names":["traverseFields","buildFindManyArgs","adapter","depth","fields","tableName","result","with","_locales","columns","id","_parentID","tables","_texts","parent","orderBy","order","asc","ASC","_numbers","relationshipsSuffix","_rels","localesSuffix","currentArgs","currentTableName","path","topLevelArgs","topLevelTableName"],"mappings":"AAKA,SAASA,cAAc,QAAQ,sBAAqB;AAepD,mDAAmD;AACnD,+BAA+B;AAC/B,OAAO,MAAMC,oBAAoB,CAAC,EAChCC,OAAO,EACPC,KAAK,EACLC,MAAM,EACNC,SAAS,EACU;IACnB,MAAMC,SAAiB;QACrBC,MAAM,CAAC;IACT;IAEA,MAAMC,WAAmB;QACvBC,SAAS;YACPC,IAAI;YACJC,WAAW;QACb;QACAJ,MAAM,CAAC;IACT;IAEA,IAAIL,QAAQU,MAAM,CAAC,CAAC,EAAEP,UAAU,MAAM,CAAC,CAAC,EAAE;QACxCC,OAAOC,IAAI,CAACM,MAAM,GAAG;YACnBJ,SAAS;gBACPC,IAAI;gBACJI,QAAQ;YACV;YACAC,SAAS,CAAC,EAAEC,KAAK,EAAE,EAAE,EAAEC,KAAKC,GAAG,EAAE,GAAK;oBAACA,IAAIF;iBAAO;QACpD;IACF;IAEA,IAAId,QAAQU,MAAM,CAAC,CAAC,EAAEP,UAAU,QAAQ,CAAC,CAAC,EAAE;QAC1CC,OAAOC,IAAI,CAACY,QAAQ,GAAG;YACrBV,SAAS;gBACPC,IAAI;gBACJI,QAAQ;YACV;YACAC,SAAS,CAAC,EAAEC,KAAK,EAAE,EAAE,EAAEC,KAAKC,GAAG,EAAE,GAAK;oBAACA,IAAIF;iBAAO;QACpD;IACF;IAEA,IAAId,QAAQU,MAAM,CAAC,CAAC,EAAEP,UAAU,EAAEH,QAAQkB,mBAAmB,CAAC,CAAC,CAAC,EAAE;QAChEd,OAAOC,IAAI,CAACc,KAAK,GAAG;YAClBZ,SAAS;gBACPC,IAAI;gBACJI,QAAQ;YACV;YACAC,SAAS,CAAC,EAAEC,KAAK,EAAE,EAAE,EAAEC,KAAKC,GAAG,EAAE,GAAK;oBAACA,IAAIF;iBAAO;QACpD;IACF;IAEA,IAAId,QAAQU,MAAM,CAAC,CAAC,EAAEP,UAAU,EAAEH,QAAQoB,aAAa,CAAC,CAAC,CAAC,EAAE;QAC1DhB,OAAOC,IAAI,CAACC,QAAQ,GAAGA;IACzB;IAEAR,eAAe;QACbQ;QACAN;QACAqB,aAAajB;QACbkB,kBAAkBnB;QAClBF;QACAC;QACAqB,MAAM;QACNC,cAAcpB;QACdqB,mBAAmBtB;IACrB;IAEA,OAAOC;AACT,EAAC"}