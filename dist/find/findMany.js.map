{"version":3,"sources":["../../src/find/findMany.ts"],"sourcesContent":["import type { Field, FindArgs, PayloadRequestWithData, TypeWithID } from 'payload'\n\nimport { inArray, sql } from 'drizzle-orm'\n\nimport type { PostgresAdapter } from '../types.js'\nimport type { ChainedMethods } from './chainMethods.js'\n\nimport buildQuery from '../queries/buildQuery.js'\nimport { selectDistinct } from '../queries/selectDistinct.js'\nimport { transform } from '../transform/read/index.js'\nimport { buildFindManyArgs } from './buildFindManyArgs.js'\nimport { chainMethods } from './chainMethods.js'\n\ntype Args = Omit<FindArgs, 'collection'> & {\n  adapter: PostgresAdapter\n  fields: Field[]\n  tableName: string\n}\n\nexport const findMany = async function find({\n  adapter,\n  fields,\n  limit: limitArg,\n  locale,\n  page = 1,\n  pagination,\n  req = {} as PayloadRequestWithData,\n  skip,\n  sort,\n  tableName,\n  where: whereArg,\n}: Args) {\n  const db = adapter.sessions[req.transactionID]?.db || adapter.drizzle\n  const table = adapter.tables[tableName]\n\n  const limit = limitArg ?? 10\n  let totalDocs: number\n  let totalPages: number\n  let hasPrevPage: boolean\n  let hasNextPage: boolean\n  let pagingCounter: number\n\n  const { joins, orderBy, selectFields, where } = await buildQuery({\n    adapter,\n    fields,\n    locale,\n    sort,\n    tableName,\n    where: whereArg,\n  })\n\n  const orderedIDMap: Record<number | string, number> = {}\n  let orderedIDs: (number | string)[]\n\n  const selectDistinctMethods: ChainedMethods = []\n\n  if (orderBy?.order && orderBy?.column) {\n    selectDistinctMethods.push({\n      args: [orderBy.order(orderBy.column)],\n      method: 'orderBy',\n    })\n  }\n\n  const findManyArgs = buildFindManyArgs({\n    adapter,\n    depth: 0,\n    fields,\n    tableName,\n  })\n\n  selectDistinctMethods.push({ args: [skip || (page - 1) * limit], method: 'offset' })\n  selectDistinctMethods.push({ args: [limit === 0 ? undefined : limit], method: 'limit' })\n\n  const selectDistinctResult = await selectDistinct({\n    adapter,\n    chainedMethods: selectDistinctMethods,\n    db,\n    joins,\n    selectFields,\n    tableName,\n    where,\n  })\n\n  if (selectDistinctResult) {\n    if (selectDistinctResult.length === 0) {\n      return {\n        docs: [],\n        hasNextPage: false,\n        hasPrevPage: false,\n        limit,\n        nextPage: null,\n        page: 1,\n        pagingCounter: 0,\n        prevPage: null,\n        totalDocs: 0,\n        totalPages: 0,\n      }\n    } else {\n      // set the id in an object for sorting later\n      selectDistinctResult.forEach(({ id }, i) => {\n        orderedIDMap[id] = i\n      })\n      orderedIDs = Object.keys(orderedIDMap)\n      findManyArgs.where = inArray(adapter.tables[tableName].id, orderedIDs)\n    }\n  } else {\n    findManyArgs.limit = limitArg === 0 ? undefined : limitArg\n\n    const offset = skip || (page - 1) * limitArg\n\n    if (!Number.isNaN(offset)) findManyArgs.offset = offset\n\n    if (where) {\n      findManyArgs.where = where\n    }\n    findManyArgs.orderBy = orderBy.order(orderBy.column)\n  }\n\n  const findPromise = db.query[tableName].findMany(findManyArgs)\n\n  if (pagination !== false && (orderedIDs ? orderedIDs?.length <= limit : true)) {\n    const selectCountMethods: ChainedMethods = []\n    joins.forEach(({ condition, table }) => {\n      selectCountMethods.push({\n        args: [table, condition],\n        method: 'leftJoin',\n      })\n    })\n\n    const countResult = await chainMethods({\n      methods: selectCountMethods,\n      query: db\n        .select({\n          count: sql<number>`count\n            (DISTINCT ${adapter.tables[tableName].id})`,\n        })\n        .from(table)\n        .where(where),\n    })\n    totalDocs = Number(countResult[0].count)\n    totalPages = typeof limit === 'number' && limit !== 0 ? Math.ceil(totalDocs / limit) : 1\n    hasPrevPage = page > 1\n    hasNextPage = totalPages > page\n    pagingCounter = (page - 1) * limit + 1\n  }\n\n  const rawDocs = await findPromise\n  // sort rawDocs from selectQuery\n  if (Object.keys(orderedIDMap).length > 0) {\n    rawDocs.sort((a, b) => orderedIDMap[a.id] - orderedIDMap[b.id])\n  }\n\n  if (pagination === false || !totalDocs) {\n    totalDocs = rawDocs.length\n    totalPages = 1\n    pagingCounter = 1\n    hasPrevPage = false\n    hasNextPage = false\n  }\n\n  const docs = rawDocs.map((data: TypeWithID) => {\n    return transform({\n      adapter,\n      config: adapter.payload.config,\n      data,\n      fields,\n    })\n  })\n\n  return {\n    docs,\n    hasNextPage,\n    hasPrevPage,\n    limit,\n    nextPage: hasNextPage ? page + 1 : null,\n    page,\n    pagingCounter,\n    prevPage: hasPrevPage ? page - 1 : null,\n    totalDocs,\n    totalPages,\n  }\n}\n"],"names":["inArray","sql","buildQuery","selectDistinct","transform","buildFindManyArgs","chainMethods","findMany","find","adapter","fields","limit","limitArg","locale","page","pagination","req","skip","sort","tableName","where","whereArg","db","sessions","transactionID","drizzle","table","tables","totalDocs","totalPages","hasPrevPage","hasNextPage","pagingCounter","joins","orderBy","selectFields","orderedIDMap","orderedIDs","selectDistinctMethods","order","column","push","args","method","findManyArgs","depth","undefined","selectDistinctResult","chainedMethods","length","docs","nextPage","prevPage","forEach","id","i","Object","keys","offset","Number","isNaN","findPromise","query","selectCountMethods","condition","countResult","methods","select","count","from","Math","ceil","rawDocs","a","b","map","data","config","payload"],"mappings":"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"}