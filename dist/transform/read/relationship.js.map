{"version":3,"sources":["../../../src/transform/read/relationship.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport type { RelationshipField, UploadField } from 'payload'\n\ntype Args = {\n  field: RelationshipField | UploadField\n  locale?: string\n  ref: Record<string, unknown>\n  relations: Record<string, unknown>[]\n}\n\nexport const transformRelationship = ({ field, locale, ref, relations }: Args) => {\n  let result: unknown\n\n  if (!('hasMany' in field) || field.hasMany === false) {\n    const relation = relations[0]\n\n    if (relation) {\n      // Handle hasOne Poly\n      if (Array.isArray(field.relationTo)) {\n        const matchedRelation = Object.entries(relation).find(\n          ([key, val]) =>\n            val !== null && !['id', 'locale', 'order', 'parent', 'path'].includes(key),\n        )\n\n        if (matchedRelation) {\n          const relationTo = matchedRelation[0].replace('ID', '')\n\n          result = {\n            relationTo,\n            value: matchedRelation[1],\n          }\n        }\n      }\n    }\n  } else {\n    const transformedRelations = []\n\n    relations.forEach((relation) => {\n      // Handle hasMany\n      if (!Array.isArray(field.relationTo)) {\n        const relatedData = relation[`${field.relationTo}ID`]\n\n        if (relatedData) {\n          transformedRelations.push(relatedData)\n        }\n      } else {\n        // Handle hasMany Poly\n        const matchedRelation = Object.entries(relation).find(\n          ([key, val]) =>\n            val !== null && !['id', 'locale', 'order', 'parent', 'path'].includes(key),\n        )\n\n        if (matchedRelation) {\n          const relationTo = matchedRelation[0].replace('ID', '')\n\n          transformedRelations.push({\n            relationTo,\n            value: matchedRelation[1],\n          })\n        }\n      }\n    })\n\n    result = transformedRelations\n  }\n\n  if (locale) {\n    ref[field.name][locale] = result\n  } else {\n    ref[field.name] = result\n  }\n}\n"],"names":["transformRelationship","field","locale","ref","relations","result","hasMany","relation","Array","isArray","relationTo","matchedRelation","Object","entries","find","key","val","includes","replace","value","transformedRelations","forEach","relatedData","push","name"],"mappings":"AAAA,oCAAoC,GAUpC,OAAO,MAAMA,wBAAwB,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAEC,GAAG,EAAEC,SAAS,EAAQ;IAC3E,IAAIC;IAEJ,IAAI,CAAE,CAAA,aAAaJ,KAAI,KAAMA,MAAMK,OAAO,KAAK,OAAO;QACpD,MAAMC,WAAWH,SAAS,CAAC,EAAE;QAE7B,IAAIG,UAAU;YACZ,qBAAqB;YACrB,IAAIC,MAAMC,OAAO,CAACR,MAAMS,UAAU,GAAG;gBACnC,MAAMC,kBAAkBC,OAAOC,OAAO,CAACN,UAAUO,IAAI,CACnD,CAAC,CAACC,KAAKC,IAAI,GACTA,QAAQ,QAAQ,CAAC;wBAAC;wBAAM;wBAAU;wBAAS;wBAAU;qBAAO,CAACC,QAAQ,CAACF;gBAG1E,IAAIJ,iBAAiB;oBACnB,MAAMD,aAAaC,eAAe,CAAC,EAAE,CAACO,OAAO,CAAC,MAAM;oBAEpDb,SAAS;wBACPK;wBACAS,OAAOR,eAAe,CAAC,EAAE;oBAC3B;gBACF;YACF;QACF;IACF,OAAO;QACL,MAAMS,uBAAuB,EAAE;QAE/BhB,UAAUiB,OAAO,CAAC,CAACd;YACjB,iBAAiB;YACjB,IAAI,CAACC,MAAMC,OAAO,CAACR,MAAMS,UAAU,GAAG;gBACpC,MAAMY,cAAcf,QAAQ,CAAC,CAAC,EAAEN,MAAMS,UAAU,CAAC,EAAE,CAAC,CAAC;gBAErD,IAAIY,aAAa;oBACfF,qBAAqBG,IAAI,CAACD;gBAC5B;YACF,OAAO;gBACL,sBAAsB;gBACtB,MAAMX,kBAAkBC,OAAOC,OAAO,CAACN,UAAUO,IAAI,CACnD,CAAC,CAACC,KAAKC,IAAI,GACTA,QAAQ,QAAQ,CAAC;wBAAC;wBAAM;wBAAU;wBAAS;wBAAU;qBAAO,CAACC,QAAQ,CAACF;gBAG1E,IAAIJ,iBAAiB;oBACnB,MAAMD,aAAaC,eAAe,CAAC,EAAE,CAACO,OAAO,CAAC,MAAM;oBAEpDE,qBAAqBG,IAAI,CAAC;wBACxBb;wBACAS,OAAOR,eAAe,CAAC,EAAE;oBAC3B;gBACF;YACF;QACF;QAEAN,SAASe;IACX;IAEA,IAAIlB,QAAQ;QACVC,GAAG,CAACF,MAAMuB,IAAI,CAAC,CAACtB,OAAO,GAAGG;IAC5B,OAAO;QACLF,GAAG,CAACF,MAAMuB,IAAI,CAAC,GAAGnB;IACpB;AACF,EAAC"}