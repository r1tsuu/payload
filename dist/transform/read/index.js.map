{"version":3,"sources":["../../../src/transform/read/index.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport type { Field, SanitizedConfig, TypeWithID } from 'payload'\n\nimport type { PostgresAdapter } from '../../types.js'\n\nimport { createBlocksMap } from '../../utilities/createBlocksMap.js'\nimport { createPathMap } from '../../utilities/createRelationshipMap.js'\nimport { traverseFields } from './traverseFields.js'\n\ntype TransformArgs = {\n  adapter: PostgresAdapter\n  config: SanitizedConfig\n  data: Record<string, unknown>\n  fallbackLocale?: false | string\n  fields: Field[]\n  locale?: string\n}\n\n// This is the entry point to transform Drizzle output data\n// into the shape Payload expects based on field schema\nexport const transform = <T extends Record<string, unknown> | TypeWithID>({\n  adapter,\n  config,\n  data,\n  fields,\n}: TransformArgs): T => {\n  let relationships: Record<string, Record<string, unknown>[]> = {}\n  let texts: Record<string, Record<string, unknown>[]> = {}\n  let numbers: Record<string, Record<string, unknown>[]> = {}\n\n  if ('_rels' in data) {\n    relationships = createPathMap(data._rels)\n    delete data._rels\n  }\n\n  if ('_texts' in data) {\n    texts = createPathMap(data._texts)\n    delete data._texts\n  }\n\n  if ('_numbers' in data) {\n    numbers = createPathMap(data._numbers)\n    delete data._numbers\n  }\n\n  const blocks = createBlocksMap(data)\n  const deletions = []\n\n  const result = traverseFields<T>({\n    adapter,\n    blocks,\n    config,\n    dataRef: {\n      id: data.id,\n    },\n    deletions,\n    fieldPrefix: '',\n    fields,\n    numbers,\n    path: '',\n    relationships,\n    table: data,\n    texts,\n  })\n\n  deletions.forEach((deletion) => deletion())\n\n  return result\n}\n"],"names":["createBlocksMap","createPathMap","traverseFields","transform","adapter","config","data","fields","relationships","texts","numbers","_rels","_texts","_numbers","blocks","deletions","result","dataRef","id","fieldPrefix","path","table","forEach","deletion"],"mappings":"AAAA,oCAAoC,GAKpC,SAASA,eAAe,QAAQ,qCAAoC;AACpE,SAASC,aAAa,QAAQ,2CAA0C;AACxE,SAASC,cAAc,QAAQ,sBAAqB;AAWpD,2DAA2D;AAC3D,uDAAuD;AACvD,OAAO,MAAMC,YAAY,CAAiD,EACxEC,OAAO,EACPC,MAAM,EACNC,IAAI,EACJC,MAAM,EACQ;IACd,IAAIC,gBAA2D,CAAC;IAChE,IAAIC,QAAmD,CAAC;IACxD,IAAIC,UAAqD,CAAC;IAE1D,IAAI,WAAWJ,MAAM;QACnBE,gBAAgBP,cAAcK,KAAKK,KAAK;QACxC,OAAOL,KAAKK,KAAK;IACnB;IAEA,IAAI,YAAYL,MAAM;QACpBG,QAAQR,cAAcK,KAAKM,MAAM;QACjC,OAAON,KAAKM,MAAM;IACpB;IAEA,IAAI,cAAcN,MAAM;QACtBI,UAAUT,cAAcK,KAAKO,QAAQ;QACrC,OAAOP,KAAKO,QAAQ;IACtB;IAEA,MAAMC,SAASd,gBAAgBM;IAC/B,MAAMS,YAAY,EAAE;IAEpB,MAAMC,SAASd,eAAkB;QAC/BE;QACAU;QACAT;QACAY,SAAS;YACPC,IAAIZ,KAAKY,EAAE;QACb;QACAH;QACAI,aAAa;QACbZ;QACAG;QACAU,MAAM;QACNZ;QACAa,OAAOf;QACPG;IACF;IAEAM,UAAUO,OAAO,CAAC,CAACC,WAAaA;IAEhC,OAAOP;AACT,EAAC"}