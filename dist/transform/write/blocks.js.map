{"version":3,"sources":["../../../src/transform/write/blocks.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport type { BlockField } from 'payload'\n\nimport toSnakeCase from 'to-snake-case'\n\nimport type { PostgresAdapter } from '../../types.js'\nimport type { BlockRowToInsert, RelationshipToDelete } from './types.js'\n\nimport { traverseFields } from './traverseFields.js'\n\ntype Args = {\n  adapter: PostgresAdapter\n  baseTableName: string\n  blocks: {\n    [blockType: string]: BlockRowToInsert[]\n  }\n  blocksToDelete: Set<string>\n  data: Record<string, unknown>[]\n  field: BlockField\n  locale?: string\n  numbers: Record<string, unknown>[]\n  path: string\n  relationships: Record<string, unknown>[]\n  relationshipsToDelete: RelationshipToDelete[]\n  selects: {\n    [tableName: string]: Record<string, unknown>[]\n  }\n  texts: Record<string, unknown>[]\n}\nexport const transformBlocks = ({\n  adapter,\n  baseTableName,\n  blocks,\n  blocksToDelete,\n  data,\n  field,\n  locale,\n  numbers,\n  path,\n  relationships,\n  relationshipsToDelete,\n  selects,\n  texts,\n}: Args) => {\n  data.forEach((blockRow, i) => {\n    if (typeof blockRow.blockType !== 'string') return\n    const matchedBlock = field.blocks.find(({ slug }) => slug === blockRow.blockType)\n    if (!matchedBlock) return\n    const blockType = toSnakeCase(blockRow.blockType)\n\n    if (!blocks[blockType]) blocks[blockType] = []\n\n    const newRow: BlockRowToInsert = {\n      arrays: {},\n      locales: {},\n      row: {\n        _order: i + 1,\n        _path: `${path}${field.name}`,\n      },\n    }\n\n    if (field.localized && locale) newRow.row._locale = locale\n\n    const blockTableName = adapter.tableNameMap.get(`${baseTableName}_blocks_${blockType}`)\n\n    const hasUUID = adapter.tables[blockTableName]._uuid\n\n    // If we have declared a _uuid field on arrays,\n    // that means the ID has to be unique,\n    // and our ids within arrays are not unique.\n    // So move the ID to a uuid field for storage\n    // and allow the database to generate a serial id automatically\n    if (hasUUID) {\n      newRow.row._uuid = blockRow.id\n      delete blockRow.id\n    }\n\n    traverseFields({\n      adapter,\n      arrays: newRow.arrays,\n      baseTableName,\n      blocks,\n      blocksToDelete,\n      columnPrefix: '',\n      data: blockRow,\n      fieldPrefix: '',\n      fields: matchedBlock.fields,\n      locales: newRow.locales,\n      numbers,\n      parentTableName: blockTableName,\n      path: `${path || ''}${field.name}.${i}.`,\n      relationships,\n      relationshipsToDelete,\n      row: newRow.row,\n      selects,\n      texts,\n    })\n\n    blocks[blockType].push(newRow)\n  })\n}\n"],"names":["toSnakeCase","traverseFields","transformBlocks","adapter","baseTableName","blocks","blocksToDelete","data","field","locale","numbers","path","relationships","relationshipsToDelete","selects","texts","forEach","blockRow","i","blockType","matchedBlock","find","slug","newRow","arrays","locales","row","_order","_path","name","localized","_locale","blockTableName","tableNameMap","get","hasUUID","tables","_uuid","id","columnPrefix","fieldPrefix","fields","parentTableName","push"],"mappings":"AAAA,oCAAoC,GAGpC,OAAOA,iBAAiB,gBAAe;AAKvC,SAASC,cAAc,QAAQ,sBAAqB;AAqBpD,OAAO,MAAMC,kBAAkB,CAAC,EAC9BC,OAAO,EACPC,aAAa,EACbC,MAAM,EACNC,cAAc,EACdC,IAAI,EACJC,KAAK,EACLC,MAAM,EACNC,OAAO,EACPC,IAAI,EACJC,aAAa,EACbC,qBAAqB,EACrBC,OAAO,EACPC,KAAK,EACA;IACLR,KAAKS,OAAO,CAAC,CAACC,UAAUC;QACtB,IAAI,OAAOD,SAASE,SAAS,KAAK,UAAU;QAC5C,MAAMC,eAAeZ,MAAMH,MAAM,CAACgB,IAAI,CAAC,CAAC,EAAEC,IAAI,EAAE,GAAKA,SAASL,SAASE,SAAS;QAChF,IAAI,CAACC,cAAc;QACnB,MAAMD,YAAYnB,YAAYiB,SAASE,SAAS;QAEhD,IAAI,CAACd,MAAM,CAACc,UAAU,EAAEd,MAAM,CAACc,UAAU,GAAG,EAAE;QAE9C,MAAMI,SAA2B;YAC/BC,QAAQ,CAAC;YACTC,SAAS,CAAC;YACVC,KAAK;gBACHC,QAAQT,IAAI;gBACZU,OAAO,CAAC,EAAEjB,KAAK,EAAEH,MAAMqB,IAAI,CAAC,CAAC;YAC/B;QACF;QAEA,IAAIrB,MAAMsB,SAAS,IAAIrB,QAAQc,OAAOG,GAAG,CAACK,OAAO,GAAGtB;QAEpD,MAAMuB,iBAAiB7B,QAAQ8B,YAAY,CAACC,GAAG,CAAC,CAAC,EAAE9B,cAAc,QAAQ,EAAEe,UAAU,CAAC;QAEtF,MAAMgB,UAAUhC,QAAQiC,MAAM,CAACJ,eAAe,CAACK,KAAK;QAEpD,+CAA+C;QAC/C,sCAAsC;QACtC,4CAA4C;QAC5C,6CAA6C;QAC7C,+DAA+D;QAC/D,IAAIF,SAAS;YACXZ,OAAOG,GAAG,CAACW,KAAK,GAAGpB,SAASqB,EAAE;YAC9B,OAAOrB,SAASqB,EAAE;QACpB;QAEArC,eAAe;YACbE;YACAqB,QAAQD,OAAOC,MAAM;YACrBpB;YACAC;YACAC;YACAiC,cAAc;YACdhC,MAAMU;YACNuB,aAAa;YACbC,QAAQrB,aAAaqB,MAAM;YAC3BhB,SAASF,OAAOE,OAAO;YACvBf;YACAgC,iBAAiBV;YACjBrB,MAAM,CAAC,EAAEA,QAAQ,GAAG,EAAEH,MAAMqB,IAAI,CAAC,CAAC,EAAEX,EAAE,CAAC,CAAC;YACxCN;YACAC;YACAa,KAAKH,OAAOG,GAAG;YACfZ;YACAC;QACF;QAEAV,MAAM,CAACc,UAAU,CAACwB,IAAI,CAACpB;IACzB;AACF,EAAC"}