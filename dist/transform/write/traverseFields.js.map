{"version":3,"sources":["../../../src/transform/write/traverseFields.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport type { Field } from 'payload'\n\nimport { fieldAffectsData } from 'payload/shared'\nimport toSnakeCase from 'to-snake-case'\n\nimport type { PostgresAdapter } from '../../types.js'\nimport type { ArrayRowToInsert, BlockRowToInsert, RelationshipToDelete } from './types.js'\n\nimport { isArrayOfRows } from '../../utilities/isArrayOfRows.js'\nimport { transformArray } from './array.js'\nimport { transformBlocks } from './blocks.js'\nimport { transformNumbers } from './numbers.js'\nimport { transformRelationship } from './relationships.js'\nimport { transformSelects } from './selects.js'\nimport { transformTexts } from './texts.js'\n\ntype Args = {\n  adapter: PostgresAdapter\n  arrays: {\n    [tableName: string]: ArrayRowToInsert[]\n  }\n  /**\n   * This is the name of the base table\n   */\n  baseTableName: string\n  blocks: {\n    [blockType: string]: BlockRowToInsert[]\n  }\n  blocksToDelete: Set<string>\n  /**\n   * A snake-case field prefix, representing prior fields\n   * Ex: my_group_my_named_tab_\n   */\n  columnPrefix: string\n  data: Record<string, unknown>\n  existingLocales?: Record<string, unknown>[]\n  /**\n   * A prefix that will retain camel-case formatting, representing prior fields\n   * Ex: myGroup_myNamedTab_\n   */\n  fieldPrefix: string\n  fields: Field[]\n  forcedLocale?: string\n  locales: {\n    [locale: string]: Record<string, unknown>\n  }\n  numbers: Record<string, unknown>[]\n  /**\n   * This is the name of the parent table\n   */\n  parentTableName: string\n  path: string\n  relationships: Record<string, unknown>[]\n  relationshipsToDelete: RelationshipToDelete[]\n  row: Record<string, unknown>\n  selects: {\n    [tableName: string]: Record<string, unknown>[]\n  }\n  texts: Record<string, unknown>[]\n}\n\nexport const traverseFields = ({\n  adapter,\n  arrays,\n  baseTableName,\n  blocks,\n  blocksToDelete,\n  columnPrefix,\n  data,\n  existingLocales,\n  fieldPrefix,\n  fields,\n  forcedLocale,\n  locales,\n  numbers,\n  parentTableName,\n  path,\n  relationships,\n  relationshipsToDelete,\n  row,\n  selects,\n  texts,\n}: Args) => {\n  fields.forEach((field) => {\n    let columnName = ''\n    let fieldName = ''\n    let fieldData: unknown\n\n    if ('dbStore' in field && !field.dbStore) return\n\n    if (fieldAffectsData(field)) {\n      columnName = `${columnPrefix || ''}${toSnakeCase(field.name)}`\n      fieldName = `${fieldPrefix || ''}${field.name}`\n      fieldData = data[field.name]\n    }\n\n    if (('dbJsonColumn' in field && !field.dbJsonColumn) || !('dbJsonColumn' in field)) {\n      if (field.type === 'array') {\n        const arrayTableName = adapter.tableNameMap.get(`${parentTableName}_${columnName}`)\n\n        if (!arrays[arrayTableName]) arrays[arrayTableName] = []\n\n        if (field.localized) {\n          if (typeof data[field.name] === 'object' && data[field.name] !== null) {\n            Object.entries(data[field.name]).forEach(([localeKey, localeData]) => {\n              if (Array.isArray(localeData)) {\n                const newRows = transformArray({\n                  adapter,\n                  arrayTableName,\n                  baseTableName,\n                  blocks,\n                  blocksToDelete,\n                  data: localeData,\n                  field,\n                  locale: localeKey,\n                  numbers,\n                  path,\n                  relationships,\n                  relationshipsToDelete,\n                  selects,\n                  texts,\n                })\n\n                arrays[arrayTableName] = arrays[arrayTableName].concat(newRows)\n              }\n            })\n          }\n        } else {\n          const newRows = transformArray({\n            adapter,\n            arrayTableName,\n            baseTableName,\n            blocks,\n            blocksToDelete,\n            data: data[field.name],\n            field,\n            numbers,\n            path,\n            relationships,\n            relationshipsToDelete,\n            selects,\n            texts,\n          })\n\n          arrays[arrayTableName] = arrays[arrayTableName].concat(newRows)\n        }\n\n        return\n      }\n\n      if (field.type === 'blocks') {\n        field.blocks.forEach(({ slug }) => {\n          blocksToDelete.add(toSnakeCase(slug))\n        })\n\n        if (field.localized) {\n          if (typeof data[field.name] === 'object' && data[field.name] !== null) {\n            Object.entries(data[field.name]).forEach(([localeKey, localeData]) => {\n              if (Array.isArray(localeData)) {\n                transformBlocks({\n                  adapter,\n                  baseTableName,\n                  blocks,\n                  blocksToDelete,\n                  data: localeData,\n                  field,\n                  locale: localeKey,\n                  numbers,\n                  path,\n                  relationships,\n                  relationshipsToDelete,\n                  selects,\n                  texts,\n                })\n              }\n            })\n          }\n        } else if (isArrayOfRows(fieldData)) {\n          transformBlocks({\n            adapter,\n            baseTableName,\n            blocks,\n            blocksToDelete,\n            data: fieldData,\n            field,\n            numbers,\n            path,\n            relationships,\n            relationshipsToDelete,\n            selects,\n            texts,\n          })\n        }\n\n        return\n      }\n\n      if (field.type === 'group') {\n        if (typeof data[field.name] === 'object' && data[field.name] !== null) {\n          if (field.localized) {\n            Object.entries(data[field.name]).forEach(([localeKey, localeData]) => {\n              traverseFields({\n                adapter,\n                arrays,\n                baseTableName,\n                blocks,\n                blocksToDelete,\n                columnPrefix: `${columnName}_`,\n                data: localeData as Record<string, unknown>,\n                existingLocales,\n                fieldPrefix: `${fieldName}_`,\n                fields: field.fields,\n                forcedLocale: localeKey,\n                locales,\n                numbers,\n                parentTableName,\n                path: `${path || ''}${field.name}.`,\n                relationships,\n                relationshipsToDelete,\n                row,\n                selects,\n                texts,\n              })\n            })\n          } else {\n            traverseFields({\n              adapter,\n              arrays,\n              baseTableName,\n              blocks,\n              blocksToDelete,\n              columnPrefix: `${columnName}_`,\n              data: data[field.name] as Record<string, unknown>,\n              existingLocales,\n              fieldPrefix: `${fieldName}_`,\n              fields: field.fields,\n              locales,\n              numbers,\n              parentTableName,\n              path: `${path || ''}${field.name}.`,\n              relationships,\n              relationshipsToDelete,\n              row,\n              selects,\n              texts,\n            })\n          }\n        }\n\n        return\n      }\n\n      if (field.type === 'tabs') {\n        field.tabs.forEach((tab) => {\n          if ('name' in tab) {\n            if (typeof data[tab.name] === 'object' && data[tab.name] !== null) {\n              if (tab.localized) {\n                Object.entries(data[tab.name]).forEach(([localeKey, localeData]) => {\n                  traverseFields({\n                    adapter,\n                    arrays,\n                    baseTableName,\n                    blocks,\n                    blocksToDelete,\n                    columnPrefix: `${columnPrefix || ''}${toSnakeCase(tab.name)}_`,\n                    data: localeData as Record<string, unknown>,\n                    existingLocales,\n                    fieldPrefix: `${fieldPrefix || ''}${tab.name}_`,\n                    fields: tab.fields,\n                    forcedLocale: localeKey,\n                    locales,\n                    numbers,\n                    parentTableName,\n                    path: `${path || ''}${tab.name}.`,\n                    relationships,\n                    relationshipsToDelete,\n                    row,\n                    selects,\n                    texts,\n                  })\n                })\n              } else {\n                traverseFields({\n                  adapter,\n                  arrays,\n                  baseTableName,\n                  blocks,\n                  blocksToDelete,\n                  columnPrefix: `${columnPrefix || ''}${toSnakeCase(tab.name)}_`,\n                  data: data[tab.name] as Record<string, unknown>,\n                  existingLocales,\n                  fieldPrefix: `${fieldPrefix || ''}${tab.name}_`,\n                  fields: tab.fields,\n                  locales,\n                  numbers,\n                  parentTableName,\n                  path: `${path || ''}${tab.name}.`,\n                  relationships,\n                  relationshipsToDelete,\n                  row,\n                  selects,\n                  texts,\n                })\n              }\n            }\n          } else {\n            traverseFields({\n              adapter,\n              arrays,\n              baseTableName,\n              blocks,\n              blocksToDelete,\n              columnPrefix,\n              data,\n              existingLocales,\n              fieldPrefix,\n              fields: tab.fields,\n              locales,\n              numbers,\n              parentTableName,\n              path,\n              relationships,\n              relationshipsToDelete,\n              row,\n              selects,\n              texts,\n            })\n          }\n        })\n      }\n\n      if (field.type === 'row' || field.type === 'collapsible') {\n        traverseFields({\n          adapter,\n          arrays,\n          baseTableName,\n          blocks,\n          blocksToDelete,\n          columnPrefix,\n          data,\n          existingLocales,\n          fieldPrefix,\n          fields: field.fields,\n          locales,\n          numbers,\n          parentTableName,\n          path,\n          relationships,\n          relationshipsToDelete,\n          row,\n          selects,\n          texts,\n        })\n      }\n\n      if (field.type === 'relationship' || field.type === 'upload') {\n        const relationshipPath = `${path || ''}${field.name}`\n\n        if (\n          field.localized &&\n          (Array.isArray(field.relationTo) || ('hasMany' in field && field.hasMany))\n        ) {\n          if (typeof fieldData === 'object') {\n            Object.entries(fieldData).forEach(([localeKey, localeData]) => {\n              if (localeData === null) {\n                relationshipsToDelete.push({\n                  locale: localeKey,\n                  path: relationshipPath,\n                })\n                return\n              }\n\n              transformRelationship({\n                baseRow: {\n                  locale: localeKey,\n                  path: relationshipPath,\n                },\n                data: localeData,\n                field,\n                relationships,\n              })\n            })\n          }\n          return\n        } else if (Array.isArray(field.relationTo) || ('hasMany' in field && field.hasMany)) {\n          if (fieldData === null || (Array.isArray(fieldData) && fieldData.length === 0)) {\n            relationshipsToDelete.push({ path: relationshipPath })\n            return\n          }\n\n          transformRelationship({\n            baseRow: {\n              path: relationshipPath,\n            },\n            data: fieldData,\n            field,\n            relationships,\n          })\n          return\n        } else {\n          if (\n            !field.localized &&\n            fieldData &&\n            typeof fieldData === 'object' &&\n            'id' in fieldData &&\n            fieldData?.id\n          ) {\n            fieldData = fieldData.id\n          } else if (field.localized) {\n            if (typeof fieldData === 'object') {\n              Object.entries(fieldData).forEach(([localeKey, localeData]) => {\n                if (typeof localeData === 'object') {\n                  if (localeData && 'id' in localeData && localeData?.id) {\n                    fieldData[localeKey] = localeData.id\n                  }\n                } else {\n                  fieldData[localeKey] = localeData\n                }\n              })\n            }\n          }\n        }\n      }\n\n      if (field.type === 'text' && field.hasMany) {\n        const textPath = `${path || ''}${field.name}`\n\n        if (field.localized) {\n          if (typeof fieldData === 'object') {\n            Object.entries(fieldData).forEach(([localeKey, localeData]) => {\n              if (Array.isArray(localeData)) {\n                transformTexts({\n                  baseRow: {\n                    locale: localeKey,\n                    path: textPath,\n                  },\n                  data: localeData,\n                  texts,\n                })\n              }\n            })\n          }\n        } else if (Array.isArray(fieldData)) {\n          transformTexts({\n            baseRow: {\n              path: textPath,\n            },\n            data: fieldData,\n            texts,\n          })\n        }\n\n        return\n      }\n\n      if (field.type === 'number' && field.hasMany) {\n        const numberPath = `${path || ''}${field.name}`\n\n        if (field.localized) {\n          if (typeof fieldData === 'object') {\n            Object.entries(fieldData).forEach(([localeKey, localeData]) => {\n              if (Array.isArray(localeData)) {\n                transformNumbers({\n                  baseRow: {\n                    locale: localeKey,\n                    path: numberPath,\n                  },\n                  data: localeData,\n                  numbers,\n                })\n              }\n            })\n          }\n        } else if (Array.isArray(fieldData)) {\n          transformNumbers({\n            baseRow: {\n              path: numberPath,\n            },\n            data: fieldData,\n            numbers,\n          })\n        }\n\n        return\n      }\n\n      if (field.type === 'select' && field.hasMany) {\n        const selectTableName = adapter.tableNameMap.get(`${parentTableName}_${columnName}`)\n        if (!selects[selectTableName]) selects[selectTableName] = []\n\n        if (field.localized) {\n          if (typeof data[field.name] === 'object' && data[field.name] !== null) {\n            Object.entries(data[field.name]).forEach(([localeKey, localeData]) => {\n              if (Array.isArray(localeData)) {\n                const newRows = transformSelects({\n                  id: data._uuid || data.id,\n                  data: localeData,\n                  locale: localeKey,\n                })\n\n                selects[selectTableName] = selects[selectTableName].concat(newRows)\n              }\n            })\n          }\n        } else if (Array.isArray(data[field.name])) {\n          const newRows = transformSelects({\n            id: data._uuid || data.id,\n            data: data[field.name],\n          })\n\n          selects[selectTableName] = selects[selectTableName].concat(newRows)\n        }\n\n        return\n      }\n    }\n\n    if (fieldAffectsData(field)) {\n      const valuesToTransform: { localeKey?: string; ref: unknown; value: unknown }[] = []\n\n      if (field.localized) {\n        if (typeof fieldData === 'object' && fieldData !== null) {\n          Object.entries(fieldData).forEach(([localeKey, localeData]) => {\n            if (!locales[localeKey]) locales[localeKey] = {}\n\n            valuesToTransform.push({\n              localeKey,\n              ref: locales,\n              value: localeData,\n            })\n          })\n        }\n      } else {\n        let ref = row\n\n        if (forcedLocale) {\n          if (!locales[forcedLocale]) locales[forcedLocale] = {}\n          ref = locales[forcedLocale]\n        }\n\n        valuesToTransform.push({ ref, value: fieldData })\n      }\n\n      valuesToTransform.forEach(({ localeKey, ref, value }) => {\n        if (typeof value !== 'undefined') {\n          let formattedValue = value\n\n          if (field.type === 'date' && field.name === 'updatedAt') {\n            formattedValue = new Date().toISOString()\n          }\n\n          if (field.type === 'date' && typeof value === 'string') {\n            formattedValue = new Date(value)\n          }\n\n          if (localeKey) {\n            ref[localeKey][fieldName] = formattedValue\n          } else {\n            ref[fieldName] = formattedValue\n          }\n        }\n      })\n    }\n  })\n}\n"],"names":["fieldAffectsData","toSnakeCase","isArrayOfRows","transformArray","transformBlocks","transformNumbers","transformRelationship","transformSelects","transformTexts","traverseFields","adapter","arrays","baseTableName","blocks","blocksToDelete","columnPrefix","data","existingLocales","fieldPrefix","fields","forcedLocale","locales","numbers","parentTableName","path","relationships","relationshipsToDelete","row","selects","texts","forEach","field","columnName","fieldName","fieldData","dbStore","name","dbJsonColumn","type","arrayTableName","tableNameMap","get","localized","Object","entries","localeKey","localeData","Array","isArray","newRows","locale","concat","slug","add","tabs","tab","relationshipPath","relationTo","hasMany","push","baseRow","length","id","textPath","numberPath","selectTableName","_uuid","valuesToTransform","ref","value","formattedValue","Date","toISOString"],"mappings":"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"}