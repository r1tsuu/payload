{"version":3,"sources":["../../../src/versions/drafts/replaceWithDraftIfAvailable.ts"],"sourcesContent":["import type { SanitizedCollectionConfig, TypeWithID } from '../../collections/config/types.js'\nimport type { AccessResult } from '../../config/types.js'\nimport type { FindGlobalVersionsArgs, FindVersionsArgs } from '../../database/types.js'\nimport type { SanitizedGlobalConfig } from '../../globals/config/types.js'\nimport type { PayloadRequestWithData, Where } from '../../types/index.js'\n\nimport { hasWhereAccessResult } from '../../auth/index.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { docHasTimestamps } from '../../types/index.js'\nimport sanitizeInternalFields from '../../utilities/sanitizeInternalFields.js'\nimport { appendVersionToQueryKey } from './appendVersionToQueryKey.js'\n\ntype Arguments<T> = {\n  accessResult: AccessResult\n  doc: T\n  entity: SanitizedCollectionConfig | SanitizedGlobalConfig\n  entityType: 'collection' | 'global'\n  overrideAccess: boolean\n  req: PayloadRequestWithData\n}\n\nconst replaceWithDraftIfAvailable = async <T extends TypeWithID>({\n  accessResult,\n  doc,\n  entity,\n  entityType,\n  req,\n}: Arguments<T>): Promise<T> => {\n  const { locale } = req\n\n  const queryToBuild: Where = {\n    and: [\n      {\n        'version._status': {\n          equals: 'draft',\n        },\n      },\n    ],\n  }\n\n  if (entityType === 'collection') {\n    queryToBuild.and.push({\n      parent: {\n        equals: doc.id,\n      },\n    })\n  }\n\n  if (docHasTimestamps(doc)) {\n    queryToBuild.and.push({\n      updatedAt: {\n        greater_than: doc.updatedAt,\n      },\n    })\n  }\n\n  let versionAccessResult\n\n  if (hasWhereAccessResult(accessResult)) {\n    versionAccessResult = appendVersionToQueryKey(accessResult)\n  }\n\n  const findVersionsArgs: FindVersionsArgs & FindGlobalVersionsArgs = {\n    collection: entity.slug,\n    global: entity.slug,\n    limit: 1,\n    locale,\n    pagination: false,\n    req,\n    sort: '-updatedAt',\n    where: combineQueries(queryToBuild, versionAccessResult),\n  }\n\n  let versionDocs\n  if (entityType === 'global') {\n    versionDocs = (await req.payload.db.findGlobalVersions<T>(findVersionsArgs)).docs\n  } else {\n    versionDocs = (await req.payload.db.findVersions<T>(findVersionsArgs)).docs\n  }\n\n  let draft = versionDocs[0]\n\n  if (!draft) {\n    return doc\n  }\n\n  draft = JSON.parse(JSON.stringify(draft))\n  draft = sanitizeInternalFields(draft)\n\n  // Patch globalType onto version doc\n  if (entityType === 'global' && 'globalType' in doc) {\n    draft.version.globalType = doc.globalType\n  }\n\n  // Disregard all other draft content at this point,\n  // Only interested in the version itself.\n  // Operations will handle firing hooks, etc.\n  return {\n    id: doc.id,\n    ...draft.version,\n    createdAt: draft.createdAt,\n    updatedAt: draft.updatedAt,\n  }\n}\n\nexport default replaceWithDraftIfAvailable\n"],"names":["hasWhereAccessResult","combineQueries","docHasTimestamps","sanitizeInternalFields","appendVersionToQueryKey","replaceWithDraftIfAvailable","accessResult","doc","entity","entityType","req","locale","queryToBuild","and","equals","push","parent","id","updatedAt","greater_than","versionAccessResult","findVersionsArgs","collection","slug","global","limit","pagination","sort","where","versionDocs","payload","db","findGlobalVersions","docs","findVersions","draft","JSON","parse","stringify","version","globalType","createdAt"],"mappings":"AAMA,SAASA,oBAAoB,QAAQ,sBAAqB;AAC1D,SAASC,cAAc,QAAQ,mCAAkC;AACjE,SAASC,gBAAgB,QAAQ,uBAAsB;AACvD,OAAOC,4BAA4B,4CAA2C;AAC9E,SAASC,uBAAuB,QAAQ,+BAA8B;AAWtE,MAAMC,8BAA8B,OAA6B,EAC/DC,YAAY,EACZC,GAAG,EACHC,MAAM,EACNC,UAAU,EACVC,GAAG,EACU;IACb,MAAM,EAAEC,MAAM,EAAE,GAAGD;IAEnB,MAAME,eAAsB;QAC1BC,KAAK;YACH;gBACE,mBAAmB;oBACjBC,QAAQ;gBACV;YACF;SACD;IACH;IAEA,IAAIL,eAAe,cAAc;QAC/BG,aAAaC,GAAG,CAACE,IAAI,CAAC;YACpBC,QAAQ;gBACNF,QAAQP,IAAIU,EAAE;YAChB;QACF;IACF;IAEA,IAAIf,iBAAiBK,MAAM;QACzBK,aAAaC,GAAG,CAACE,IAAI,CAAC;YACpBG,WAAW;gBACTC,cAAcZ,IAAIW,SAAS;YAC7B;QACF;IACF;IAEA,IAAIE;IAEJ,IAAIpB,qBAAqBM,eAAe;QACtCc,sBAAsBhB,wBAAwBE;IAChD;IAEA,MAAMe,mBAA8D;QAClEC,YAAYd,OAAOe,IAAI;QACvBC,QAAQhB,OAAOe,IAAI;QACnBE,OAAO;QACPd;QACAe,YAAY;QACZhB;QACAiB,MAAM;QACNC,OAAO3B,eAAeW,cAAcQ;IACtC;IAEA,IAAIS;IACJ,IAAIpB,eAAe,UAAU;QAC3BoB,cAAc,AAAC,CAAA,MAAMnB,IAAIoB,OAAO,CAACC,EAAE,CAACC,kBAAkB,CAAIX,iBAAgB,EAAGY,IAAI;IACnF,OAAO;QACLJ,cAAc,AAAC,CAAA,MAAMnB,IAAIoB,OAAO,CAACC,EAAE,CAACG,YAAY,CAAIb,iBAAgB,EAAGY,IAAI;IAC7E;IAEA,IAAIE,QAAQN,WAAW,CAAC,EAAE;IAE1B,IAAI,CAACM,OAAO;QACV,OAAO5B;IACT;IAEA4B,QAAQC,KAAKC,KAAK,CAACD,KAAKE,SAAS,CAACH;IAClCA,QAAQhC,uBAAuBgC;IAE/B,oCAAoC;IACpC,IAAI1B,eAAe,YAAY,gBAAgBF,KAAK;QAClD4B,MAAMI,OAAO,CAACC,UAAU,GAAGjC,IAAIiC,UAAU;IAC3C;IAEA,mDAAmD;IACnD,yCAAyC;IACzC,4CAA4C;IAC5C,OAAO;QACLvB,IAAIV,IAAIU,EAAE;QACV,GAAGkB,MAAMI,OAAO;QAChBE,WAAWN,MAAMM,SAAS;QAC1BvB,WAAWiB,MAAMjB,SAAS;IAC5B;AACF;AAEA,eAAeb,4BAA2B"}